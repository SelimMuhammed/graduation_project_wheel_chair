
Wheel_Chair.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000449c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000449c  00004530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800168  00800168  00004638  2**0
                  ALLOC
  3 .stab         00003e7c  00000000  00000000  00004638  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003a6b  00000000  00000000  000084b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000bf1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c2b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000fa42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000110ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__vector_4>
      14:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_5>
      18:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_6>
      1c:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__vector_7>
      20:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_8>
      24:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__vector_9>
      28:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__vector_10>
      2c:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e9       	ldi	r30, 0x9C	; 156
      78:	f4 e4       	ldi	r31, 0x44	; 68
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <main>
      8a:	0c 94 4c 22 	jmp	0x4498	; 0x4498 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 22 	jmp	0x442a	; 0x442a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 22 	jmp	0x4442	; 0x4442 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 22 	jmp	0x4442	; 0x4442 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 22 	jmp	0x442a	; 0x442a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 22 	jmp	0x443a	; 0x443a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 39 22 	jmp	0x4472	; 0x4472 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 21 22 	jmp	0x4442	; 0x4442 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 21 22 	jmp	0x4442	; 0x4442 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 21 22 	jmp	0x4442	; 0x4442 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 25 22 	jmp	0x444a	; 0x444a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 1d 22 	jmp	0x443a	; 0x443a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 39 22 	jmp	0x4472	; 0x4472 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Set_CallBack_TIMER_0_OVF_INT>:




void Set_CallBack_TIMER_0_OVF_INT(void (*ptr)(void))
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Set_CallBack_TIMER_0_OVF_INT+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	41 f0       	breq	.+16     	; 0xe54 <Set_CallBack_TIMER_0_OVF_INT+0x26>
	{
		TIMER_ISR->TIMER_0_OVF_INT = ptr;
     e44:	e0 91 68 01 	lds	r30, 0x0168
     e48:	f0 91 69 01 	lds	r31, 0x0169
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	80 83       	st	Z, r24
	}
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <__vector_11>:
void __vector_11 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_11 (void)
{
     e5e:	1f 92       	push	r1
     e60:	0f 92       	push	r0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	0f 92       	push	r0
     e66:	11 24       	eor	r1, r1
     e68:	2f 93       	push	r18
     e6a:	3f 93       	push	r19
     e6c:	4f 93       	push	r20
     e6e:	5f 93       	push	r21
     e70:	6f 93       	push	r22
     e72:	7f 93       	push	r23
     e74:	8f 93       	push	r24
     e76:	9f 93       	push	r25
     e78:	af 93       	push	r26
     e7a:	bf 93       	push	r27
     e7c:	ef 93       	push	r30
     e7e:	ff 93       	push	r31
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_0_OVF_INT != NULL)
     e88:	e0 91 68 01 	lds	r30, 0x0168
     e8c:	f0 91 69 01 	lds	r31, 0x0169
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	41 f0       	breq	.+16     	; 0xea8 <__vector_11+0x4a>
	{
		TIMER_ISR->TIMER_0_OVF_INT();
     e98:	e0 91 68 01 	lds	r30, 0x0168
     e9c:	f0 91 69 01 	lds	r31, 0x0169
     ea0:	01 90       	ld	r0, Z+
     ea2:	f0 81       	ld	r31, Z
     ea4:	e0 2d       	mov	r30, r0
     ea6:	09 95       	icall
	}
}
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	ff 91       	pop	r31
     eae:	ef 91       	pop	r30
     eb0:	bf 91       	pop	r27
     eb2:	af 91       	pop	r26
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	7f 91       	pop	r23
     eba:	6f 91       	pop	r22
     ebc:	5f 91       	pop	r21
     ebe:	4f 91       	pop	r20
     ec0:	3f 91       	pop	r19
     ec2:	2f 91       	pop	r18
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f 90       	pop	r0
     eca:	1f 90       	pop	r1
     ecc:	18 95       	reti

00000ece <Set_CallBack_TIMER_0_OC_INT>:

void Set_CallBack_TIMER_0_OC_INT(void (*ptr)(void))
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <Set_CallBack_TIMER_0_OC_INT+0x6>
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	41 f0       	breq	.+16     	; 0xef4 <Set_CallBack_TIMER_0_OC_INT+0x26>
	{
		TIMER_ISR->TIMER_0_OC_INT = ptr;
     ee4:	e0 91 68 01 	lds	r30, 0x0168
     ee8:	f0 91 69 01 	lds	r31, 0x0169
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	93 83       	std	Z+3, r25	; 0x03
     ef2:	82 83       	std	Z+2, r24	; 0x02
	}
}
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <__vector_10>:
void __vector_10 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_10 (void)
{
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_0_OC_INT != NULL)
     f28:	e0 91 68 01 	lds	r30, 0x0168
     f2c:	f0 91 69 01 	lds	r31, 0x0169
     f30:	82 81       	ldd	r24, Z+2	; 0x02
     f32:	93 81       	ldd	r25, Z+3	; 0x03
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	41 f0       	breq	.+16     	; 0xf48 <__vector_10+0x4a>
	{
		TIMER_ISR->TIMER_0_OC_INT();
     f38:	e0 91 68 01 	lds	r30, 0x0168
     f3c:	f0 91 69 01 	lds	r31, 0x0169
     f40:	02 80       	ldd	r0, Z+2	; 0x02
     f42:	f3 81       	ldd	r31, Z+3	; 0x03
     f44:	e0 2d       	mov	r30, r0
     f46:	09 95       	icall
	}
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	bf 91       	pop	r27
     f52:	af 91       	pop	r26
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	7f 91       	pop	r23
     f5a:	6f 91       	pop	r22
     f5c:	5f 91       	pop	r21
     f5e:	4f 91       	pop	r20
     f60:	3f 91       	pop	r19
     f62:	2f 91       	pop	r18
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <Set_CallBack_TIMER_1_OVF_INT>:




void Set_CallBack_TIMER_1_OVF_INT(void (*ptr)(void))
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <Set_CallBack_TIMER_1_OVF_INT+0x6>
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	41 f0       	breq	.+16     	; 0xf94 <Set_CallBack_TIMER_1_OVF_INT+0x26>
	{
		TIMER_ISR->TIMER_1_OVF_INT = ptr;
     f84:	e0 91 68 01 	lds	r30, 0x0168
     f88:	f0 91 69 01 	lds	r31, 0x0169
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	95 83       	std	Z+5, r25	; 0x05
     f92:	84 83       	std	Z+4, r24	; 0x04
	}
}
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <__vector_9>:
void __vector_9 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_9 (void)
{
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_OVF_INT != NULL)
     fc8:	e0 91 68 01 	lds	r30, 0x0168
     fcc:	f0 91 69 01 	lds	r31, 0x0169
     fd0:	84 81       	ldd	r24, Z+4	; 0x04
     fd2:	95 81       	ldd	r25, Z+5	; 0x05
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	41 f0       	breq	.+16     	; 0xfe8 <__vector_9+0x4a>
	{
		TIMER_ISR->TIMER_1_OVF_INT();
     fd8:	e0 91 68 01 	lds	r30, 0x0168
     fdc:	f0 91 69 01 	lds	r31, 0x0169
     fe0:	04 80       	ldd	r0, Z+4	; 0x04
     fe2:	f5 81       	ldd	r31, Z+5	; 0x05
     fe4:	e0 2d       	mov	r30, r0
     fe6:	09 95       	icall
	}
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	ff 91       	pop	r31
     fee:	ef 91       	pop	r30
     ff0:	bf 91       	pop	r27
     ff2:	af 91       	pop	r26
     ff4:	9f 91       	pop	r25
     ff6:	8f 91       	pop	r24
     ff8:	7f 91       	pop	r23
     ffa:	6f 91       	pop	r22
     ffc:	5f 91       	pop	r21
     ffe:	4f 91       	pop	r20
    1000:	3f 91       	pop	r19
    1002:	2f 91       	pop	r18
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <Set_CallBack_TIMER_1_OCA_INT>:

void Set_CallBack_TIMER_1_OCA_INT(void (*ptr)(void))
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <Set_CallBack_TIMER_1_OCA_INT+0x6>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	9a 81       	ldd	r25, Y+2	; 0x02
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	41 f0       	breq	.+16     	; 0x1034 <Set_CallBack_TIMER_1_OCA_INT+0x26>
	{
		TIMER_ISR->TIMER_1_OCA_INT = ptr;
    1024:	e0 91 68 01 	lds	r30, 0x0168
    1028:	f0 91 69 01 	lds	r31, 0x0169
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	97 83       	std	Z+7, r25	; 0x07
    1032:	86 83       	std	Z+6, r24	; 0x06
	}
}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <__vector_7>:
void __vector_7 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_7 (void)
{
    103e:	1f 92       	push	r1
    1040:	0f 92       	push	r0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	5f 93       	push	r21
    1050:	6f 93       	push	r22
    1052:	7f 93       	push	r23
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	af 93       	push	r26
    105a:	bf 93       	push	r27
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_OCA_INT != NULL)
    1068:	e0 91 68 01 	lds	r30, 0x0168
    106c:	f0 91 69 01 	lds	r31, 0x0169
    1070:	86 81       	ldd	r24, Z+6	; 0x06
    1072:	97 81       	ldd	r25, Z+7	; 0x07
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	41 f0       	breq	.+16     	; 0x1088 <__vector_7+0x4a>
	{
		TIMER_ISR->TIMER_1_OCA_INT();
    1078:	e0 91 68 01 	lds	r30, 0x0168
    107c:	f0 91 69 01 	lds	r31, 0x0169
    1080:	06 80       	ldd	r0, Z+6	; 0x06
    1082:	f7 81       	ldd	r31, Z+7	; 0x07
    1084:	e0 2d       	mov	r30, r0
    1086:	09 95       	icall
	}
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <Set_CallBack_TIMER_1_OCB_INT>:


void Set_CallBack_TIMER_1_OCB_INT(void (*ptr)(void))
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <Set_CallBack_TIMER_1_OCB_INT+0x6>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	41 f0       	breq	.+16     	; 0x10d4 <Set_CallBack_TIMER_1_OCB_INT+0x26>
	{
		TIMER_ISR->TIMER_1_OCB_INT = ptr;
    10c4:	e0 91 68 01 	lds	r30, 0x0168
    10c8:	f0 91 69 01 	lds	r31, 0x0169
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	91 87       	std	Z+9, r25	; 0x09
    10d2:	80 87       	std	Z+8, r24	; 0x08
	}
}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <__vector_8>:
void __vector_8 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_8 (void)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_OCB_INT != NULL)
    1108:	e0 91 68 01 	lds	r30, 0x0168
    110c:	f0 91 69 01 	lds	r31, 0x0169
    1110:	80 85       	ldd	r24, Z+8	; 0x08
    1112:	91 85       	ldd	r25, Z+9	; 0x09
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	41 f0       	breq	.+16     	; 0x1128 <__vector_8+0x4a>
	{
		TIMER_ISR->TIMER_1_OCB_INT();
    1118:	e0 91 68 01 	lds	r30, 0x0168
    111c:	f0 91 69 01 	lds	r31, 0x0169
    1120:	00 84       	ldd	r0, Z+8	; 0x08
    1122:	f1 85       	ldd	r31, Z+9	; 0x09
    1124:	e0 2d       	mov	r30, r0
    1126:	09 95       	icall
	}
}
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	ff 91       	pop	r31
    112e:	ef 91       	pop	r30
    1130:	bf 91       	pop	r27
    1132:	af 91       	pop	r26
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	7f 91       	pop	r23
    113a:	6f 91       	pop	r22
    113c:	5f 91       	pop	r21
    113e:	4f 91       	pop	r20
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <Set_CallBack_TIMER_1_CAPT_INT>:


void Set_CallBack_TIMER_1_CAPT_INT(void (*ptr)(void))
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <Set_CallBack_TIMER_1_CAPT_INT+0x6>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	41 f0       	breq	.+16     	; 0x1174 <Set_CallBack_TIMER_1_CAPT_INT+0x26>
	{
		TIMER_ISR->TIMER_1_CAPT_INT = ptr;
    1164:	e0 91 68 01 	lds	r30, 0x0168
    1168:	f0 91 69 01 	lds	r31, 0x0169
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	93 87       	std	Z+11, r25	; 0x0b
    1172:	82 87       	std	Z+10, r24	; 0x0a
	}
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <__vector_6>:
void __vector_6 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_6 (void)
{
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_CAPT_INT != NULL)
    11a8:	e0 91 68 01 	lds	r30, 0x0168
    11ac:	f0 91 69 01 	lds	r31, 0x0169
    11b0:	82 85       	ldd	r24, Z+10	; 0x0a
    11b2:	93 85       	ldd	r25, Z+11	; 0x0b
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	41 f0       	breq	.+16     	; 0x11c8 <__vector_6+0x4a>
	{
		TIMER_ISR->TIMER_1_CAPT_INT();
    11b8:	e0 91 68 01 	lds	r30, 0x0168
    11bc:	f0 91 69 01 	lds	r31, 0x0169
    11c0:	02 84       	ldd	r0, Z+10	; 0x0a
    11c2:	f3 85       	ldd	r31, Z+11	; 0x0b
    11c4:	e0 2d       	mov	r30, r0
    11c6:	09 95       	icall
	}
}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	7f 91       	pop	r23
    11da:	6f 91       	pop	r22
    11dc:	5f 91       	pop	r21
    11de:	4f 91       	pop	r20
    11e0:	3f 91       	pop	r19
    11e2:	2f 91       	pop	r18
    11e4:	0f 90       	pop	r0
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	0f 90       	pop	r0
    11ea:	1f 90       	pop	r1
    11ec:	18 95       	reti

000011ee <Set_CallBack_TIMER_2_OVF_INT>:
 */



void Set_CallBack_TIMER_2_OVF_INT(void (*ptr)(void))
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <Set_CallBack_TIMER_2_OVF_INT+0x6>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	41 f0       	breq	.+16     	; 0x1214 <Set_CallBack_TIMER_2_OVF_INT+0x26>
	{
		TIMER_ISR->TIMER_2_OVF_INT = ptr;
    1204:	e0 91 68 01 	lds	r30, 0x0168
    1208:	f0 91 69 01 	lds	r31, 0x0169
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	95 87       	std	Z+13, r25	; 0x0d
    1212:	84 87       	std	Z+12, r24	; 0x0c
	}
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <__vector_5>:
void __vector_5 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_5 (void)
{
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
    1228:	2f 93       	push	r18
    122a:	3f 93       	push	r19
    122c:	4f 93       	push	r20
    122e:	5f 93       	push	r21
    1230:	6f 93       	push	r22
    1232:	7f 93       	push	r23
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	af 93       	push	r26
    123a:	bf 93       	push	r27
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_2_OVF_INT != NULL)
    1248:	e0 91 68 01 	lds	r30, 0x0168
    124c:	f0 91 69 01 	lds	r31, 0x0169
    1250:	84 85       	ldd	r24, Z+12	; 0x0c
    1252:	95 85       	ldd	r25, Z+13	; 0x0d
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	41 f0       	breq	.+16     	; 0x1268 <__vector_5+0x4a>
	{
		TIMER_ISR->TIMER_2_OVF_INT();
    1258:	e0 91 68 01 	lds	r30, 0x0168
    125c:	f0 91 69 01 	lds	r31, 0x0169
    1260:	04 84       	ldd	r0, Z+12	; 0x0c
    1262:	f5 85       	ldd	r31, Z+13	; 0x0d
    1264:	e0 2d       	mov	r30, r0
    1266:	09 95       	icall
	}
}
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	ff 91       	pop	r31
    126e:	ef 91       	pop	r30
    1270:	bf 91       	pop	r27
    1272:	af 91       	pop	r26
    1274:	9f 91       	pop	r25
    1276:	8f 91       	pop	r24
    1278:	7f 91       	pop	r23
    127a:	6f 91       	pop	r22
    127c:	5f 91       	pop	r21
    127e:	4f 91       	pop	r20
    1280:	3f 91       	pop	r19
    1282:	2f 91       	pop	r18
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <Set_CallBack_TIMER_2_OC_INT>:


void Set_CallBack_TIMER_2_OC_INT(void (*ptr)(void))
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <Set_CallBack_TIMER_2_OC_INT+0x6>
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	41 f0       	breq	.+16     	; 0x12b4 <Set_CallBack_TIMER_2_OC_INT+0x26>
	{
		TIMER_ISR->TIMER_2_OC_INT = ptr;
    12a4:	e0 91 68 01 	lds	r30, 0x0168
    12a8:	f0 91 69 01 	lds	r31, 0x0169
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	9a 81       	ldd	r25, Y+2	; 0x02
    12b0:	97 87       	std	Z+15, r25	; 0x0f
    12b2:	86 87       	std	Z+14, r24	; 0x0e
	}
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <__vector_4>:
void __vector_4 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_4 (void)
{
    12be:	1f 92       	push	r1
    12c0:	0f 92       	push	r0
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	0f 92       	push	r0
    12c6:	11 24       	eor	r1, r1
    12c8:	2f 93       	push	r18
    12ca:	3f 93       	push	r19
    12cc:	4f 93       	push	r20
    12ce:	5f 93       	push	r21
    12d0:	6f 93       	push	r22
    12d2:	7f 93       	push	r23
    12d4:	8f 93       	push	r24
    12d6:	9f 93       	push	r25
    12d8:	af 93       	push	r26
    12da:	bf 93       	push	r27
    12dc:	ef 93       	push	r30
    12de:	ff 93       	push	r31
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_2_OC_INT != NULL)
    12e8:	e0 91 68 01 	lds	r30, 0x0168
    12ec:	f0 91 69 01 	lds	r31, 0x0169
    12f0:	86 85       	ldd	r24, Z+14	; 0x0e
    12f2:	97 85       	ldd	r25, Z+15	; 0x0f
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	41 f0       	breq	.+16     	; 0x1308 <__vector_4+0x4a>
	{
		TIMER_ISR->TIMER_2_OC_INT();
    12f8:	e0 91 68 01 	lds	r30, 0x0168
    12fc:	f0 91 69 01 	lds	r31, 0x0169
    1300:	06 84       	ldd	r0, Z+14	; 0x0e
    1302:	f7 85       	ldd	r31, Z+15	; 0x0f
    1304:	e0 2d       	mov	r30, r0
    1306:	09 95       	icall
	}
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	ff 91       	pop	r31
    130e:	ef 91       	pop	r30
    1310:	bf 91       	pop	r27
    1312:	af 91       	pop	r26
    1314:	9f 91       	pop	r25
    1316:	8f 91       	pop	r24
    1318:	7f 91       	pop	r23
    131a:	6f 91       	pop	r22
    131c:	5f 91       	pop	r21
    131e:	4f 91       	pop	r20
    1320:	3f 91       	pop	r19
    1322:	2f 91       	pop	r18
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	1f 90       	pop	r1
    132c:	18 95       	reti

0000132e <Timer_init>:
 */



void Timer_init(timer_config_type *timer_config_ptr)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <Timer_init+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <Timer_init+0x8>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	9a 83       	std	Y+2, r25	; 0x02
    133c:	89 83       	std	Y+1, r24	; 0x01
	Timer_DeInit(timer_config_ptr->timer);/*deinitialize the desired timer */
    133e:	e9 81       	ldd	r30, Y+1	; 0x01
    1340:	fa 81       	ldd	r31, Y+2	; 0x02
    1342:	81 85       	ldd	r24, Z+9	; 0x09
    1344:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Timer_DeInit>
	switch(timer_config_ptr->timer)
    1348:	e9 81       	ldd	r30, Y+1	; 0x01
    134a:	fa 81       	ldd	r31, Y+2	; 0x02
    134c:	81 85       	ldd	r24, Z+9	; 0x09
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	3c 83       	std	Y+4, r19	; 0x04
    1354:	2b 83       	std	Y+3, r18	; 0x03
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	91 05       	cpc	r25, r1
    135e:	09 f4       	brne	.+2      	; 0x1362 <Timer_init+0x34>
    1360:	4e c0       	rjmp	.+156    	; 0x13fe <Timer_init+0xd0>
    1362:	2b 81       	ldd	r18, Y+3	; 0x03
    1364:	3c 81       	ldd	r19, Y+4	; 0x04
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	09 f4       	brne	.+2      	; 0x136e <Timer_init+0x40>
    136c:	b1 c0       	rjmp	.+354    	; 0x14d0 <Timer_init+0x1a2>
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	09 f0       	breq	.+2      	; 0x1378 <Timer_init+0x4a>
    1376:	ee c0       	rjmp	.+476    	; 0x1554 <Timer_init+0x226>
		 * FOC0= 0 ; because non_pwm mode
		 * select a prescaler
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * */
		TCNT0_REG = timer_config_ptr->initial_value; /*Set Timer0 initial value to 0*/
    1378:	a2 e5       	ldi	r26, 0x52	; 82
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e9 81       	ldd	r30, Y+1	; 0x01
    137e:	fa 81       	ldd	r31, Y+2	; 0x02
    1380:	84 81       	ldd	r24, Z+4	; 0x04
    1382:	95 81       	ldd	r25, Z+5	; 0x05
    1384:	8c 93       	st	X, r24
		SET_BIT(TCC0_REG,7)   ; /* non-pwm mode*/
    1386:	a3 e5       	ldi	r26, 0x53	; 83
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e3 e5       	ldi	r30, 0x53	; 83
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	80 68       	ori	r24, 0x80	; 128
    1392:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	fa 81       	ldd	r31, Y+2	; 0x02
    1398:	80 85       	ldd	r24, Z+8	; 0x08
    139a:	88 23       	and	r24, r24
    139c:	41 f4       	brne	.+16     	; 0x13ae <Timer_init+0x80>
		{
			SET_BIT(TIMSK_REG,0)    ;/* Enable Timer0 over flow Interrupt*/
    139e:	a9 e5       	ldi	r26, 0x59	; 89
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e9 e5       	ldi	r30, 0x59	; 89
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	81 60       	ori	r24, 0x01	; 1
    13aa:	8c 93       	st	X, r24
    13ac:	1a c0       	rjmp	.+52     	; 0x13e2 <Timer_init+0xb4>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    13ae:	e9 81       	ldd	r30, Y+1	; 0x01
    13b0:	fa 81       	ldd	r31, Y+2	; 0x02
    13b2:	80 85       	ldd	r24, Z+8	; 0x08
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	a9 f4       	brne	.+42     	; 0x13e2 <Timer_init+0xb4>
		{
			OCR0_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
    13b8:	ac e5       	ldi	r26, 0x5C	; 92
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
    13c4:	8c 93       	st	X, r24
			SET_BIT(TCC0_REG,3)    ; /* CTC mode */
    13c6:	a3 e5       	ldi	r26, 0x53	; 83
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e3 e5       	ldi	r30, 0x53	; 83
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	88 60       	ori	r24, 0x08	; 8
    13d2:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,1)    ; /* Enable CTC mode interrupt */
    13d4:	a9 e5       	ldi	r26, 0x59	; 89
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e9 e5       	ldi	r30, 0x59	; 89
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	82 60       	ori	r24, 0x02	; 2
    13e0:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC0_REG=(TCC0_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111 );
    13e2:	a3 e5       	ldi	r26, 0x53	; 83
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e3 e5       	ldi	r30, 0x53	; 83
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	98 2f       	mov	r25, r24
    13ee:	98 7f       	andi	r25, 0xF8	; 248
    13f0:	e9 81       	ldd	r30, Y+1	; 0x01
    13f2:	fa 81       	ldd	r31, Y+2	; 0x02
    13f4:	86 81       	ldd	r24, Z+6	; 0x06
    13f6:	87 70       	andi	r24, 0x07	; 7
    13f8:	89 2b       	or	r24, r25
    13fa:	8c 93       	st	X, r24
    13fc:	ab c0       	rjmp	.+342    	; 0x1554 <Timer_init+0x226>
		break;
	case TIMER_1:
		TCNT1_REG = timer_config_ptr->initial_value;/*set timer1 initial value */
    13fe:	ac e4       	ldi	r26, 0x4C	; 76
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e9 81       	ldd	r30, Y+1	; 0x01
    1404:	fa 81       	ldd	r31, Y+2	; 0x02
    1406:	84 81       	ldd	r24, Z+4	; 0x04
    1408:	95 81       	ldd	r25, Z+5	; 0x05
    140a:	11 96       	adiw	r26, 0x01	; 1
    140c:	9c 93       	st	X, r25
    140e:	8e 93       	st	-X, r24
		SET_BIT(TCC1A_REG,3)   ;/*non-pwm mode */
    1410:	af e4       	ldi	r26, 0x4F	; 79
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ef e4       	ldi	r30, 0x4F	; 79
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	88 60       	ori	r24, 0x08	; 8
    141c:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    141e:	e9 81       	ldd	r30, Y+1	; 0x01
    1420:	fa 81       	ldd	r31, Y+2	; 0x02
    1422:	80 85       	ldd	r24, Z+8	; 0x08
    1424:	88 23       	and	r24, r24
    1426:	41 f4       	brne	.+16     	; 0x1438 <Timer_init+0x10a>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM12)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
			 */
			/**************************************************************************/
			SET_BIT(TIMSK_REG,2)    ;/*Enable Timer1 over flow Interrupt*/
    1428:	a9 e5       	ldi	r26, 0x59	; 89
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e9 e5       	ldi	r30, 0x59	; 89
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	84 60       	ori	r24, 0x04	; 4
    1434:	8c 93       	st	X, r24
    1436:	3e c0       	rjmp	.+124    	; 0x14b4 <Timer_init+0x186>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    1438:	e9 81       	ldd	r30, Y+1	; 0x01
    143a:	fa 81       	ldd	r31, Y+2	; 0x02
    143c:	80 85       	ldd	r24, Z+8	; 0x08
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	c9 f5       	brne	.+114    	; 0x14b4 <Timer_init+0x186>
		{
			if(timer_config_ptr->channels_number == CHANNEL_1A)
    1442:	e9 81       	ldd	r30, Y+1	; 0x01
    1444:	fa 81       	ldd	r31, Y+2	; 0x02
    1446:	82 85       	ldd	r24, Z+10	; 0x0a
    1448:	88 23       	and	r24, r24
    144a:	c1 f4       	brne	.+48     	; 0x147c <Timer_init+0x14e>
			{
				OCR1A_REG = timer_config_ptr->compared_value; /*Set timer1 Compare Value*/
    144c:	aa e4       	ldi	r26, 0x4A	; 74
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e9 81       	ldd	r30, Y+1	; 0x01
    1452:	fa 81       	ldd	r31, Y+2	; 0x02
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	11 96       	adiw	r26, 0x01	; 1
    145a:	9c 93       	st	X, r25
    145c:	8e 93       	st	-X, r24
				SET_BIT(TCC1B_REG,3)    ;/* enable CTC  mode*/
    145e:	ae e4       	ldi	r26, 0x4E	; 78
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	ee e4       	ldi	r30, 0x4E	; 78
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	88 60       	ori	r24, 0x08	; 8
    146a:	8c 93       	st	X, r24
				SET_BIT(TIMSK_REG,4)    ; /* enable CTC channel A Interrupt*/
    146c:	a9 e5       	ldi	r26, 0x59	; 89
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e9 e5       	ldi	r30, 0x59	; 89
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 61       	ori	r24, 0x10	; 16
    1478:	8c 93       	st	X, r24
    147a:	1c c0       	rjmp	.+56     	; 0x14b4 <Timer_init+0x186>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
				 */
				/**************************************************************************/
			}
			else if (timer_config_ptr->channels_number==CHANNEL_1B)
    147c:	e9 81       	ldd	r30, Y+1	; 0x01
    147e:	fa 81       	ldd	r31, Y+2	; 0x02
    1480:	82 85       	ldd	r24, Z+10	; 0x0a
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	b9 f4       	brne	.+46     	; 0x14b4 <Timer_init+0x186>
			{
				SET_BIT(TCC1A_REG,2)   ;/*non-pwm mode channel B*/
    1486:	af e4       	ldi	r26, 0x4F	; 79
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	ef e4       	ldi	r30, 0x4F	; 79
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	84 60       	ori	r24, 0x04	; 4
    1492:	8c 93       	st	X, r24
				OCR1B_REG = timer_config_ptr->compared_value_B_channel; /*Set timer1 Compare Value*/
    1494:	a8 e4       	ldi	r26, 0x48	; 72
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e9 81       	ldd	r30, Y+1	; 0x01
    149a:	fa 81       	ldd	r31, Y+2	; 0x02
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	11 96       	adiw	r26, 0x01	; 1
    14a2:	9c 93       	st	X, r25
    14a4:	8e 93       	st	-X, r24
				SET_BIT(TIMSK_REG,3);/* enable CTC channel B Interrupt*/
    14a6:	a9 e5       	ldi	r26, 0x59	; 89
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e9 e5       	ldi	r30, 0x59	; 89
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	88 60       	ori	r24, 0x08	; 8
    14b2:	8c 93       	st	X, r24
			}
		}

		TCC1B_REG=(TCC1B_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111);/*select the prescaler */
    14b4:	ae e4       	ldi	r26, 0x4E	; 78
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	ee e4       	ldi	r30, 0x4E	; 78
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	98 2f       	mov	r25, r24
    14c0:	98 7f       	andi	r25, 0xF8	; 248
    14c2:	e9 81       	ldd	r30, Y+1	; 0x01
    14c4:	fa 81       	ldd	r31, Y+2	; 0x02
    14c6:	86 81       	ldd	r24, Z+6	; 0x06
    14c8:	87 70       	andi	r24, 0x07	; 7
    14ca:	89 2b       	or	r24, r25
    14cc:	8c 93       	st	X, r24
    14ce:	42 c0       	rjmp	.+132    	; 0x1554 <Timer_init+0x226>
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * and disable Timer0 compare Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * and disable Timer0 normal Interrupt ad select the state of OSR0 pin
		 * */
		TCNT2_REG = timer_config_ptr->initial_value; /*Set Timer2 initial value */
    14d0:	a4 e4       	ldi	r26, 0x44	; 68
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e9 81       	ldd	r30, Y+1	; 0x01
    14d6:	fa 81       	ldd	r31, Y+2	; 0x02
    14d8:	84 81       	ldd	r24, Z+4	; 0x04
    14da:	95 81       	ldd	r25, Z+5	; 0x05
    14dc:	8c 93       	st	X, r24
		SET_BIT(TCC2_REG,7); /* non-pwm mode*/
    14de:	a5 e4       	ldi	r26, 0x45	; 69
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e4       	ldi	r30, 0x45	; 69
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 68       	ori	r24, 0x80	; 128
    14ea:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    14ec:	e9 81       	ldd	r30, Y+1	; 0x01
    14ee:	fa 81       	ldd	r31, Y+2	; 0x02
    14f0:	80 85       	ldd	r24, Z+8	; 0x08
    14f2:	88 23       	and	r24, r24
    14f4:	41 f4       	brne	.+16     	; 0x1506 <Timer_init+0x1d8>
			/*Normal mode*/
			/*
			CLEAR_BIT(TCCR2,WGM21)  ;
			CLEAR_BIT(TCCR2,WGM20)  ;
			 */
			SET_BIT(TIMSK_REG,6)    ;/* Enable Timer0 over flow Interrupt*/
    14f6:	a9 e5       	ldi	r26, 0x59	; 89
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e9 e5       	ldi	r30, 0x59	; 89
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	80 64       	ori	r24, 0x40	; 64
    1502:	8c 93       	st	X, r24
    1504:	1a c0       	rjmp	.+52     	; 0x153a <Timer_init+0x20c>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    1506:	e9 81       	ldd	r30, Y+1	; 0x01
    1508:	fa 81       	ldd	r31, Y+2	; 0x02
    150a:	80 85       	ldd	r24, Z+8	; 0x08
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	a9 f4       	brne	.+42     	; 0x153a <Timer_init+0x20c>
		{
			OCR2_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
    1510:	a3 e4       	ldi	r26, 0x43	; 67
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e9 81       	ldd	r30, Y+1	; 0x01
    1516:	fa 81       	ldd	r31, Y+2	; 0x02
    1518:	80 81       	ld	r24, Z
    151a:	91 81       	ldd	r25, Z+1	; 0x01
    151c:	8c 93       	st	X, r24
			SET_BIT(TCC2_REG,3)    ; /* CTC mode */
    151e:	a5 e4       	ldi	r26, 0x45	; 69
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e5 e4       	ldi	r30, 0x45	; 69
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	88 60       	ori	r24, 0x08	; 8
    152a:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,7)    ; /* enable CTC Interrupt*/
    152c:	a9 e5       	ldi	r26, 0x59	; 89
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e9 e5       	ldi	r30, 0x59	; 89
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	80 68       	ori	r24, 0x80	; 128
    1538:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC2_REG=(TCC2_REG &0b11111000)|(timer_config_ptr->T2_used_freq & 0b00000111 );
    153a:	a5 e4       	ldi	r26, 0x45	; 69
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e5 e4       	ldi	r30, 0x45	; 69
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	98 2f       	mov	r25, r24
    1546:	98 7f       	andi	r25, 0xF8	; 248
    1548:	e9 81       	ldd	r30, Y+1	; 0x01
    154a:	fa 81       	ldd	r31, Y+2	; 0x02
    154c:	87 81       	ldd	r24, Z+7	; 0x07
    154e:	87 70       	andi	r24, 0x07	; 7
    1550:	89 2b       	or	r24, r25
    1552:	8c 93       	st	X, r24
		break;
	case ALL:
		break;
	}
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <change_compared_and_duty_value>:
 * it assign the compared value or duty cycle value for
 * every desired timer
 * */

void change_compared_and_duty_value(timer_config_type * config_ptr)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <change_compared_and_duty_value+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <change_compared_and_duty_value+0x8>
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
	switch(config_ptr->timer)
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	81 85       	ldd	r24, Z+9	; 0x09
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	3c 83       	std	Y+4, r19	; 0x04
    157e:	2b 83       	std	Y+3, r18	; 0x03
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	89 f0       	breq	.+34     	; 0x15ac <change_compared_and_duty_value+0x4a>
    158a:	2b 81       	ldd	r18, Y+3	; 0x03
    158c:	3c 81       	ldd	r19, Y+4	; 0x04
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	29 f1       	breq	.+74     	; 0x15de <change_compared_and_duty_value+0x7c>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	41 f5       	brne	.+80     	; 0x15ec <change_compared_and_duty_value+0x8a>
	{
	case TIMER_0:
		OCR0_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
    159c:	ac e5       	ldi	r26, 0x5C	; 92
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e9 81       	ldd	r30, Y+1	; 0x01
    15a2:	fa 81       	ldd	r31, Y+2	; 0x02
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	8c 93       	st	X, r24
    15aa:	20 c0       	rjmp	.+64     	; 0x15ec <change_compared_and_duty_value+0x8a>
		break ;
	case TIMER_1:
		OCR1A_REG = config_ptr->compared_value; /*Set timer1 Compare Value*/
    15ac:	aa e4       	ldi	r26, 0x4A	; 74
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e9 81       	ldd	r30, Y+1	; 0x01
    15b2:	fa 81       	ldd	r31, Y+2	; 0x02
    15b4:	80 81       	ld	r24, Z
    15b6:	91 81       	ldd	r25, Z+1	; 0x01
    15b8:	11 96       	adiw	r26, 0x01	; 1
    15ba:	9c 93       	st	X, r25
    15bc:	8e 93       	st	-X, r24
		if (config_ptr->channels_number==CHANNEL_1B)
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	82 85       	ldd	r24, Z+10	; 0x0a
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 f4       	brne	.+36     	; 0x15ec <change_compared_and_duty_value+0x8a>
		{
			OCR1B_REG = config_ptr->compared_value_B_channel; /*Set timer1 B Compare Value*/
    15c8:	e8 e4       	ldi	r30, 0x48	; 72
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	a9 81       	ldd	r26, Y+1	; 0x01
    15ce:	ba 81       	ldd	r27, Y+2	; 0x02
    15d0:	12 96       	adiw	r26, 0x02	; 2
    15d2:	8d 91       	ld	r24, X+
    15d4:	9c 91       	ld	r25, X
    15d6:	13 97       	sbiw	r26, 0x03	; 3
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	80 83       	st	Z, r24
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <change_compared_and_duty_value+0x8a>
		}
		break ;
	case TIMER_2:
		OCR2_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
    15de:	a3 e4       	ldi	r26, 0x43	; 67
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e9 81       	ldd	r30, Y+1	; 0x01
    15e4:	fa 81       	ldd	r31, Y+2	; 0x02
    15e6:	80 81       	ld	r24, Z
    15e8:	91 81       	ldd	r25, Z+1	; 0x01
    15ea:	8c 93       	st	X, r24
		break ;
	}
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <Timer_DeInit>:

/*Description
 * this function is responsible for reset all timer registers
 * */
void Timer_DeInit(TIMER_e timer)
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <Timer_DeInit+0x6>
    1600:	0f 92       	push	r0
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3b 83       	std	Y+3, r19	; 0x03
    1610:	2a 83       	std	Y+2, r18	; 0x02
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	9b 81       	ldd	r25, Y+3	; 0x03
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	19 f1       	breq	.+70     	; 0x1662 <Timer_DeInit+0x68>
    161c:	2a 81       	ldd	r18, Y+2	; 0x02
    161e:	3b 81       	ldd	r19, Y+3	; 0x03
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	2c f4       	brge	.+10     	; 0x1630 <Timer_DeInit+0x36>
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	9b 81       	ldd	r25, Y+3	; 0x03
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	61 f0       	breq	.+24     	; 0x1646 <Timer_DeInit+0x4c>
    162e:	56 c0       	rjmp	.+172    	; 0x16dc <Timer_DeInit+0xe2>
    1630:	2a 81       	ldd	r18, Y+2	; 0x02
    1632:	3b 81       	ldd	r19, Y+3	; 0x03
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	31 f1       	breq	.+76     	; 0x1686 <Timer_DeInit+0x8c>
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	9b 81       	ldd	r25, Y+3	; 0x03
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	79 f1       	breq	.+94     	; 0x16a2 <Timer_DeInit+0xa8>
    1644:	4b c0       	rjmp	.+150    	; 0x16dc <Timer_DeInit+0xe2>
	{
	case TIMER_0:
		TCC0_REG= 0; /* clear control register*/
    1646:	e3 e5       	ldi	r30, 0x53	; 83
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer 0*/
    164c:	e2 e5       	ldi	r30, 0x52	; 82
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11111100);/*Disable module interrupt interrupt*/
    1652:	a9 e5       	ldi	r26, 0x59	; 89
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e9 e5       	ldi	r30, 0x59	; 89
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8c 7f       	andi	r24, 0xFC	; 252
    165e:	8c 93       	st	X, r24
    1660:	3d c0       	rjmp	.+122    	; 0x16dc <Timer_DeInit+0xe2>
		break;
	case TIMER_1:
		TCC1A_REG=0; /* clear control register*/
    1662:	ef e4       	ldi	r30, 0x4F	; 79
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	10 82       	st	Z, r1
		TCC1B_REG=0 ;
    1668:	ee e4       	ldi	r30, 0x4E	; 78
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer 0*/
    166e:	ec e4       	ldi	r30, 0x4C	; 76
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	11 82       	std	Z+1, r1	; 0x01
    1674:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11100011);/*Disable module interrupt interrupt*/
    1676:	a9 e5       	ldi	r26, 0x59	; 89
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e9 e5       	ldi	r30, 0x59	; 89
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	83 7e       	andi	r24, 0xE3	; 227
    1682:	8c 93       	st	X, r24
    1684:	2b c0       	rjmp	.+86     	; 0x16dc <Timer_DeInit+0xe2>
		break;
	case TIMER_2:
		TCC2_REG= 0; /* clear control register*/
    1686:	e5 e4       	ldi	r30, 0x45	; 69
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer 0*/
    168c:	e4 e4       	ldi	r30, 0x44	; 68
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b00111111);/*Disable module interrupt interrupt*/
    1692:	a9 e5       	ldi	r26, 0x59	; 89
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e9 e5       	ldi	r30, 0x59	; 89
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	8f 73       	andi	r24, 0x3F	; 63
    169e:	8c 93       	st	X, r24
    16a0:	1d c0       	rjmp	.+58     	; 0x16dc <Timer_DeInit+0xe2>
		break;
	case ALL:
		TIMSK_REG=(TIMSK_REG &0b00100000);/*Disable all timers modules interrupt interrupt*/
    16a2:	a9 e5       	ldi	r26, 0x59	; 89
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e9 e5       	ldi	r30, 0x59	; 89
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	80 72       	andi	r24, 0x20	; 32
    16ae:	8c 93       	st	X, r24
		/*===============Deinitialize Timer0=============================*/
		TCC0_REG= 0; /* clear control register*/
    16b0:	e3 e5       	ldi	r30, 0x53	; 83
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer */
    16b6:	e2 e5       	ldi	r30, 0x52	; 82
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	10 82       	st	Z, r1
		/*===============Deinitialize Timer1=============================*/
		TCC1A_REG= 0; /* clear A control register*/
    16bc:	ef e4       	ldi	r30, 0x4F	; 79
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	10 82       	st	Z, r1
		TCC1B_REG= 0;/* clear B control register*/
    16c2:	ee e4       	ldi	r30, 0x4E	; 78
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer */
    16c8:	ec e4       	ldi	r30, 0x4C	; 76
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	11 82       	std	Z+1, r1	; 0x01
    16ce:	10 82       	st	Z, r1
		/*===============Deinitialize Timer2=============================*/
		TCC2_REG= 0; /* clear control register*/
    16d0:	e5 e4       	ldi	r30, 0x45	; 69
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer */
    16d6:	e4 e4       	ldi	r30, 0x44	; 68
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	10 82       	st	Z, r1
		break;
	}
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <clear_timer>:
 * this func used to reset the timer to start count again from the beginning
 * we chose the timer to be cleared
 * */

void clear_timer(TIMER_e timer)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <clear_timer+0x6>
    16ee:	0f 92       	push	r0
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	3b 83       	std	Y+3, r19	; 0x03
    16fe:	2a 83       	std	Y+2, r18	; 0x02
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	9b 81       	ldd	r25, Y+3	; 0x03
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	91 05       	cpc	r25, r1
    1708:	c9 f0       	breq	.+50     	; 0x173c <clear_timer+0x54>
    170a:	2a 81       	ldd	r18, Y+2	; 0x02
    170c:	3b 81       	ldd	r19, Y+3	; 0x03
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	2c f4       	brge	.+10     	; 0x171e <clear_timer+0x36>
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	9b 81       	ldd	r25, Y+3	; 0x03
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	61 f0       	breq	.+24     	; 0x1734 <clear_timer+0x4c>
    171c:	22 c0       	rjmp	.+68     	; 0x1762 <clear_timer+0x7a>
    171e:	2a 81       	ldd	r18, Y+2	; 0x02
    1720:	3b 81       	ldd	r19, Y+3	; 0x03
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	79 f0       	breq	.+30     	; 0x1746 <clear_timer+0x5e>
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	83 30       	cpi	r24, 0x03	; 3
    172e:	91 05       	cpc	r25, r1
    1730:	71 f0       	breq	.+28     	; 0x174e <clear_timer+0x66>
    1732:	17 c0       	rjmp	.+46     	; 0x1762 <clear_timer+0x7a>
	{
	case TIMER_0:
		TCNT0_REG = 0; /* Set Timer0 initial value to 0*/
    1734:	e2 e5       	ldi	r30, 0x52	; 82
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	10 82       	st	Z, r1
    173a:	13 c0       	rjmp	.+38     	; 0x1762 <clear_timer+0x7a>
		break;
	case TIMER_1:
		TCNT1_REG = 0; /* Set Timer1 initial value to 0*/
    173c:	ec e4       	ldi	r30, 0x4C	; 76
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	11 82       	std	Z+1, r1	; 0x01
    1742:	10 82       	st	Z, r1
    1744:	0e c0       	rjmp	.+28     	; 0x1762 <clear_timer+0x7a>
		break;
	case TIMER_2:
		TCNT2_REG = 0; /* Set Timer2 initial value to 0*/
    1746:	e4 e4       	ldi	r30, 0x44	; 68
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	10 82       	st	Z, r1
    174c:	0a c0       	rjmp	.+20     	; 0x1762 <clear_timer+0x7a>
		break;
	case ALL:
		TCNT0_REG = 0;  /* Set Timer0 initial value to 0*/
    174e:	e2 e5       	ldi	r30, 0x52	; 82
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	10 82       	st	Z, r1
		TCNT1_REG = 0;  /* Set Timer1 initial value to 0*/
    1754:	ec e4       	ldi	r30, 0x4C	; 76
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	11 82       	std	Z+1, r1	; 0x01
    175a:	10 82       	st	Z, r1
		TCNT2_REG = 0;  /* Set Timer2 initial value to 0*/
    175c:	e4 e4       	ldi	r30, 0x44	; 68
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	10 82       	st	Z, r1
		break;
	default:
		break  ;
	}
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <PWM_timers_init>:
 * this function is responsible for pwm init for the desired timer
 * it take a ptr to struct
 *
 * */
void PWM_timers_init(PWM_timers_config *timer_config)
{
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	00 d0       	rcall	.+0      	; 0x1778 <PWM_timers_init+0xa>
    1778:	00 d0       	rcall	.+0      	; 0x177a <PWM_timers_init+0xc>
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01

	switch (timer_config->timer)
    1782:	e9 81       	ldd	r30, Y+1	; 0x01
    1784:	fa 81       	ldd	r31, Y+2	; 0x02
    1786:	81 85       	ldd	r24, Z+9	; 0x09
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3c 83       	std	Y+4, r19	; 0x04
    178e:	2b 83       	std	Y+3, r18	; 0x03
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	91 05       	cpc	r25, r1
    1798:	09 f4       	brne	.+2      	; 0x179c <PWM_timers_init+0x2e>
    179a:	43 c0       	rjmp	.+134    	; 0x1822 <PWM_timers_init+0xb4>
    179c:	eb 81       	ldd	r30, Y+3	; 0x03
    179e:	fc 81       	ldd	r31, Y+4	; 0x04
    17a0:	e2 30       	cpi	r30, 0x02	; 2
    17a2:	f1 05       	cpc	r31, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <PWM_timers_init+0x3a>
    17a6:	0f c1       	rjmp	.+542    	; 0x19c6 <PWM_timers_init+0x258>
    17a8:	2b 81       	ldd	r18, Y+3	; 0x03
    17aa:	3c 81       	ldd	r19, Y+4	; 0x04
    17ac:	21 15       	cp	r18, r1
    17ae:	31 05       	cpc	r19, r1
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <PWM_timers_init+0x46>
    17b2:	46 c1       	rjmp	.+652    	; 0x1a40 <PWM_timers_init+0x2d2>
	{

	case TIMER_0:
		clear_timer(TIMER_0); /* Set Timer Initial Value to 0*/
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <clear_timer>
		OCR0_REG  = timer_config->set_duty_cycle ; /* Set Compare Value*/
    17ba:	ac e5       	ldi	r26, 0x5C	; 92
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e9 81       	ldd	r30, Y+1	; 0x01
    17c0:	fa 81       	ldd	r31, Y+2	; 0x02
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	8c 93       	st	X, r24
		/*Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_B, PIN_3, OUTPUT);
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	63 e0       	ldi	r22, 0x03	; 3
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC0_REG,7);
    17d2:	a3 e5       	ldi	r26, 0x53	; 83
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e3 e5       	ldi	r30, 0x53	; 83
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8f 77       	andi	r24, 0x7F	; 127
    17de:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    17e0:	e9 81       	ldd	r30, Y+1	; 0x01
    17e2:	fa 81       	ldd	r31, Y+2	; 0x02
    17e4:	80 85       	ldd	r24, Z+8	; 0x08
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	29 f4       	brne	.+10     	; 0x17f4 <PWM_timers_init+0x86>
		{
			TCC0_REG = (1<<3) | (1<<5) | (1<<6);
    17ea:	e3 e5       	ldi	r30, 0x53	; 83
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	88 e6       	ldi	r24, 0x68	; 104
    17f0:	80 83       	st	Z, r24
    17f2:	09 c0       	rjmp	.+18     	; 0x1806 <PWM_timers_init+0x98>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    17f4:	e9 81       	ldd	r30, Y+1	; 0x01
    17f6:	fa 81       	ldd	r31, Y+2	; 0x02
    17f8:	80 85       	ldd	r24, Z+8	; 0x08
    17fa:	83 30       	cpi	r24, 0x03	; 3
    17fc:	21 f4       	brne	.+8      	; 0x1806 <PWM_timers_init+0x98>
		{
			TCC0_REG = (0<<3) | (1<<5) | (1<<6);
    17fe:	e3 e5       	ldi	r30, 0x53	; 83
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 e6       	ldi	r24, 0x60	; 96
    1804:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC0_REG=(TCC0_REG & 0b11111000)|(timer_config->T0_T1_used_freq & 0b00000111 );
    1806:	a3 e5       	ldi	r26, 0x53	; 83
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e3 e5       	ldi	r30, 0x53	; 83
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	98 2f       	mov	r25, r24
    1812:	98 7f       	andi	r25, 0xF8	; 248
    1814:	e9 81       	ldd	r30, Y+1	; 0x01
    1816:	fa 81       	ldd	r31, Y+2	; 0x02
    1818:	86 81       	ldd	r24, Z+6	; 0x06
    181a:	87 70       	andi	r24, 0x07	; 7
    181c:	89 2b       	or	r24, r25
    181e:	8c 93       	st	X, r24
    1820:	0f c1       	rjmp	.+542    	; 0x1a40 <PWM_timers_init+0x2d2>
		break;
	case TIMER_1:
		clear_timer(TIMER_1); /* Set Timer Initial Value to 0*/
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <clear_timer>
		ICR1_REG   = timer_config->timer1_TOP_value; /* Set TOP Value*/
    1828:	a6 e4       	ldi	r26, 0x46	; 70
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e9 81       	ldd	r30, Y+1	; 0x01
    182e:	fa 81       	ldd	r31, Y+2	; 0x02
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	11 96       	adiw	r26, 0x01	; 1
    1836:	9c 93       	st	X, r25
    1838:	8e 93       	st	-X, r24
		OCR1A_REG  = timer_config->set_duty_cycle; /* Set Compare Value*/
    183a:	aa e4       	ldi	r26, 0x4A	; 74
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e9 81       	ldd	r30, Y+1	; 0x01
    1840:	fa 81       	ldd	r31, Y+2	; 0x02
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	11 96       	adiw	r26, 0x01	; 1
    1848:	9c 93       	st	X, r25
    184a:	8e 93       	st	-X, r24
		/*Configure PD5/OC1A and PD4/OC1B as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_D, PIN_5, OUTPUT);/*OC1A->output*/
    184c:	83 e0       	ldi	r24, 0x03	; 3
    184e:	65 e0       	ldi	r22, 0x05	; 5
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode mode 14
		 * 3. Clear OC1A when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 */

		CLR_BIT(TCC1A_REG,3);
    1856:	af e4       	ldi	r26, 0x4F	; 79
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	ef e4       	ldi	r30, 0x4F	; 79
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	87 7f       	andi	r24, 0xF7	; 247
    1862:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    1864:	e9 81       	ldd	r30, Y+1	; 0x01
    1866:	fa 81       	ldd	r31, Y+2	; 0x02
    1868:	80 85       	ldd	r24, Z+8	; 0x08
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	09 f0       	breq	.+2      	; 0x1870 <PWM_timers_init+0x102>
    186e:	5b c0       	rjmp	.+182    	; 0x1926 <PWM_timers_init+0x1b8>
		{

			SET_BIT(TCC1B_REG,4);SET_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
    1870:	ae e4       	ldi	r26, 0x4E	; 78
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ee e4       	ldi	r30, 0x4E	; 78
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 61       	ori	r24, 0x10	; 16
    187c:	8c 93       	st	X, r24
    187e:	ae e4       	ldi	r26, 0x4E	; 78
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ee e4       	ldi	r30, 0x4E	; 78
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	88 60       	ori	r24, 0x08	; 8
    188a:	8c 93       	st	X, r24
    188c:	af e4       	ldi	r26, 0x4F	; 79
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ef e4       	ldi	r30, 0x4F	; 79
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	82 60       	ori	r24, 0x02	; 2
    1898:	8c 93       	st	X, r24
    189a:	af e4       	ldi	r26, 0x4F	; 79
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ef e4       	ldi	r30, 0x4F	; 79
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8e 7f       	andi	r24, 0xFE	; 254
    18a6:	8c 93       	st	X, r24
			SET_BIT(TCC1A_REG,7);SET_BIT(TCC1A_REG,5);CLR_BIT(TCC1A_REG,6);CLR_BIT(TCC1A_REG,4);
    18a8:	af e4       	ldi	r26, 0x4F	; 79
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	ef e4       	ldi	r30, 0x4F	; 79
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	80 68       	ori	r24, 0x80	; 128
    18b4:	8c 93       	st	X, r24
    18b6:	af e4       	ldi	r26, 0x4F	; 79
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	ef e4       	ldi	r30, 0x4F	; 79
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	80 62       	ori	r24, 0x20	; 32
    18c2:	8c 93       	st	X, r24
    18c4:	af e4       	ldi	r26, 0x4F	; 79
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ef e4       	ldi	r30, 0x4F	; 79
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8f 7b       	andi	r24, 0xBF	; 191
    18d0:	8c 93       	st	X, r24
    18d2:	af e4       	ldi	r26, 0x4F	; 79
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ef e4       	ldi	r30, 0x4F	; 79
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	8f 7e       	andi	r24, 0xEF	; 239
    18de:	8c 93       	st	X, r24
			if(timer_config->channels_number==BOTH_CHANNELS)
    18e0:	e9 81       	ldd	r30, Y+1	; 0x01
    18e2:	fa 81       	ldd	r31, Y+2	; 0x02
    18e4:	83 85       	ldd	r24, Z+11	; 0x0b
    18e6:	82 30       	cpi	r24, 0x02	; 2
    18e8:	09 f0       	breq	.+2      	; 0x18ec <PWM_timers_init+0x17e>
    18ea:	5f c0       	rjmp	.+190    	; 0x19aa <PWM_timers_init+0x23c>
			{
				CLR_BIT(TCC1A_REG,2);
    18ec:	af e4       	ldi	r26, 0x4F	; 79
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	ef e4       	ldi	r30, 0x4F	; 79
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8b 7f       	andi	r24, 0xFB	; 251
    18f8:	8c 93       	st	X, r24
				DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	64 e0       	ldi	r22, 0x04	; 4
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
    1904:	af e4       	ldi	r26, 0x4F	; 79
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	ef e4       	ldi	r30, 0x4F	; 79
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	80 62       	ori	r24, 0x20	; 32
    1910:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
    1912:	a8 e4       	ldi	r26, 0x48	; 72
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e9 81       	ldd	r30, Y+1	; 0x01
    1918:	fa 81       	ldd	r31, Y+2	; 0x02
    191a:	84 81       	ldd	r24, Z+4	; 0x04
    191c:	95 81       	ldd	r25, Z+5	; 0x05
    191e:	11 96       	adiw	r26, 0x01	; 1
    1920:	9c 93       	st	X, r25
    1922:	8e 93       	st	-X, r24
    1924:	42 c0       	rjmp	.+132    	; 0x19aa <PWM_timers_init+0x23c>
			}
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    1926:	e9 81       	ldd	r30, Y+1	; 0x01
    1928:	fa 81       	ldd	r31, Y+2	; 0x02
    192a:	80 85       	ldd	r24, Z+8	; 0x08
    192c:	83 30       	cpi	r24, 0x03	; 3
    192e:	e9 f5       	brne	.+122    	; 0x19aa <PWM_timers_init+0x23c>
		{

			SET_BIT(TCC1B_REG,4);CLR_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
    1930:	ae e4       	ldi	r26, 0x4E	; 78
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ee e4       	ldi	r30, 0x4E	; 78
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 61       	ori	r24, 0x10	; 16
    193c:	8c 93       	st	X, r24
    193e:	ae e4       	ldi	r26, 0x4E	; 78
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ee e4       	ldi	r30, 0x4E	; 78
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	87 7f       	andi	r24, 0xF7	; 247
    194a:	8c 93       	st	X, r24
    194c:	af e4       	ldi	r26, 0x4F	; 79
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	ef e4       	ldi	r30, 0x4F	; 79
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	82 60       	ori	r24, 0x02	; 2
    1958:	8c 93       	st	X, r24
    195a:	af e4       	ldi	r26, 0x4F	; 79
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	ef e4       	ldi	r30, 0x4F	; 79
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	8e 7f       	andi	r24, 0xFE	; 254
    1966:	8c 93       	st	X, r24

			if(timer_config->channels_number==BOTH_CHANNELS)
    1968:	e9 81       	ldd	r30, Y+1	; 0x01
    196a:	fa 81       	ldd	r31, Y+2	; 0x02
    196c:	83 85       	ldd	r24, Z+11	; 0x0b
    196e:	82 30       	cpi	r24, 0x02	; 2
    1970:	e1 f4       	brne	.+56     	; 0x19aa <PWM_timers_init+0x23c>
			{
				CLR_BIT(TCC1A_REG,2);
    1972:	af e4       	ldi	r26, 0x4F	; 79
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	ef e4       	ldi	r30, 0x4F	; 79
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8b 7f       	andi	r24, 0xFB	; 251
    197e:	8c 93       	st	X, r24
				DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
    1980:	83 e0       	ldi	r24, 0x03	; 3
    1982:	64 e0       	ldi	r22, 0x04	; 4
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
    198a:	af e4       	ldi	r26, 0x4F	; 79
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ef e4       	ldi	r30, 0x4F	; 79
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	80 62       	ori	r24, 0x20	; 32
    1996:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
    1998:	a8 e4       	ldi	r26, 0x48	; 72
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e9 81       	ldd	r30, Y+1	; 0x01
    199e:	fa 81       	ldd	r31, Y+2	; 0x02
    19a0:	84 81       	ldd	r24, Z+4	; 0x04
    19a2:	95 81       	ldd	r25, Z+5	; 0x05
    19a4:	11 96       	adiw	r26, 0x01	; 1
    19a6:	9c 93       	st	X, r25
    19a8:	8e 93       	st	-X, r24
			}
		}
			/*select the clk (prescaler)to start counting */
			TCC1B_REG=(TCC1B_REG & 0b11111000)|(timer_config->T0_T1_used_freq&0b00000111 );
    19aa:	ae e4       	ldi	r26, 0x4E	; 78
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ee e4       	ldi	r30, 0x4E	; 78
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	98 2f       	mov	r25, r24
    19b6:	98 7f       	andi	r25, 0xF8	; 248
    19b8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ba:	fa 81       	ldd	r31, Y+2	; 0x02
    19bc:	86 81       	ldd	r24, Z+6	; 0x06
    19be:	87 70       	andi	r24, 0x07	; 7
    19c0:	89 2b       	or	r24, r25
    19c2:	8c 93       	st	X, r24
    19c4:	3d c0       	rjmp	.+122    	; 0x1a40 <PWM_timers_init+0x2d2>
			break;
	case TIMER_2:
		clear_timer(TIMER_2); /* Set Timer Initial Value to 0*/
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <clear_timer>
		OCR2_REG  = timer_config->set_duty_cycle/100; /* Set Compare Value*/
    19cc:	03 e4       	ldi	r16, 0x43	; 67
    19ce:	10 e0       	ldi	r17, 0x00	; 0
    19d0:	e9 81       	ldd	r30, Y+1	; 0x01
    19d2:	fa 81       	ldd	r31, Y+2	; 0x02
    19d4:	82 81       	ldd	r24, Z+2	; 0x02
    19d6:	93 81       	ldd	r25, Z+3	; 0x03
    19d8:	24 e6       	ldi	r18, 0x64	; 100
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	b9 01       	movw	r22, r18
    19de:	0e 94 df 21 	call	0x43be	; 0x43be <__udivmodhi4>
    19e2:	cb 01       	movw	r24, r22
    19e4:	f8 01       	movw	r30, r16
    19e6:	80 83       	st	Z, r24
		/*Configure PD7/OC2 as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_D, PIN_7, OUTPUT);
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	67 e0       	ldi	r22, 0x07	; 7
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode WGM21=1 & WGM20=1
		 * 3. Clear OC2 when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC2_REG,7);
    19f2:	a5 e4       	ldi	r26, 0x45	; 69
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e5 e4       	ldi	r30, 0x45	; 69
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	8f 77       	andi	r24, 0x7F	; 127
    19fe:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    1a00:	e9 81       	ldd	r30, Y+1	; 0x01
    1a02:	fa 81       	ldd	r31, Y+2	; 0x02
    1a04:	80 85       	ldd	r24, Z+8	; 0x08
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	29 f4       	brne	.+10     	; 0x1a14 <PWM_timers_init+0x2a6>
		{
			TCC2_REG = (1<<3) | (1<<5) | (1<<6);
    1a0a:	e5 e4       	ldi	r30, 0x45	; 69
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	88 e6       	ldi	r24, 0x68	; 104
    1a10:	80 83       	st	Z, r24
    1a12:	09 c0       	rjmp	.+18     	; 0x1a26 <PWM_timers_init+0x2b8>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    1a14:	e9 81       	ldd	r30, Y+1	; 0x01
    1a16:	fa 81       	ldd	r31, Y+2	; 0x02
    1a18:	80 85       	ldd	r24, Z+8	; 0x08
    1a1a:	83 30       	cpi	r24, 0x03	; 3
    1a1c:	21 f4       	brne	.+8      	; 0x1a26 <PWM_timers_init+0x2b8>
		{
			TCC2_REG = (0<<3) | (1<<5) | (1<<6);
    1a1e:	e5 e4       	ldi	r30, 0x45	; 69
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 e6       	ldi	r24, 0x60	; 96
    1a24:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC2_REG=(TCC2_REG & 0b11111000)|(timer_config->T2_used_freq&0b00000111 );
    1a26:	a5 e4       	ldi	r26, 0x45	; 69
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e5 e4       	ldi	r30, 0x45	; 69
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	98 2f       	mov	r25, r24
    1a32:	98 7f       	andi	r25, 0xF8	; 248
    1a34:	e9 81       	ldd	r30, Y+1	; 0x01
    1a36:	fa 81       	ldd	r31, Y+2	; 0x02
    1a38:	87 81       	ldd	r24, Z+7	; 0x07
    1a3a:	87 70       	andi	r24, 0x07	; 7
    1a3c:	89 2b       	or	r24, r25
    1a3e:	8c 93       	st	X, r24
		break;
		}

	}
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	08 95       	ret

00001a52 <Global_VidINTEnable>:

    void Global_VidINTEnable(void)
	{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(S_REG,7);
    1a5a:	af e5       	ldi	r26, 0x5F	; 95
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	ef e5       	ldi	r30, 0x5F	; 95
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	80 68       	ori	r24, 0x80	; 128
    1a66:	8c 93       	st	X, r24
	}
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <Global_VidINTDisable>:

	void Global_VidINTDisable(void)
	{
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(S_REG,7);
    1a76:	af e5       	ldi	r26, 0x5F	; 95
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	ef e5       	ldi	r30, 0x5F	; 95
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8f 77       	andi	r24, 0x7F	; 127
    1a82:	8c 93       	st	X, r24
	}
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <Delay_voidBasyWaitMS>:

	void Delay_voidBasyWaitMS(u16 Copy_u8Delay_ms)
	{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	2a 97       	sbiw	r28, 0x0a	; 10
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	9a 87       	std	Y+10, r25	; 0x0a
    1aa0:	89 87       	std	Y+9, r24	; 0x09
		/*
		 *  Delay Function Using Timer2
		 */
		f64 Local_Counter=0;
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a0 e0       	ldi	r26, 0x00	; 0
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	9e 83       	std	Y+6, r25	; 0x06
    1aae:	af 83       	std	Y+7, r26	; 0x07
    1ab0:	b8 87       	std	Y+8, r27	; 0x08
		f32 Req_Delay_Counts = Copy_u8Delay_ms/(f32)0.256; //Deviding the required delay time by OVF Time
    1ab2:	89 85       	ldd	r24, Y+9	; 0x09
    1ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab6:	cc 01       	movw	r24, r24
    1ab8:	a0 e0       	ldi	r26, 0x00	; 0
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	2f e6       	ldi	r18, 0x6F	; 111
    1ace:	32 e1       	ldi	r19, 0x12	; 18
    1ad0:	43 e8       	ldi	r20, 0x83	; 131
    1ad2:	5e e3       	ldi	r21, 0x3E	; 62
    1ad4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	ab 83       	std	Y+3, r26	; 0x03
    1ae2:	bc 83       	std	Y+4, r27	; 0x04
		TCC2_REG &= TIMER_PRE_SCALER_CLR_MUSK; // clear Timer2 control register
    1ae4:	a5 e4       	ldi	r26, 0x45	; 69
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e5 e4       	ldi	r30, 0x45	; 69
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 7f       	andi	r24, 0xF8	; 248
    1af0:	8c 93       	st	X, r24
		TCC2_REG = TIMER_2_PRE_SCALER_e_8; //set timer2 in normal mode with prescaler 8
    1af2:	e5 e4       	ldi	r30, 0x45	; 69
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	80 83       	st	Z, r24
    1afa:	1c c0       	rjmp	.+56     	; 0x1b34 <Delay_voidBasyWaitMS+0xaa>
		while(Local_Counter<Req_Delay_Counts)
		{
			while(GET_BIT(TIF_REG,7)==0);
    1afc:	e8 e5       	ldi	r30, 0x58	; 88
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	88 23       	and	r24, r24
    1b04:	dc f7       	brge	.-10     	; 0x1afc <Delay_voidBasyWaitMS+0x72>
			SET_BIT(TIF_REG,7);
    1b06:	a8 e5       	ldi	r26, 0x58	; 88
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e8 e5       	ldi	r30, 0x58	; 88
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	80 68       	ori	r24, 0x80	; 128
    1b12:	8c 93       	st	X, r24
			Local_Counter++;
    1b14:	6d 81       	ldd	r22, Y+5	; 0x05
    1b16:	7e 81       	ldd	r23, Y+6	; 0x06
    1b18:	8f 81       	ldd	r24, Y+7	; 0x07
    1b1a:	98 85       	ldd	r25, Y+8	; 0x08
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	af 83       	std	Y+7, r26	; 0x07
    1b32:	b8 87       	std	Y+8, r27	; 0x08
		 */
		f64 Local_Counter=0;
		f32 Req_Delay_Counts = Copy_u8Delay_ms/(f32)0.256; //Deviding the required delay time by OVF Time
		TCC2_REG &= TIMER_PRE_SCALER_CLR_MUSK; // clear Timer2 control register
		TCC2_REG = TIMER_2_PRE_SCALER_e_8; //set timer2 in normal mode with prescaler 8
		while(Local_Counter<Req_Delay_Counts)
    1b34:	6d 81       	ldd	r22, Y+5	; 0x05
    1b36:	7e 81       	ldd	r23, Y+6	; 0x06
    1b38:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3a:	98 85       	ldd	r25, Y+8	; 0x08
    1b3c:	29 81       	ldd	r18, Y+1	; 0x01
    1b3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b40:	4b 81       	ldd	r20, Y+3	; 0x03
    1b42:	5c 81       	ldd	r21, Y+4	; 0x04
    1b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	c4 f2       	brlt	.-80     	; 0x1afc <Delay_voidBasyWaitMS+0x72>
		{
			while(GET_BIT(TIF_REG,7)==0);
			SET_BIT(TIF_REG,7);
			Local_Counter++;
		}
		Local_Counter=0;
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e0       	ldi	r26, 0x00	; 0
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	af 83       	std	Y+7, r26	; 0x07
    1b5a:	b8 87       	std	Y+8, r27	; 0x08
	}
    1b5c:	2a 96       	adiw	r28, 0x0a	; 10
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <DIO_u8setPortDirection>:
#define RT_NOK   (u8)   1
#define NULL     (void *)0


u8 DIO_u8setPortDirection(u8 Copy_u8port,u8 Copy_u8direction)
{   u8 Local_u8errStatus = RT_OK;
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <DIO_u8setPortDirection+0x6>
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <DIO_u8setPortDirection+0x8>
    1b76:	0f 92       	push	r0
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
    1b7e:	6b 83       	std	Y+3, r22	; 0x03
    1b80:	19 82       	std	Y+1, r1	; 0x01
switch(Copy_u8port)
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	3d 83       	std	Y+5, r19	; 0x05
    1b8a:	2c 83       	std	Y+4, r18	; 0x04
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	91 05       	cpc	r25, r1
    1b94:	d1 f0       	breq	.+52     	; 0x1bca <DIO_u8setPortDirection+0x5c>
    1b96:	2c 81       	ldd	r18, Y+4	; 0x04
    1b98:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9a:	22 30       	cpi	r18, 0x02	; 2
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <DIO_u8setPortDirection+0x3c>
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	61 f0       	breq	.+24     	; 0x1bc0 <DIO_u8setPortDirection+0x52>
    1ba8:	1f c0       	rjmp	.+62     	; 0x1be8 <DIO_u8setPortDirection+0x7a>
    1baa:	2c 81       	ldd	r18, Y+4	; 0x04
    1bac:	3d 81       	ldd	r19, Y+5	; 0x05
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	81 f0       	breq	.+32     	; 0x1bd4 <DIO_u8setPortDirection+0x66>
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb8:	83 30       	cpi	r24, 0x03	; 3
    1bba:	91 05       	cpc	r25, r1
    1bbc:	81 f0       	breq	.+32     	; 0x1bde <DIO_u8setPortDirection+0x70>
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <DIO_u8setPortDirection+0x7a>
{
case PORT_A :DIOA->DDR = Copy_u8direction ;break ;
    1bc0:	e9 e3       	ldi	r30, 0x39	; 57
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	81 83       	std	Z+1, r24	; 0x01
    1bc8:	11 c0       	rjmp	.+34     	; 0x1bec <DIO_u8setPortDirection+0x7e>
case PORT_B :DIOB->DDR = Copy_u8direction ;break ;
    1bca:	e6 e3       	ldi	r30, 0x36	; 54
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	81 83       	std	Z+1, r24	; 0x01
    1bd2:	0c c0       	rjmp	.+24     	; 0x1bec <DIO_u8setPortDirection+0x7e>
case PORT_C :DIOC->DDR = Copy_u8direction ;break ;
    1bd4:	e3 e3       	ldi	r30, 0x33	; 51
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	81 83       	std	Z+1, r24	; 0x01
    1bdc:	07 c0       	rjmp	.+14     	; 0x1bec <DIO_u8setPortDirection+0x7e>
case PORT_D :DIOD->DDR = Copy_u8direction ;break ;
    1bde:	e0 e3       	ldi	r30, 0x30	; 48
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	81 83       	std	Z+1, r24	; 0x01
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <DIO_u8setPortDirection+0x7e>
default : Local_u8errStatus = RT_NOK ;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <DIO_u8setPortValue>:
u8 DIO_u8setPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{ u8 Local_u8errStatus = RT_OK;
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <DIO_u8setPortValue+0x6>
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <DIO_u8setPortValue+0x8>
    1c06:	0f 92       	push	r0
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	8a 83       	std	Y+2, r24	; 0x02
    1c0e:	6b 83       	std	Y+3, r22	; 0x03
    1c10:	19 82       	std	Y+1, r1	; 0x01
switch(Copy_u8port)
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	3d 83       	std	Y+5, r19	; 0x05
    1c1a:	2c 83       	std	Y+4, r18	; 0x04
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	91 05       	cpc	r25, r1
    1c24:	d1 f0       	breq	.+52     	; 0x1c5a <DIO_u8setPortValue+0x5c>
    1c26:	2c 81       	ldd	r18, Y+4	; 0x04
    1c28:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2a:	22 30       	cpi	r18, 0x02	; 2
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	2c f4       	brge	.+10     	; 0x1c3a <DIO_u8setPortValue+0x3c>
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	9d 81       	ldd	r25, Y+5	; 0x05
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	61 f0       	breq	.+24     	; 0x1c50 <DIO_u8setPortValue+0x52>
    1c38:	1f c0       	rjmp	.+62     	; 0x1c78 <DIO_u8setPortValue+0x7a>
    1c3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c3e:	22 30       	cpi	r18, 0x02	; 2
    1c40:	31 05       	cpc	r19, r1
    1c42:	81 f0       	breq	.+32     	; 0x1c64 <DIO_u8setPortValue+0x66>
    1c44:	8c 81       	ldd	r24, Y+4	; 0x04
    1c46:	9d 81       	ldd	r25, Y+5	; 0x05
    1c48:	83 30       	cpi	r24, 0x03	; 3
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	81 f0       	breq	.+32     	; 0x1c6e <DIO_u8setPortValue+0x70>
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <DIO_u8setPortValue+0x7a>
{
case PORT_A :DIOA->PORT = Copy_u8Value ;break ;
    1c50:	e9 e3       	ldi	r30, 0x39	; 57
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	82 83       	std	Z+2, r24	; 0x02
    1c58:	11 c0       	rjmp	.+34     	; 0x1c7c <DIO_u8setPortValue+0x7e>
case PORT_B :DIOB->PORT = Copy_u8Value ;break ;
    1c5a:	e6 e3       	ldi	r30, 0x36	; 54
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	82 83       	std	Z+2, r24	; 0x02
    1c62:	0c c0       	rjmp	.+24     	; 0x1c7c <DIO_u8setPortValue+0x7e>
case PORT_C :DIOC->PORT = Copy_u8Value ;break ;
    1c64:	e3 e3       	ldi	r30, 0x33	; 51
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	82 83       	std	Z+2, r24	; 0x02
    1c6c:	07 c0       	rjmp	.+14     	; 0x1c7c <DIO_u8setPortValue+0x7e>
case PORT_D :DIOD->PORT = Copy_u8Value ;break ;
    1c6e:	e0 e3       	ldi	r30, 0x30	; 48
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	82 83       	std	Z+2, r24	; 0x02
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <DIO_u8setPortValue+0x7e>
default : Local_u8errStatus = RT_NOK ;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <DIO_u8getPortValue>:

u8 DIO_u8getPortValue(u8 Copy_u8port, u8 * Copy_u8pValue)
{u8 Local_u8errStatus = RT_OK;
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <DIO_u8getPortValue+0x6>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <DIO_u8getPortValue+0x8>
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <DIO_u8getPortValue+0xa>
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
    1c9e:	7c 83       	std	Y+4, r23	; 0x04
    1ca0:	6b 83       	std	Y+3, r22	; 0x03
    1ca2:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8pValue != NULL)
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	09 f4       	brne	.+2      	; 0x1cae <DIO_u8getPortValue+0x20>
    1cac:	3e c0       	rjmp	.+124    	; 0x1d2a <DIO_u8getPortValue+0x9c>
{
	switch(Copy_u8port)
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	3e 83       	std	Y+6, r19	; 0x06
    1cb6:	2d 83       	std	Y+5, r18	; 0x05
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	e1 f0       	breq	.+56     	; 0x1cfa <DIO_u8getPortValue+0x6c>
    1cc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1cc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	31 05       	cpc	r19, r1
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <DIO_u8getPortValue+0x48>
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	61 f0       	breq	.+24     	; 0x1cec <DIO_u8getPortValue+0x5e>
    1cd4:	27 c0       	rjmp	.+78     	; 0x1d24 <DIO_u8getPortValue+0x96>
    1cd6:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd8:	3e 81       	ldd	r19, Y+6	; 0x06
    1cda:	22 30       	cpi	r18, 0x02	; 2
    1cdc:	31 05       	cpc	r19, r1
    1cde:	a1 f0       	breq	.+40     	; 0x1d08 <DIO_u8getPortValue+0x7a>
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	83 30       	cpi	r24, 0x03	; 3
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	b1 f0       	breq	.+44     	; 0x1d16 <DIO_u8getPortValue+0x88>
    1cea:	1c c0       	rjmp	.+56     	; 0x1d24 <DIO_u8getPortValue+0x96>
	{
	case PORT_A : *Copy_u8pValue = DIOA->PIN ;break ;
    1cec:	e9 e3       	ldi	r30, 0x39	; 57
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf6:	80 83       	st	Z, r24
    1cf8:	1a c0       	rjmp	.+52     	; 0x1d2e <DIO_u8getPortValue+0xa0>
	case PORT_B : *Copy_u8pValue = DIOB->PIN ;break ;
    1cfa:	e6 e3       	ldi	r30, 0x36	; 54
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	eb 81       	ldd	r30, Y+3	; 0x03
    1d02:	fc 81       	ldd	r31, Y+4	; 0x04
    1d04:	80 83       	st	Z, r24
    1d06:	13 c0       	rjmp	.+38     	; 0x1d2e <DIO_u8getPortValue+0xa0>
	case PORT_C : *Copy_u8pValue = DIOC->PIN ;break ;
    1d08:	e3 e3       	ldi	r30, 0x33	; 51
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d10:	fc 81       	ldd	r31, Y+4	; 0x04
    1d12:	80 83       	st	Z, r24
    1d14:	0c c0       	rjmp	.+24     	; 0x1d2e <DIO_u8getPortValue+0xa0>
	case PORT_D : *Copy_u8pValue = DIOD->PIN ;break ;
    1d16:	e0 e3       	ldi	r30, 0x30	; 48
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d20:	80 83       	st	Z, r24
    1d22:	05 c0       	rjmp	.+10     	; 0x1d2e <DIO_u8getPortValue+0xa0>
	default : Local_u8errStatus = RT_NOK ;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <DIO_u8getPortValue+0xa0>
	}
}
else
{
	Local_u8errStatus = RT_NOK;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d30:	26 96       	adiw	r28, 0x06	; 6
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <DIO_u8setPinDirection>:

u8 DIO_u8setPinDirection(u8 Copy_u8port, u8 Copy_u8pin ,u8 Copy_u8direction)
{u8 Local_u8errStatus = RT_OK;
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	2a 97       	sbiw	r28, 0x0a	; 10
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	8a 83       	std	Y+2, r24	; 0x02
    1d58:	6b 83       	std	Y+3, r22	; 0x03
    1d5a:	4c 83       	std	Y+4, r20	; 0x04
    1d5c:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8pin <=PIN_7)
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	88 30       	cpi	r24, 0x08	; 8
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <DIO_u8setPinDirection+0x24>
    1d64:	0d c1       	rjmp	.+538    	; 0x1f80 <DIO_u8setPinDirection+0x23e>
{
	switch(Copy_u8direction)
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	3a 87       	std	Y+10, r19	; 0x0a
    1d6e:	29 87       	std	Y+9, r18	; 0x09
    1d70:	89 85       	ldd	r24, Y+9	; 0x09
    1d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	39 f0       	breq	.+14     	; 0x1d86 <DIO_u8setPinDirection+0x44>
    1d78:	29 85       	ldd	r18, Y+9	; 0x09
    1d7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d7c:	21 30       	cpi	r18, 0x01	; 1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <DIO_u8setPinDirection+0x42>
    1d82:	80 c0       	rjmp	.+256    	; 0x1e84 <DIO_u8setPinDirection+0x142>
    1d84:	fa c0       	rjmp	.+500    	; 0x1f7a <DIO_u8setPinDirection+0x238>
	{
	case INPUT :
		switch(Copy_u8port)
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	38 87       	std	Y+8, r19	; 0x08
    1d8e:	2f 83       	std	Y+7, r18	; 0x07
    1d90:	8f 81       	ldd	r24, Y+7	; 0x07
    1d92:	98 85       	ldd	r25, Y+8	; 0x08
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	91 05       	cpc	r25, r1
    1d98:	69 f1       	breq	.+90     	; 0x1df4 <DIO_u8setPinDirection+0xb2>
    1d9a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d9c:	38 85       	ldd	r19, Y+8	; 0x08
    1d9e:	22 30       	cpi	r18, 0x02	; 2
    1da0:	31 05       	cpc	r19, r1
    1da2:	2c f4       	brge	.+10     	; 0x1dae <DIO_u8setPinDirection+0x6c>
    1da4:	8f 81       	ldd	r24, Y+7	; 0x07
    1da6:	98 85       	ldd	r25, Y+8	; 0x08
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f0       	breq	.+26     	; 0x1dc6 <DIO_u8setPinDirection+0x84>
    1dac:	68 c0       	rjmp	.+208    	; 0x1e7e <DIO_u8setPinDirection+0x13c>
    1dae:	2f 81       	ldd	r18, Y+7	; 0x07
    1db0:	38 85       	ldd	r19, Y+8	; 0x08
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	a9 f1       	breq	.+106    	; 0x1e22 <DIO_u8setPinDirection+0xe0>
    1db8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dba:	98 85       	ldd	r25, Y+8	; 0x08
    1dbc:	83 30       	cpi	r24, 0x03	; 3
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <DIO_u8setPinDirection+0x82>
    1dc2:	46 c0       	rjmp	.+140    	; 0x1e50 <DIO_u8setPinDirection+0x10e>
    1dc4:	5c c0       	rjmp	.+184    	; 0x1e7e <DIO_u8setPinDirection+0x13c>
		{
		case PORT_A : CLR_BIT(DIOA->DDR,Copy_u8pin);break;
    1dc6:	a9 e3       	ldi	r26, 0x39	; 57
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e9 e3       	ldi	r30, 0x39	; 57
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	81 81       	ldd	r24, Z+1	; 0x01
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <DIO_u8setPinDirection+0xa2>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <DIO_u8setPinDirection+0x9e>
    1de8:	80 95       	com	r24
    1dea:	84 23       	and	r24, r20
    1dec:	11 96       	adiw	r26, 0x01	; 1
    1dee:	8c 93       	st	X, r24
    1df0:	11 97       	sbiw	r26, 0x01	; 1
    1df2:	c8 c0       	rjmp	.+400    	; 0x1f84 <DIO_u8setPinDirection+0x242>
		case PORT_B : CLR_BIT(DIOB->DDR,Copy_u8pin);break;
    1df4:	a6 e3       	ldi	r26, 0x36	; 54
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e6 e3       	ldi	r30, 0x36	; 54
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	81 81       	ldd	r24, Z+1	; 0x01
    1dfe:	48 2f       	mov	r20, r24
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 2e       	mov	r0, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_u8setPinDirection+0xd0>
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	0a 94       	dec	r0
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <DIO_u8setPinDirection+0xcc>
    1e16:	80 95       	com	r24
    1e18:	84 23       	and	r24, r20
    1e1a:	11 96       	adiw	r26, 0x01	; 1
    1e1c:	8c 93       	st	X, r24
    1e1e:	11 97       	sbiw	r26, 0x01	; 1
    1e20:	b1 c0       	rjmp	.+354    	; 0x1f84 <DIO_u8setPinDirection+0x242>
		case PORT_C : CLR_BIT(DIOC->DDR,Copy_u8pin);break;
    1e22:	a3 e3       	ldi	r26, 0x33	; 51
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e3 e3       	ldi	r30, 0x33	; 51
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	81 81       	ldd	r24, Z+1	; 0x01
    1e2c:	48 2f       	mov	r20, r24
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	02 2e       	mov	r0, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <DIO_u8setPinDirection+0xfe>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	0a 94       	dec	r0
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <DIO_u8setPinDirection+0xfa>
    1e44:	80 95       	com	r24
    1e46:	84 23       	and	r24, r20
    1e48:	11 96       	adiw	r26, 0x01	; 1
    1e4a:	8c 93       	st	X, r24
    1e4c:	11 97       	sbiw	r26, 0x01	; 1
    1e4e:	9a c0       	rjmp	.+308    	; 0x1f84 <DIO_u8setPinDirection+0x242>
		case PORT_D : CLR_BIT(DIOD->DDR,Copy_u8pin);break;
    1e50:	a0 e3       	ldi	r26, 0x30	; 48
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e0 e3       	ldi	r30, 0x30	; 48
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	81 81       	ldd	r24, Z+1	; 0x01
    1e5a:	48 2f       	mov	r20, r24
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	02 2e       	mov	r0, r18
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <DIO_u8setPinDirection+0x12c>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	0a 94       	dec	r0
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <DIO_u8setPinDirection+0x128>
    1e72:	80 95       	com	r24
    1e74:	84 23       	and	r24, r20
    1e76:	11 96       	adiw	r26, 0x01	; 1
    1e78:	8c 93       	st	X, r24
    1e7a:	11 97       	sbiw	r26, 0x01	; 1
    1e7c:	83 c0       	rjmp	.+262    	; 0x1f84 <DIO_u8setPinDirection+0x242>
		default : Local_u8errStatus = RT_NOK;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	80 c0       	rjmp	.+256    	; 0x1f84 <DIO_u8setPinDirection+0x242>
		}
		break;
		case OUTPUT :
			switch(Copy_u8port)
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	3e 83       	std	Y+6, r19	; 0x06
    1e8c:	2d 83       	std	Y+5, r18	; 0x05
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	91 05       	cpc	r25, r1
    1e96:	61 f1       	breq	.+88     	; 0x1ef0 <DIO_u8setPinDirection+0x1ae>
    1e98:	2d 81       	ldd	r18, Y+5	; 0x05
    1e9a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e9c:	22 30       	cpi	r18, 0x02	; 2
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	2c f4       	brge	.+10     	; 0x1eac <DIO_u8setPinDirection+0x16a>
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	69 f0       	breq	.+26     	; 0x1ec4 <DIO_u8setPinDirection+0x182>
    1eaa:	64 c0       	rjmp	.+200    	; 0x1f74 <DIO_u8setPinDirection+0x232>
    1eac:	2d 81       	ldd	r18, Y+5	; 0x05
    1eae:	3e 81       	ldd	r19, Y+6	; 0x06
    1eb0:	22 30       	cpi	r18, 0x02	; 2
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	99 f1       	breq	.+102    	; 0x1f1c <DIO_u8setPinDirection+0x1da>
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	83 30       	cpi	r24, 0x03	; 3
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <DIO_u8setPinDirection+0x180>
    1ec0:	43 c0       	rjmp	.+134    	; 0x1f48 <DIO_u8setPinDirection+0x206>
    1ec2:	58 c0       	rjmp	.+176    	; 0x1f74 <DIO_u8setPinDirection+0x232>
			{
			case PORT_A : SET_BIT(DIOA->DDR,Copy_u8pin);break;
    1ec4:	a9 e3       	ldi	r26, 0x39	; 57
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e9 e3       	ldi	r30, 0x39	; 57
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	81 81       	ldd	r24, Z+1	; 0x01
    1ece:	48 2f       	mov	r20, r24
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 2e       	mov	r0, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <DIO_u8setPinDirection+0x1a0>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	0a 94       	dec	r0
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <DIO_u8setPinDirection+0x19c>
    1ee6:	84 2b       	or	r24, r20
    1ee8:	11 96       	adiw	r26, 0x01	; 1
    1eea:	8c 93       	st	X, r24
    1eec:	11 97       	sbiw	r26, 0x01	; 1
    1eee:	4a c0       	rjmp	.+148    	; 0x1f84 <DIO_u8setPinDirection+0x242>
			case PORT_B : SET_BIT(DIOB->DDR,Copy_u8pin);break;
    1ef0:	a6 e3       	ldi	r26, 0x36	; 54
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e6 e3       	ldi	r30, 0x36	; 54
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	81 81       	ldd	r24, Z+1	; 0x01
    1efa:	48 2f       	mov	r20, r24
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	02 2e       	mov	r0, r18
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <DIO_u8setPinDirection+0x1cc>
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	0a 94       	dec	r0
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <DIO_u8setPinDirection+0x1c8>
    1f12:	84 2b       	or	r24, r20
    1f14:	11 96       	adiw	r26, 0x01	; 1
    1f16:	8c 93       	st	X, r24
    1f18:	11 97       	sbiw	r26, 0x01	; 1
    1f1a:	34 c0       	rjmp	.+104    	; 0x1f84 <DIO_u8setPinDirection+0x242>
			case PORT_C : SET_BIT(DIOC->DDR,Copy_u8pin);break;
    1f1c:	a3 e3       	ldi	r26, 0x33	; 51
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e3 e3       	ldi	r30, 0x33	; 51
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	81 81       	ldd	r24, Z+1	; 0x01
    1f26:	48 2f       	mov	r20, r24
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	02 2e       	mov	r0, r18
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <DIO_u8setPinDirection+0x1f8>
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	0a 94       	dec	r0
    1f3c:	e2 f7       	brpl	.-8      	; 0x1f36 <DIO_u8setPinDirection+0x1f4>
    1f3e:	84 2b       	or	r24, r20
    1f40:	11 96       	adiw	r26, 0x01	; 1
    1f42:	8c 93       	st	X, r24
    1f44:	11 97       	sbiw	r26, 0x01	; 1
    1f46:	1e c0       	rjmp	.+60     	; 0x1f84 <DIO_u8setPinDirection+0x242>
			case PORT_D : SET_BIT(DIOD->DDR,Copy_u8pin);break;
    1f48:	a0 e3       	ldi	r26, 0x30	; 48
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e0 e3       	ldi	r30, 0x30	; 48
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	81 81       	ldd	r24, Z+1	; 0x01
    1f52:	48 2f       	mov	r20, r24
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	02 2e       	mov	r0, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <DIO_u8setPinDirection+0x224>
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	0a 94       	dec	r0
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <DIO_u8setPinDirection+0x220>
    1f6a:	84 2b       	or	r24, r20
    1f6c:	11 96       	adiw	r26, 0x01	; 1
    1f6e:	8c 93       	st	X, r24
    1f70:	11 97       	sbiw	r26, 0x01	; 1
    1f72:	08 c0       	rjmp	.+16     	; 0x1f84 <DIO_u8setPinDirection+0x242>
			default : Local_u8errStatus = RT_NOK;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	05 c0       	rjmp	.+10     	; 0x1f84 <DIO_u8setPinDirection+0x242>
			}
			break;
			default : Local_u8errStatus = RT_NOK;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_u8setPinDirection+0x242>

	}
}
else
{
	Local_u8errStatus = RT_NOK;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f86:	2a 96       	adiw	r28, 0x0a	; 10
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <DIO_u8setPinValue>:

u8 DIO_u8setPinValue(u8 Copy_u8port, u8 Copy_u8pin ,u8 Copy_u8value)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	2a 97       	sbiw	r28, 0x0a	; 10
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	8a 83       	std	Y+2, r24	; 0x02
    1fae:	6b 83       	std	Y+3, r22	; 0x03
    1fb0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    1fb2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin <=PIN_7)
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	88 30       	cpi	r24, 0x08	; 8
    1fb8:	08 f0       	brcs	.+2      	; 0x1fbc <DIO_u8setPinValue+0x24>
    1fba:	0d c1       	rjmp	.+538    	; 0x21d6 <DIO_u8setPinValue+0x23e>
	{
		switch(Copy_u8value)
    1fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	3a 87       	std	Y+10, r19	; 0x0a
    1fc4:	29 87       	std	Y+9, r18	; 0x09
    1fc6:	89 85       	ldd	r24, Y+9	; 0x09
    1fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	39 f0       	breq	.+14     	; 0x1fdc <DIO_u8setPinValue+0x44>
    1fce:	29 85       	ldd	r18, Y+9	; 0x09
    1fd0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fd2:	21 30       	cpi	r18, 0x01	; 1
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <DIO_u8setPinValue+0x42>
    1fd8:	80 c0       	rjmp	.+256    	; 0x20da <DIO_u8setPinValue+0x142>
    1fda:	fa c0       	rjmp	.+500    	; 0x21d0 <DIO_u8setPinValue+0x238>
		{
		case LOW :
			switch(Copy_u8port)
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	38 87       	std	Y+8, r19	; 0x08
    1fe4:	2f 83       	std	Y+7, r18	; 0x07
    1fe6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe8:	98 85       	ldd	r25, Y+8	; 0x08
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	91 05       	cpc	r25, r1
    1fee:	69 f1       	breq	.+90     	; 0x204a <DIO_u8setPinValue+0xb2>
    1ff0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ff2:	38 85       	ldd	r19, Y+8	; 0x08
    1ff4:	22 30       	cpi	r18, 0x02	; 2
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <DIO_u8setPinValue+0x6c>
    1ffa:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffc:	98 85       	ldd	r25, Y+8	; 0x08
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	69 f0       	breq	.+26     	; 0x201c <DIO_u8setPinValue+0x84>
    2002:	68 c0       	rjmp	.+208    	; 0x20d4 <DIO_u8setPinValue+0x13c>
    2004:	2f 81       	ldd	r18, Y+7	; 0x07
    2006:	38 85       	ldd	r19, Y+8	; 0x08
    2008:	22 30       	cpi	r18, 0x02	; 2
    200a:	31 05       	cpc	r19, r1
    200c:	a9 f1       	breq	.+106    	; 0x2078 <DIO_u8setPinValue+0xe0>
    200e:	8f 81       	ldd	r24, Y+7	; 0x07
    2010:	98 85       	ldd	r25, Y+8	; 0x08
    2012:	83 30       	cpi	r24, 0x03	; 3
    2014:	91 05       	cpc	r25, r1
    2016:	09 f4       	brne	.+2      	; 0x201a <DIO_u8setPinValue+0x82>
    2018:	46 c0       	rjmp	.+140    	; 0x20a6 <DIO_u8setPinValue+0x10e>
    201a:	5c c0       	rjmp	.+184    	; 0x20d4 <DIO_u8setPinValue+0x13c>
			{
			case PORT_A : CLR_BIT(DIOA->PORT,Copy_u8pin);break;
    201c:	a9 e3       	ldi	r26, 0x39	; 57
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e9 e3       	ldi	r30, 0x39	; 57
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	48 2f       	mov	r20, r24
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	02 2e       	mov	r0, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <DIO_u8setPinValue+0xa2>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	0a 94       	dec	r0
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <DIO_u8setPinValue+0x9e>
    203e:	80 95       	com	r24
    2040:	84 23       	and	r24, r20
    2042:	12 96       	adiw	r26, 0x02	; 2
    2044:	8c 93       	st	X, r24
    2046:	12 97       	sbiw	r26, 0x02	; 2
    2048:	c8 c0       	rjmp	.+400    	; 0x21da <DIO_u8setPinValue+0x242>
			case PORT_B : CLR_BIT(DIOB->PORT,Copy_u8pin);break;
    204a:	a6 e3       	ldi	r26, 0x36	; 54
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e6 e3       	ldi	r30, 0x36	; 54
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	48 2f       	mov	r20, r24
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	02 2e       	mov	r0, r18
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <DIO_u8setPinValue+0xd0>
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	0a 94       	dec	r0
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <DIO_u8setPinValue+0xcc>
    206c:	80 95       	com	r24
    206e:	84 23       	and	r24, r20
    2070:	12 96       	adiw	r26, 0x02	; 2
    2072:	8c 93       	st	X, r24
    2074:	12 97       	sbiw	r26, 0x02	; 2
    2076:	b1 c0       	rjmp	.+354    	; 0x21da <DIO_u8setPinValue+0x242>
			case PORT_C : CLR_BIT(DIOC->PORT,Copy_u8pin);break;
    2078:	a3 e3       	ldi	r26, 0x33	; 51
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e3 e3       	ldi	r30, 0x33	; 51
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	82 81       	ldd	r24, Z+2	; 0x02
    2082:	48 2f       	mov	r20, r24
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	28 2f       	mov	r18, r24
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	02 2e       	mov	r0, r18
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <DIO_u8setPinValue+0xfe>
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	0a 94       	dec	r0
    2098:	e2 f7       	brpl	.-8      	; 0x2092 <DIO_u8setPinValue+0xfa>
    209a:	80 95       	com	r24
    209c:	84 23       	and	r24, r20
    209e:	12 96       	adiw	r26, 0x02	; 2
    20a0:	8c 93       	st	X, r24
    20a2:	12 97       	sbiw	r26, 0x02	; 2
    20a4:	9a c0       	rjmp	.+308    	; 0x21da <DIO_u8setPinValue+0x242>
			case PORT_D : CLR_BIT(DIOD->PORT,Copy_u8pin);break;
    20a6:	a0 e3       	ldi	r26, 0x30	; 48
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e0 e3       	ldi	r30, 0x30	; 48
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	48 2f       	mov	r20, r24
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 2e       	mov	r0, r18
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <DIO_u8setPinValue+0x12c>
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	0a 94       	dec	r0
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <DIO_u8setPinValue+0x128>
    20c8:	80 95       	com	r24
    20ca:	84 23       	and	r24, r20
    20cc:	12 96       	adiw	r26, 0x02	; 2
    20ce:	8c 93       	st	X, r24
    20d0:	12 97       	sbiw	r26, 0x02	; 2
    20d2:	83 c0       	rjmp	.+262    	; 0x21da <DIO_u8setPinValue+0x242>
			default : Local_u8errStatus = RT_NOK;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	80 c0       	rjmp	.+256    	; 0x21da <DIO_u8setPinValue+0x242>
			}
			break;
			case HIGH :
				switch(Copy_u8port)
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	3e 83       	std	Y+6, r19	; 0x06
    20e2:	2d 83       	std	Y+5, r18	; 0x05
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	9e 81       	ldd	r25, Y+6	; 0x06
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	91 05       	cpc	r25, r1
    20ec:	61 f1       	breq	.+88     	; 0x2146 <DIO_u8setPinValue+0x1ae>
    20ee:	2d 81       	ldd	r18, Y+5	; 0x05
    20f0:	3e 81       	ldd	r19, Y+6	; 0x06
    20f2:	22 30       	cpi	r18, 0x02	; 2
    20f4:	31 05       	cpc	r19, r1
    20f6:	2c f4       	brge	.+10     	; 0x2102 <DIO_u8setPinValue+0x16a>
    20f8:	8d 81       	ldd	r24, Y+5	; 0x05
    20fa:	9e 81       	ldd	r25, Y+6	; 0x06
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f0       	breq	.+26     	; 0x211a <DIO_u8setPinValue+0x182>
    2100:	64 c0       	rjmp	.+200    	; 0x21ca <DIO_u8setPinValue+0x232>
    2102:	2d 81       	ldd	r18, Y+5	; 0x05
    2104:	3e 81       	ldd	r19, Y+6	; 0x06
    2106:	22 30       	cpi	r18, 0x02	; 2
    2108:	31 05       	cpc	r19, r1
    210a:	99 f1       	breq	.+102    	; 0x2172 <DIO_u8setPinValue+0x1da>
    210c:	8d 81       	ldd	r24, Y+5	; 0x05
    210e:	9e 81       	ldd	r25, Y+6	; 0x06
    2110:	83 30       	cpi	r24, 0x03	; 3
    2112:	91 05       	cpc	r25, r1
    2114:	09 f4       	brne	.+2      	; 0x2118 <DIO_u8setPinValue+0x180>
    2116:	43 c0       	rjmp	.+134    	; 0x219e <DIO_u8setPinValue+0x206>
    2118:	58 c0       	rjmp	.+176    	; 0x21ca <DIO_u8setPinValue+0x232>
				{
				case PORT_A : SET_BIT(DIOA->PORT,Copy_u8pin);break;
    211a:	a9 e3       	ldi	r26, 0x39	; 57
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e9 e3       	ldi	r30, 0x39	; 57
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	48 2f       	mov	r20, r24
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	02 2e       	mov	r0, r18
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <DIO_u8setPinValue+0x1a0>
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	0a 94       	dec	r0
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <DIO_u8setPinValue+0x19c>
    213c:	84 2b       	or	r24, r20
    213e:	12 96       	adiw	r26, 0x02	; 2
    2140:	8c 93       	st	X, r24
    2142:	12 97       	sbiw	r26, 0x02	; 2
    2144:	4a c0       	rjmp	.+148    	; 0x21da <DIO_u8setPinValue+0x242>
				case PORT_B : SET_BIT(DIOB->PORT,Copy_u8pin);break;
    2146:	a6 e3       	ldi	r26, 0x36	; 54
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e6 e3       	ldi	r30, 0x36	; 54
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	48 2f       	mov	r20, r24
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	02 2e       	mov	r0, r18
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <DIO_u8setPinValue+0x1cc>
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	0a 94       	dec	r0
    2166:	e2 f7       	brpl	.-8      	; 0x2160 <DIO_u8setPinValue+0x1c8>
    2168:	84 2b       	or	r24, r20
    216a:	12 96       	adiw	r26, 0x02	; 2
    216c:	8c 93       	st	X, r24
    216e:	12 97       	sbiw	r26, 0x02	; 2
    2170:	34 c0       	rjmp	.+104    	; 0x21da <DIO_u8setPinValue+0x242>
				case PORT_C : SET_BIT(DIOC->PORT,Copy_u8pin);break;
    2172:	a3 e3       	ldi	r26, 0x33	; 51
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e3 e3       	ldi	r30, 0x33	; 51
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	48 2f       	mov	r20, r24
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	02 2e       	mov	r0, r18
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <DIO_u8setPinValue+0x1f8>
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	0a 94       	dec	r0
    2192:	e2 f7       	brpl	.-8      	; 0x218c <DIO_u8setPinValue+0x1f4>
    2194:	84 2b       	or	r24, r20
    2196:	12 96       	adiw	r26, 0x02	; 2
    2198:	8c 93       	st	X, r24
    219a:	12 97       	sbiw	r26, 0x02	; 2
    219c:	1e c0       	rjmp	.+60     	; 0x21da <DIO_u8setPinValue+0x242>
				case PORT_D : SET_BIT(DIOD->PORT,Copy_u8pin);break;
    219e:	a0 e3       	ldi	r26, 0x30	; 48
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e0 e3       	ldi	r30, 0x30	; 48
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	48 2f       	mov	r20, r24
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	28 2f       	mov	r18, r24
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	02 2e       	mov	r0, r18
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <DIO_u8setPinValue+0x224>
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	0a 94       	dec	r0
    21be:	e2 f7       	brpl	.-8      	; 0x21b8 <DIO_u8setPinValue+0x220>
    21c0:	84 2b       	or	r24, r20
    21c2:	12 96       	adiw	r26, 0x02	; 2
    21c4:	8c 93       	st	X, r24
    21c6:	12 97       	sbiw	r26, 0x02	; 2
    21c8:	08 c0       	rjmp	.+16     	; 0x21da <DIO_u8setPinValue+0x242>
				default : Local_u8errStatus = RT_NOK;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	05 c0       	rjmp	.+10     	; 0x21da <DIO_u8setPinValue+0x242>
				}
				break;
				default : Local_u8errStatus = RT_NOK;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <DIO_u8setPinValue+0x242>
		}

	}
	else
	{
		Local_u8errStatus = RT_NOK;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    21da:	89 81       	ldd	r24, Y+1	; 0x01
}
    21dc:	2a 96       	adiw	r28, 0x0a	; 10
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <DIO_u8togglePinValue>:
u8 DIO_u8togglePinValue(u8 Copy_u8port, u8 Copy_u8pin)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <DIO_u8togglePinValue+0x6>
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <DIO_u8togglePinValue+0x8>
    21f6:	0f 92       	push	r0
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	8a 83       	std	Y+2, r24	; 0x02
    21fe:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8errStatus = RT_OK;
    2200:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin <=PIN_7)
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	88 30       	cpi	r24, 0x08	; 8
    2206:	08 f0       	brcs	.+2      	; 0x220a <DIO_u8togglePinValue+0x1c>
    2208:	7b c0       	rjmp	.+246    	; 0x2300 <DIO_u8togglePinValue+0x112>
	{

		switch(Copy_u8port)
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	3d 83       	std	Y+5, r19	; 0x05
    2212:	2c 83       	std	Y+4, r18	; 0x04
    2214:	8c 81       	ldd	r24, Y+4	; 0x04
    2216:	9d 81       	ldd	r25, Y+5	; 0x05
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	91 05       	cpc	r25, r1
    221c:	61 f1       	breq	.+88     	; 0x2276 <DIO_u8togglePinValue+0x88>
    221e:	2c 81       	ldd	r18, Y+4	; 0x04
    2220:	3d 81       	ldd	r19, Y+5	; 0x05
    2222:	22 30       	cpi	r18, 0x02	; 2
    2224:	31 05       	cpc	r19, r1
    2226:	2c f4       	brge	.+10     	; 0x2232 <DIO_u8togglePinValue+0x44>
    2228:	8c 81       	ldd	r24, Y+4	; 0x04
    222a:	9d 81       	ldd	r25, Y+5	; 0x05
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	69 f0       	breq	.+26     	; 0x224a <DIO_u8togglePinValue+0x5c>
    2230:	64 c0       	rjmp	.+200    	; 0x22fa <DIO_u8togglePinValue+0x10c>
    2232:	2c 81       	ldd	r18, Y+4	; 0x04
    2234:	3d 81       	ldd	r19, Y+5	; 0x05
    2236:	22 30       	cpi	r18, 0x02	; 2
    2238:	31 05       	cpc	r19, r1
    223a:	99 f1       	breq	.+102    	; 0x22a2 <DIO_u8togglePinValue+0xb4>
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	9d 81       	ldd	r25, Y+5	; 0x05
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	91 05       	cpc	r25, r1
    2244:	09 f4       	brne	.+2      	; 0x2248 <DIO_u8togglePinValue+0x5a>
    2246:	43 c0       	rjmp	.+134    	; 0x22ce <DIO_u8togglePinValue+0xe0>
    2248:	58 c0       	rjmp	.+176    	; 0x22fa <DIO_u8togglePinValue+0x10c>
		{
		case PORT_A : TOG_BIT(DIOA->PORT,Copy_u8pin);break;
    224a:	a9 e3       	ldi	r26, 0x39	; 57
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e9 e3       	ldi	r30, 0x39	; 57
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	48 2f       	mov	r20, r24
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	02 2e       	mov	r0, r18
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <DIO_u8togglePinValue+0x7a>
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	0a 94       	dec	r0
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <DIO_u8togglePinValue+0x76>
    226c:	84 27       	eor	r24, r20
    226e:	12 96       	adiw	r26, 0x02	; 2
    2270:	8c 93       	st	X, r24
    2272:	12 97       	sbiw	r26, 0x02	; 2
    2274:	47 c0       	rjmp	.+142    	; 0x2304 <DIO_u8togglePinValue+0x116>
		case PORT_B : TOG_BIT(DIOB->PORT,Copy_u8pin);break;
    2276:	a6 e3       	ldi	r26, 0x36	; 54
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e6 e3       	ldi	r30, 0x36	; 54
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	48 2f       	mov	r20, r24
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	02 2e       	mov	r0, r18
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <DIO_u8togglePinValue+0xa6>
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	0a 94       	dec	r0
    2296:	e2 f7       	brpl	.-8      	; 0x2290 <DIO_u8togglePinValue+0xa2>
    2298:	84 27       	eor	r24, r20
    229a:	12 96       	adiw	r26, 0x02	; 2
    229c:	8c 93       	st	X, r24
    229e:	12 97       	sbiw	r26, 0x02	; 2
    22a0:	31 c0       	rjmp	.+98     	; 0x2304 <DIO_u8togglePinValue+0x116>
		case PORT_C : TOG_BIT(DIOC->PORT,Copy_u8pin);break;
    22a2:	a3 e3       	ldi	r26, 0x33	; 51
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e3 e3       	ldi	r30, 0x33	; 51
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	48 2f       	mov	r20, r24
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 2e       	mov	r0, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <DIO_u8togglePinValue+0xd2>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <DIO_u8togglePinValue+0xce>
    22c4:	84 27       	eor	r24, r20
    22c6:	12 96       	adiw	r26, 0x02	; 2
    22c8:	8c 93       	st	X, r24
    22ca:	12 97       	sbiw	r26, 0x02	; 2
    22cc:	1b c0       	rjmp	.+54     	; 0x2304 <DIO_u8togglePinValue+0x116>
		case PORT_D : TOG_BIT(DIOD->PORT,Copy_u8pin);break;
    22ce:	a0 e3       	ldi	r26, 0x30	; 48
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e0 e3       	ldi	r30, 0x30	; 48
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	48 2f       	mov	r20, r24
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	28 2f       	mov	r18, r24
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	02 2e       	mov	r0, r18
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <DIO_u8togglePinValue+0xfe>
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	0a 94       	dec	r0
    22ee:	e2 f7       	brpl	.-8      	; 0x22e8 <DIO_u8togglePinValue+0xfa>
    22f0:	84 27       	eor	r24, r20
    22f2:	12 96       	adiw	r26, 0x02	; 2
    22f4:	8c 93       	st	X, r24
    22f6:	12 97       	sbiw	r26, 0x02	; 2
    22f8:	05 c0       	rjmp	.+10     	; 0x2304 <DIO_u8togglePinValue+0x116>
		default : Local_u8errStatus = RT_NOK;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <DIO_u8togglePinValue+0x116>
		}
	}

	else
	{
		Local_u8errStatus = RT_NOK;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    2304:	89 81       	ldd	r24, Y+1	; 0x01

}
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <DIO_u8getPinValue>:
u8 DIO_u8getPinValue(u8 Copy_u8port, u8 Copy_u8pin ,u8 * Copy_u8pValue)
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	27 97       	sbiw	r28, 0x07	; 7
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	8a 83       	std	Y+2, r24	; 0x02
    232c:	6b 83       	std	Y+3, r22	; 0x03
    232e:	5d 83       	std	Y+5, r21	; 0x05
    2330:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    2332:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pValue != NULL)
    2334:	8c 81       	ldd	r24, Y+4	; 0x04
    2336:	9d 81       	ldd	r25, Y+5	; 0x05
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	09 f4       	brne	.+2      	; 0x233e <DIO_u8getPinValue+0x28>
    233c:	7b c0       	rjmp	.+246    	; 0x2434 <DIO_u8getPinValue+0x11e>
	{
		if(Copy_u8pin <=PIN_7)
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	88 30       	cpi	r24, 0x08	; 8
    2342:	08 f0       	brcs	.+2      	; 0x2346 <DIO_u8getPinValue+0x30>
    2344:	74 c0       	rjmp	.+232    	; 0x242e <DIO_u8getPinValue+0x118>
		{
			switch(Copy_u8port)
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	3f 83       	std	Y+7, r19	; 0x07
    234e:	2e 83       	std	Y+6, r18	; 0x06
    2350:	4e 81       	ldd	r20, Y+6	; 0x06
    2352:	5f 81       	ldd	r21, Y+7	; 0x07
    2354:	41 30       	cpi	r20, 0x01	; 1
    2356:	51 05       	cpc	r21, r1
    2358:	59 f1       	breq	.+86     	; 0x23b0 <DIO_u8getPinValue+0x9a>
    235a:	8e 81       	ldd	r24, Y+6	; 0x06
    235c:	9f 81       	ldd	r25, Y+7	; 0x07
    235e:	82 30       	cpi	r24, 0x02	; 2
    2360:	91 05       	cpc	r25, r1
    2362:	34 f4       	brge	.+12     	; 0x2370 <DIO_u8getPinValue+0x5a>
    2364:	2e 81       	ldd	r18, Y+6	; 0x06
    2366:	3f 81       	ldd	r19, Y+7	; 0x07
    2368:	21 15       	cp	r18, r1
    236a:	31 05       	cpc	r19, r1
    236c:	69 f0       	breq	.+26     	; 0x2388 <DIO_u8getPinValue+0x72>
    236e:	5c c0       	rjmp	.+184    	; 0x2428 <DIO_u8getPinValue+0x112>
    2370:	4e 81       	ldd	r20, Y+6	; 0x06
    2372:	5f 81       	ldd	r21, Y+7	; 0x07
    2374:	42 30       	cpi	r20, 0x02	; 2
    2376:	51 05       	cpc	r21, r1
    2378:	79 f1       	breq	.+94     	; 0x23d8 <DIO_u8getPinValue+0xc2>
    237a:	8e 81       	ldd	r24, Y+6	; 0x06
    237c:	9f 81       	ldd	r25, Y+7	; 0x07
    237e:	83 30       	cpi	r24, 0x03	; 3
    2380:	91 05       	cpc	r25, r1
    2382:	09 f4       	brne	.+2      	; 0x2386 <DIO_u8getPinValue+0x70>
    2384:	3d c0       	rjmp	.+122    	; 0x2400 <DIO_u8getPinValue+0xea>
    2386:	50 c0       	rjmp	.+160    	; 0x2428 <DIO_u8getPinValue+0x112>
			{
			case PORT_A :* Copy_u8pValue=GET_BIT(DIOA->PIN,Copy_u8pin);break ;
    2388:	e9 e3       	ldi	r30, 0x39	; 57
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a9 01       	movw	r20, r18
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <DIO_u8getPinValue+0x8a>
    239c:	55 95       	asr	r21
    239e:	47 95       	ror	r20
    23a0:	8a 95       	dec	r24
    23a2:	e2 f7       	brpl	.-8      	; 0x239c <DIO_u8getPinValue+0x86>
    23a4:	ca 01       	movw	r24, r20
    23a6:	81 70       	andi	r24, 0x01	; 1
    23a8:	ec 81       	ldd	r30, Y+4	; 0x04
    23aa:	fd 81       	ldd	r31, Y+5	; 0x05
    23ac:	80 83       	st	Z, r24
    23ae:	44 c0       	rjmp	.+136    	; 0x2438 <DIO_u8getPinValue+0x122>
			case PORT_B :* Copy_u8pValue=GET_BIT(DIOB->PIN,Copy_u8pin);break ;
    23b0:	e6 e3       	ldi	r30, 0x36	; 54
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	88 2f       	mov	r24, r24
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	a9 01       	movw	r20, r18
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <DIO_u8getPinValue+0xb2>
    23c4:	55 95       	asr	r21
    23c6:	47 95       	ror	r20
    23c8:	8a 95       	dec	r24
    23ca:	e2 f7       	brpl	.-8      	; 0x23c4 <DIO_u8getPinValue+0xae>
    23cc:	ca 01       	movw	r24, r20
    23ce:	81 70       	andi	r24, 0x01	; 1
    23d0:	ec 81       	ldd	r30, Y+4	; 0x04
    23d2:	fd 81       	ldd	r31, Y+5	; 0x05
    23d4:	80 83       	st	Z, r24
    23d6:	30 c0       	rjmp	.+96     	; 0x2438 <DIO_u8getPinValue+0x122>
			case PORT_C :* Copy_u8pValue=GET_BIT(DIOC->PIN,Copy_u8pin);break ;
    23d8:	e3 e3       	ldi	r30, 0x33	; 51
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	88 2f       	mov	r24, r24
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	a9 01       	movw	r20, r18
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <DIO_u8getPinValue+0xda>
    23ec:	55 95       	asr	r21
    23ee:	47 95       	ror	r20
    23f0:	8a 95       	dec	r24
    23f2:	e2 f7       	brpl	.-8      	; 0x23ec <DIO_u8getPinValue+0xd6>
    23f4:	ca 01       	movw	r24, r20
    23f6:	81 70       	andi	r24, 0x01	; 1
    23f8:	ec 81       	ldd	r30, Y+4	; 0x04
    23fa:	fd 81       	ldd	r31, Y+5	; 0x05
    23fc:	80 83       	st	Z, r24
    23fe:	1c c0       	rjmp	.+56     	; 0x2438 <DIO_u8getPinValue+0x122>
			case PORT_D :* Copy_u8pValue=GET_BIT(DIOD->PIN,Copy_u8pin);break ;
    2400:	e0 e3       	ldi	r30, 0x30	; 48
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	a9 01       	movw	r20, r18
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <DIO_u8getPinValue+0x102>
    2414:	55 95       	asr	r21
    2416:	47 95       	ror	r20
    2418:	8a 95       	dec	r24
    241a:	e2 f7       	brpl	.-8      	; 0x2414 <DIO_u8getPinValue+0xfe>
    241c:	ca 01       	movw	r24, r20
    241e:	81 70       	andi	r24, 0x01	; 1
    2420:	ec 81       	ldd	r30, Y+4	; 0x04
    2422:	fd 81       	ldd	r31, Y+5	; 0x05
    2424:	80 83       	st	Z, r24
    2426:	08 c0       	rjmp	.+16     	; 0x2438 <DIO_u8getPinValue+0x122>
			default : Local_u8errStatus = RT_NOK ;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	05 c0       	rjmp	.+10     	; 0x2438 <DIO_u8getPinValue+0x122>
			}
		}
		else
		{
			Local_u8errStatus = RT_NOK;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <DIO_u8getPinValue+0x122>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errStatus;
    2438:	89 81       	ldd	r24, Y+1	; 0x01
}
    243a:	27 96       	adiw	r28, 0x07	; 7
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <ADC_Init>:
#include"../DIO_V1/DIO_int.h"
#define RT_OK    (u8)   0
#define RT_NOK   (u8)   1

void ADC_Init(void)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
	/* Prescaler = 8 */
	SET_BIT(ADCS_REGA,0);
    2454:	a6 e2       	ldi	r26, 0x26	; 38
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e6 e2       	ldi	r30, 0x26	; 38
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	81 60       	ori	r24, 0x01	; 1
    2460:	8c 93       	st	X, r24
	SET_BIT(ADCS_REGA,1);
    2462:	a6 e2       	ldi	r26, 0x26	; 38
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e6 e2       	ldi	r30, 0x26	; 38
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	82 60       	ori	r24, 0x02	; 2
    246e:	8c 93       	st	X, r24
	CLR_BIT(ADCS_REGA,2);
    2470:	a6 e2       	ldi	r26, 0x26	; 38
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e6 e2       	ldi	r30, 0x26	; 38
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8b 7f       	andi	r24, 0xFB	; 251
    247c:	8c 93       	st	X, r24

	/* VREF = VCC */
	SET_BIT(ADMUX_REG,6);
    247e:	a7 e2       	ldi	r26, 0x27	; 39
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e7 e2       	ldi	r30, 0x27	; 39
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	80 64       	ori	r24, 0x40	; 64
    248a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,7);
    248c:	a7 e2       	ldi	r26, 0x27	; 39
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e7 e2       	ldi	r30, 0x27	; 39
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	8f 77       	andi	r24, 0x7F	; 127
    2498:	8c 93       	st	X, r24

	/* RESOLUTION = 10bit */
	CLR_BIT(ADMUX_REG,5);
    249a:	a7 e2       	ldi	r26, 0x27	; 39
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e7 e2       	ldi	r30, 0x27	; 39
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	8f 7d       	andi	r24, 0xDF	; 223
    24a6:	8c 93       	st	X, r24

	/* ADC ENABLE */
	SET_BIT(ADCS_REGA,7);
    24a8:	a6 e2       	ldi	r26, 0x26	; 38
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e6 e2       	ldi	r30, 0x26	; 38
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	80 68       	ori	r24, 0x80	; 128
    24b4:	8c 93       	st	X, r24
}
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <ADC_u16Channelread>:

u16 ADC_u16Channelread(u8 Copy_u8Channel)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	0f 92       	push	r0
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	89 83       	std	Y+1, r24	; 0x01
  // select the corresponding channel 0~7
  // ANDing with 7 will always keep the value
  // of Copy_u8Channel between 0 and 7
	ADMUX_REG &= 0b11100000;  // AND operation with 7 with ADMUX REG
    24c8:	a7 e2       	ldi	r26, 0x27	; 39
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e7 e2       	ldi	r30, 0x27	; 39
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	80 7e       	andi	r24, 0xE0	; 224
    24d4:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG |( Copy_u8Channel ); // clears the bottom 3 bits before ORing
    24d6:	a7 e2       	ldi	r26, 0x27	; 39
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e7 e2       	ldi	r30, 0x27	; 39
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	90 81       	ld	r25, Z
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	89 2b       	or	r24, r25
    24e4:	8c 93       	st	X, r24

  // start single convertion
  // write 1 to ADSC
	SET_BIT(ADCS_REGA,6);
    24e6:	a6 e2       	ldi	r26, 0x26	; 38
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e6 e2       	ldi	r30, 0x26	; 38
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	80 64       	ori	r24, 0x40	; 64
    24f2:	8c 93       	st	X, r24

  // wait for conversion to complete
  // ADSC becomes 0 again
  // till then, run loop continuously
  while(GET_BIT(ADCS_REGA,4)==0);
    24f4:	e6 e2       	ldi	r30, 0x26	; 38
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	82 95       	swap	r24
    24fc:	8f 70       	andi	r24, 0x0F	; 15
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	81 70       	andi	r24, 0x01	; 1
    2504:	90 70       	andi	r25, 0x00	; 0
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	a9 f3       	breq	.-22     	; 0x24f4 <ADC_u16Channelread+0x38>
	/* Clear the Flag*/
  SET_BIT(ADCS_REGA,4);
    250a:	a6 e2       	ldi	r26, 0x26	; 38
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e6 e2       	ldi	r30, 0x26	; 38
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	80 61       	ori	r24, 0x10	; 16
    2516:	8c 93       	st	X, r24
	/*return the value*/
  return ADC_REG;
    2518:	e4 e2       	ldi	r30, 0x24	; 36
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2520:	0f 90       	pop	r0
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <Motor_voidInit>:
#include "../../MCAL/DIO_V1/DIO_int.h"
#include "Motor_int.h"


void Motor_voidInit(void)
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
  DIO_u8setPinDirection(MOTOR_PORT,MOTOR_1_PIN_1,OUTPUT);
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
  DIO_u8setPinDirection(MOTOR_PORT,MOTOR_2_PIN_1,OUTPUT);
    253a:	82 e0       	ldi	r24, 0x02	; 2
    253c:	62 e0       	ldi	r22, 0x02	; 2
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>

}
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <Motor_voidFoward>:
void Motor_voidFoward(void)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
 DIO_u8setPinValue(MOTOR_PORT,MOTOR_1_PIN_1,HIGH);
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	61 e0       	ldi	r22, 0x01	; 1
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
 DIO_u8setPinValue(MOTOR_PORT,MOTOR_2_PIN_1,HIGH);
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	62 e0       	ldi	r22, 0x02	; 2
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
}
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <Motor_voidBackward>:
void Motor_voidBackward(void)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
 DIO_u8setPinValue(MOTOR_PORT,MOTOR_1_PIN_1,LOW);
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	61 e0       	ldi	r22, 0x01	; 1
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
 DIO_u8setPinValue(MOTOR_PORT,MOTOR_2_PIN_1,LOW);
    257e:	82 e0       	ldi	r24, 0x02	; 2
    2580:	62 e0       	ldi	r22, 0x02	; 2
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
}
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <Motor_voidLeftDir>:
void Motor_voidLeftDir(void)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
 DIO_u8setPinValue(MOTOR_PORT,MOTOR_1_PIN_1,HIGH);
    2596:	82 e0       	ldi	r24, 0x02	; 2
    2598:	61 e0       	ldi	r22, 0x01	; 1
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
 DIO_u8setPinValue(MOTOR_PORT,MOTOR_2_PIN_1,LOW);
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	62 e0       	ldi	r22, 0x02	; 2
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
}
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <Motor_voidRigthDir>:
void Motor_voidRigthDir(void)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
 DIO_u8setPinValue(MOTOR_PORT,MOTOR_1_PIN_1,LOW);
    25b8:	82 e0       	ldi	r24, 0x02	; 2
    25ba:	61 e0       	ldi	r22, 0x01	; 1
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
 DIO_u8setPinValue(MOTOR_PORT,MOTOR_2_PIN_1,HIGH);
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	62 e0       	ldi	r22, 0x02	; 2
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <Motor_voidStop>:
void Motor_voidStop(void)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
 DIO_u8setPinValue(MOTOR_PORT,MOTOR_1_PIN_1,LOW);
    25da:	82 e0       	ldi	r24, 0x02	; 2
    25dc:	61 e0       	ldi	r22, 0x01	; 1
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
 DIO_u8setPinValue(MOTOR_PORT,MOTOR_2_PIN_1,LOW);
    25e4:	82 e0       	ldi	r24, 0x02	; 2
    25e6:	62 e0       	ldi	r22, 0x02	; 2
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
}
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <LCD_4_BitvidInit>:
void LCD_8_BitvidwriteCharacter(u8 Copy_u8character);
void LCD_4_BitvidsendCommand(u8 Copy_u8command);
void LCD_4_BitvidwriteCharacter(u8 Copy_u8character);

void LCD_4_BitvidInit(void)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	e8 97       	sbiw	r28, 0x38	; 56
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPortDirection(LCD_DATA_PORT,HALF_INPUT_HALF_OUTPUT);
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	60 ef       	ldi	r22, 0xF0	; 240
    260c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_u8setPortDirection>
	DIO_u8setPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    261a:	82 e0       	ldi	r24, 0x02	; 2
    261c:	61 e0       	ldi	r22, 0x01	; 1
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    2624:	82 e0       	ldi	r24, 0x02	; 2
    2626:	62 e0       	ldi	r22, 0x02	; 2
    2628:	41 e0       	ldi	r20, 0x01	; 1
    262a:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	a0 e2       	ldi	r26, 0x20	; 32
    2634:	b2 e4       	ldi	r27, 0x42	; 66
    2636:	8d ab       	std	Y+53, r24	; 0x35
    2638:	9e ab       	std	Y+54, r25	; 0x36
    263a:	af ab       	std	Y+55, r26	; 0x37
    263c:	b8 af       	std	Y+56, r27	; 0x38
    263e:	6d a9       	ldd	r22, Y+53	; 0x35
    2640:	7e a9       	ldd	r23, Y+54	; 0x36
    2642:	8f a9       	ldd	r24, Y+55	; 0x37
    2644:	98 ad       	ldd	r25, Y+56	; 0x38
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4a ef       	ldi	r20, 0xFA	; 250
    264c:	54 e4       	ldi	r21, 0x44	; 68
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	89 ab       	std	Y+49, r24	; 0x31
    2658:	9a ab       	std	Y+50, r25	; 0x32
    265a:	ab ab       	std	Y+51, r26	; 0x33
    265c:	bc ab       	std	Y+52, r27	; 0x34
    265e:	69 a9       	ldd	r22, Y+49	; 0x31
    2660:	7a a9       	ldd	r23, Y+50	; 0x32
    2662:	8b a9       	ldd	r24, Y+51	; 0x33
    2664:	9c a9       	ldd	r25, Y+52	; 0x34
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e8       	ldi	r20, 0x80	; 128
    266c:	5f e3       	ldi	r21, 0x3F	; 63
    266e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2672:	88 23       	and	r24, r24
    2674:	2c f4       	brge	.+10     	; 0x2680 <LCD_4_BitvidInit+0x8c>
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	98 ab       	std	Y+48, r25	; 0x30
    267c:	8f a7       	std	Y+47, r24	; 0x2f
    267e:	3f c0       	rjmp	.+126    	; 0x26fe <LCD_4_BitvidInit+0x10a>
    2680:	69 a9       	ldd	r22, Y+49	; 0x31
    2682:	7a a9       	ldd	r23, Y+50	; 0x32
    2684:	8b a9       	ldd	r24, Y+51	; 0x33
    2686:	9c a9       	ldd	r25, Y+52	; 0x34
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	3f ef       	ldi	r19, 0xFF	; 255
    268c:	4f e7       	ldi	r20, 0x7F	; 127
    268e:	57 e4       	ldi	r21, 0x47	; 71
    2690:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2694:	18 16       	cp	r1, r24
    2696:	4c f5       	brge	.+82     	; 0x26ea <LCD_4_BitvidInit+0xf6>
    2698:	6d a9       	ldd	r22, Y+53	; 0x35
    269a:	7e a9       	ldd	r23, Y+54	; 0x36
    269c:	8f a9       	ldd	r24, Y+55	; 0x37
    269e:	98 ad       	ldd	r25, Y+56	; 0x38
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e2       	ldi	r20, 0x20	; 32
    26a6:	51 e4       	ldi	r21, 0x41	; 65
    26a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	98 ab       	std	Y+48, r25	; 0x30
    26be:	8f a7       	std	Y+47, r24	; 0x2f
    26c0:	0f c0       	rjmp	.+30     	; 0x26e0 <LCD_4_BitvidInit+0xec>
    26c2:	88 ec       	ldi	r24, 0xC8	; 200
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9e a7       	std	Y+46, r25	; 0x2e
    26c8:	8d a7       	std	Y+45, r24	; 0x2d
    26ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    26cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <LCD_4_BitvidInit+0xda>
    26d2:	9e a7       	std	Y+46, r25	; 0x2e
    26d4:	8d a7       	std	Y+45, r24	; 0x2d
    26d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d8:	98 a9       	ldd	r25, Y+48	; 0x30
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	98 ab       	std	Y+48, r25	; 0x30
    26de:	8f a7       	std	Y+47, r24	; 0x2f
    26e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e2:	98 a9       	ldd	r25, Y+48	; 0x30
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	69 f7       	brne	.-38     	; 0x26c2 <LCD_4_BitvidInit+0xce>
    26e8:	14 c0       	rjmp	.+40     	; 0x2712 <LCD_4_BitvidInit+0x11e>
    26ea:	69 a9       	ldd	r22, Y+49	; 0x31
    26ec:	7a a9       	ldd	r23, Y+50	; 0x32
    26ee:	8b a9       	ldd	r24, Y+51	; 0x33
    26f0:	9c a9       	ldd	r25, Y+52	; 0x34
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	98 ab       	std	Y+48, r25	; 0x30
    26fc:	8f a7       	std	Y+47, r24	; 0x2f
    26fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2700:	98 a9       	ldd	r25, Y+48	; 0x30
    2702:	9c a7       	std	Y+44, r25	; 0x2c
    2704:	8b a7       	std	Y+43, r24	; 0x2b
    2706:	8b a5       	ldd	r24, Y+43	; 0x2b
    2708:	9c a5       	ldd	r25, Y+44	; 0x2c
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_4_BitvidInit+0x116>
    270e:	9c a7       	std	Y+44, r25	; 0x2c
    2710:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_4_BitvidsendCommand(LCD_4_BIT_FUNCTION_SET_CMD_1);
    2712:	80 e2       	ldi	r24, 0x20	; 32
    2714:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_FUNCTION_SET_CMD_2);
    2718:	80 e2       	ldi	r24, 0x20	; 32
    271a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_FUNCTION_SET_CMD_3);
    271e:	80 ec       	ldi	r24, 0xC0	; 192
    2720:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_4_BitvidsendCommand>
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	a0 e8       	ldi	r26, 0x80	; 128
    272a:	bf e3       	ldi	r27, 0x3F	; 63
    272c:	8f a3       	std	Y+39, r24	; 0x27
    272e:	98 a7       	std	Y+40, r25	; 0x28
    2730:	a9 a7       	std	Y+41, r26	; 0x29
    2732:	ba a7       	std	Y+42, r27	; 0x2a
    2734:	6f a1       	ldd	r22, Y+39	; 0x27
    2736:	78 a5       	ldd	r23, Y+40	; 0x28
    2738:	89 a5       	ldd	r24, Y+41	; 0x29
    273a:	9a a5       	ldd	r25, Y+42	; 0x2a
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	4a ef       	ldi	r20, 0xFA	; 250
    2742:	54 e4       	ldi	r21, 0x44	; 68
    2744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	8b a3       	std	Y+35, r24	; 0x23
    274e:	9c a3       	std	Y+36, r25	; 0x24
    2750:	ad a3       	std	Y+37, r26	; 0x25
    2752:	be a3       	std	Y+38, r27	; 0x26
    2754:	6b a1       	ldd	r22, Y+35	; 0x23
    2756:	7c a1       	ldd	r23, Y+36	; 0x24
    2758:	8d a1       	ldd	r24, Y+37	; 0x25
    275a:	9e a1       	ldd	r25, Y+38	; 0x26
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e8       	ldi	r20, 0x80	; 128
    2762:	5f e3       	ldi	r21, 0x3F	; 63
    2764:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2768:	88 23       	and	r24, r24
    276a:	2c f4       	brge	.+10     	; 0x2776 <LCD_4_BitvidInit+0x182>
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	9a a3       	std	Y+34, r25	; 0x22
    2772:	89 a3       	std	Y+33, r24	; 0x21
    2774:	3f c0       	rjmp	.+126    	; 0x27f4 <LCD_4_BitvidInit+0x200>
    2776:	6b a1       	ldd	r22, Y+35	; 0x23
    2778:	7c a1       	ldd	r23, Y+36	; 0x24
    277a:	8d a1       	ldd	r24, Y+37	; 0x25
    277c:	9e a1       	ldd	r25, Y+38	; 0x26
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	3f ef       	ldi	r19, 0xFF	; 255
    2782:	4f e7       	ldi	r20, 0x7F	; 127
    2784:	57 e4       	ldi	r21, 0x47	; 71
    2786:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    278a:	18 16       	cp	r1, r24
    278c:	4c f5       	brge	.+82     	; 0x27e0 <LCD_4_BitvidInit+0x1ec>
    278e:	6f a1       	ldd	r22, Y+39	; 0x27
    2790:	78 a5       	ldd	r23, Y+40	; 0x28
    2792:	89 a5       	ldd	r24, Y+41	; 0x29
    2794:	9a a5       	ldd	r25, Y+42	; 0x2a
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e2       	ldi	r20, 0x20	; 32
    279c:	51 e4       	ldi	r21, 0x41	; 65
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	bc 01       	movw	r22, r24
    27a8:	cd 01       	movw	r24, r26
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	9a a3       	std	Y+34, r25	; 0x22
    27b4:	89 a3       	std	Y+33, r24	; 0x21
    27b6:	0f c0       	rjmp	.+30     	; 0x27d6 <LCD_4_BitvidInit+0x1e2>
    27b8:	88 ec       	ldi	r24, 0xC8	; 200
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	98 a3       	std	Y+32, r25	; 0x20
    27be:	8f 8f       	std	Y+31, r24	; 0x1f
    27c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27c2:	98 a1       	ldd	r25, Y+32	; 0x20
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <LCD_4_BitvidInit+0x1d0>
    27c8:	98 a3       	std	Y+32, r25	; 0x20
    27ca:	8f 8f       	std	Y+31, r24	; 0x1f
    27cc:	89 a1       	ldd	r24, Y+33	; 0x21
    27ce:	9a a1       	ldd	r25, Y+34	; 0x22
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	9a a3       	std	Y+34, r25	; 0x22
    27d4:	89 a3       	std	Y+33, r24	; 0x21
    27d6:	89 a1       	ldd	r24, Y+33	; 0x21
    27d8:	9a a1       	ldd	r25, Y+34	; 0x22
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	69 f7       	brne	.-38     	; 0x27b8 <LCD_4_BitvidInit+0x1c4>
    27de:	14 c0       	rjmp	.+40     	; 0x2808 <LCD_4_BitvidInit+0x214>
    27e0:	6b a1       	ldd	r22, Y+35	; 0x23
    27e2:	7c a1       	ldd	r23, Y+36	; 0x24
    27e4:	8d a1       	ldd	r24, Y+37	; 0x25
    27e6:	9e a1       	ldd	r25, Y+38	; 0x26
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9a a3       	std	Y+34, r25	; 0x22
    27f2:	89 a3       	std	Y+33, r24	; 0x21
    27f4:	89 a1       	ldd	r24, Y+33	; 0x21
    27f6:	9a a1       	ldd	r25, Y+34	; 0x22
    27f8:	9e 8f       	std	Y+30, r25	; 0x1e
    27fa:	8d 8f       	std	Y+29, r24	; 0x1d
    27fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <LCD_4_BitvidInit+0x20c>
    2804:	9e 8f       	std	Y+30, r25	; 0x1e
    2806:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_ON_CMD_1);
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_ON_CMD_2);
    280e:	80 ec       	ldi	r24, 0xC0	; 192
    2810:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_4_BitvidsendCommand>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e8       	ldi	r26, 0x80	; 128
    281a:	bf e3       	ldi	r27, 0x3F	; 63
    281c:	89 8f       	std	Y+25, r24	; 0x19
    281e:	9a 8f       	std	Y+26, r25	; 0x1a
    2820:	ab 8f       	std	Y+27, r26	; 0x1b
    2822:	bc 8f       	std	Y+28, r27	; 0x1c
    2824:	69 8d       	ldd	r22, Y+25	; 0x19
    2826:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2828:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a ef       	ldi	r20, 0xFA	; 250
    2832:	54 e4       	ldi	r21, 0x44	; 68
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	8d 8b       	std	Y+21, r24	; 0x15
    283e:	9e 8b       	std	Y+22, r25	; 0x16
    2840:	af 8b       	std	Y+23, r26	; 0x17
    2842:	b8 8f       	std	Y+24, r27	; 0x18
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <LCD_4_BitvidInit+0x272>
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9c 8b       	std	Y+20, r25	; 0x14
    2862:	8b 8b       	std	Y+19, r24	; 0x13
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <LCD_4_BitvidInit+0x2f0>
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <LCD_4_BitvidInit+0x2dc>
    287e:	69 8d       	ldd	r22, Y+25	; 0x19
    2880:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2882:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2884:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9c 8b       	std	Y+20, r25	; 0x14
    28a4:	8b 8b       	std	Y+19, r24	; 0x13
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <LCD_4_BitvidInit+0x2d2>
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9a 8b       	std	Y+18, r25	; 0x12
    28ae:	89 8b       	std	Y+17, r24	; 0x11
    28b0:	89 89       	ldd	r24, Y+17	; 0x11
    28b2:	9a 89       	ldd	r25, Y+18	; 0x12
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <LCD_4_BitvidInit+0x2c0>
    28b8:	9a 8b       	std	Y+18, r25	; 0x12
    28ba:	89 8b       	std	Y+17, r24	; 0x11
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	9c 8b       	std	Y+20, r25	; 0x14
    28c4:	8b 8b       	std	Y+19, r24	; 0x13
    28c6:	8b 89       	ldd	r24, Y+19	; 0x13
    28c8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <LCD_4_BitvidInit+0x2b4>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <LCD_4_BitvidInit+0x304>
    28d0:	6d 89       	ldd	r22, Y+21	; 0x15
    28d2:	7e 89       	ldd	r23, Y+22	; 0x16
    28d4:	8f 89       	ldd	r24, Y+23	; 0x17
    28d6:	98 8d       	ldd	r25, Y+24	; 0x18
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9c 8b       	std	Y+20, r25	; 0x14
    28e2:	8b 8b       	std	Y+19, r24	; 0x13
    28e4:	8b 89       	ldd	r24, Y+19	; 0x13
    28e6:	9c 89       	ldd	r25, Y+20	; 0x14
    28e8:	98 8b       	std	Y+16, r25	; 0x10
    28ea:	8f 87       	std	Y+15, r24	; 0x0f
    28ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ee:	98 89       	ldd	r25, Y+16	; 0x10
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <LCD_4_BitvidInit+0x2fc>
    28f4:	98 8b       	std	Y+16, r25	; 0x10
    28f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_CLEAR_CMD_1);
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_CLEAR_CMD_2);
    28fe:	80 e1       	ldi	r24, 0x10	; 16
    2900:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_4_BitvidsendCommand>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e4       	ldi	r27, 0x40	; 64
    290c:	8b 87       	std	Y+11, r24	; 0x0b
    290e:	9c 87       	std	Y+12, r25	; 0x0c
    2910:	ad 87       	std	Y+13, r26	; 0x0d
    2912:	be 87       	std	Y+14, r27	; 0x0e
    2914:	6b 85       	ldd	r22, Y+11	; 0x0b
    2916:	7c 85       	ldd	r23, Y+12	; 0x0c
    2918:	8d 85       	ldd	r24, Y+13	; 0x0d
    291a:	9e 85       	ldd	r25, Y+14	; 0x0e
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	4a ef       	ldi	r20, 0xFA	; 250
    2922:	54 e4       	ldi	r21, 0x44	; 68
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	8f 83       	std	Y+7, r24	; 0x07
    292e:	98 87       	std	Y+8, r25	; 0x08
    2930:	a9 87       	std	Y+9, r26	; 0x09
    2932:	ba 87       	std	Y+10, r27	; 0x0a
    2934:	6f 81       	ldd	r22, Y+7	; 0x07
    2936:	78 85       	ldd	r23, Y+8	; 0x08
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	9a 85       	ldd	r25, Y+10	; 0x0a
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e8       	ldi	r20, 0x80	; 128
    2942:	5f e3       	ldi	r21, 0x3F	; 63
    2944:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2948:	88 23       	and	r24, r24
    294a:	2c f4       	brge	.+10     	; 0x2956 <LCD_4_BitvidInit+0x362>
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	9e 83       	std	Y+6, r25	; 0x06
    2952:	8d 83       	std	Y+5, r24	; 0x05
    2954:	3f c0       	rjmp	.+126    	; 0x29d4 <LCD_4_BitvidInit+0x3e0>
    2956:	6f 81       	ldd	r22, Y+7	; 0x07
    2958:	78 85       	ldd	r23, Y+8	; 0x08
    295a:	89 85       	ldd	r24, Y+9	; 0x09
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	3f ef       	ldi	r19, 0xFF	; 255
    2962:	4f e7       	ldi	r20, 0x7F	; 127
    2964:	57 e4       	ldi	r21, 0x47	; 71
    2966:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    296a:	18 16       	cp	r1, r24
    296c:	4c f5       	brge	.+82     	; 0x29c0 <LCD_4_BitvidInit+0x3cc>
    296e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2970:	7c 85       	ldd	r23, Y+12	; 0x0c
    2972:	8d 85       	ldd	r24, Y+13	; 0x0d
    2974:	9e 85       	ldd	r25, Y+14	; 0x0e
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e2       	ldi	r20, 0x20	; 32
    297c:	51 e4       	ldi	r21, 0x41	; 65
    297e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	bc 01       	movw	r22, r24
    2988:	cd 01       	movw	r24, r26
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9e 83       	std	Y+6, r25	; 0x06
    2994:	8d 83       	std	Y+5, r24	; 0x05
    2996:	0f c0       	rjmp	.+30     	; 0x29b6 <LCD_4_BitvidInit+0x3c2>
    2998:	88 ec       	ldi	r24, 0xC8	; 200
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9c 83       	std	Y+4, r25	; 0x04
    299e:	8b 83       	std	Y+3, r24	; 0x03
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	9c 81       	ldd	r25, Y+4	; 0x04
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <LCD_4_BitvidInit+0x3b0>
    29a8:	9c 83       	std	Y+4, r25	; 0x04
    29aa:	8b 83       	std	Y+3, r24	; 0x03
    29ac:	8d 81       	ldd	r24, Y+5	; 0x05
    29ae:	9e 81       	ldd	r25, Y+6	; 0x06
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	9e 83       	std	Y+6, r25	; 0x06
    29b4:	8d 83       	std	Y+5, r24	; 0x05
    29b6:	8d 81       	ldd	r24, Y+5	; 0x05
    29b8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	69 f7       	brne	.-38     	; 0x2998 <LCD_4_BitvidInit+0x3a4>
    29be:	14 c0       	rjmp	.+40     	; 0x29e8 <LCD_4_BitvidInit+0x3f4>
    29c0:	6f 81       	ldd	r22, Y+7	; 0x07
    29c2:	78 85       	ldd	r23, Y+8	; 0x08
    29c4:	89 85       	ldd	r24, Y+9	; 0x09
    29c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9e 83       	std	Y+6, r25	; 0x06
    29d2:	8d 83       	std	Y+5, r24	; 0x05
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	9e 81       	ldd	r25, Y+6	; 0x06
    29d8:	9a 83       	std	Y+2, r25	; 0x02
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	9a 81       	ldd	r25, Y+2	; 0x02
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_4_BitvidInit+0x3ec>
    29e4:	9a 83       	std	Y+2, r25	; 0x02
    29e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_4_BitvidsendCommand(LCD_4_BIT_ENTRY_MODE_SET_CMD_1);
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_ENTRY_MODE_SET_CMD_2);
    29ee:	80 e6       	ldi	r24, 0x60	; 96
    29f0:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_4_BitvidsendCommand>
}
    29f4:	e8 96       	adiw	r28, 0x38	; 56
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <LCD_4_BitvidsendCommand>:
void LCD_4_BitvidsendCommand(u8 Copy_u8command)
{
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	e9 97       	sbiw	r28, 0x39	; 57
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    2a1c:	82 e0       	ldi	r24, 0x02	; 2
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2a26:	82 e0       	ldi	r24, 0x02	; 2
    2a28:	61 e0       	ldi	r22, 0x01	; 1
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8command) & (HALF_LOW_HALF_HIGH)));
    2a30:	89 ad       	ldd	r24, Y+57	; 0x39
    2a32:	98 2f       	mov	r25, r24
    2a34:	90 7f       	andi	r25, 0xF0	; 240
    2a36:	83 e0       	ldi	r24, 0x03	; 3
    2a38:	69 2f       	mov	r22, r25
    2a3a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2a3e:	82 e0       	ldi	r24, 0x02	; 2
    2a40:	62 e0       	ldi	r22, 0x02	; 2
    2a42:	41 e0       	ldi	r20, 0x01	; 1
    2a44:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	a0 e0       	ldi	r26, 0x00	; 0
    2a4e:	b0 e4       	ldi	r27, 0x40	; 64
    2a50:	8d ab       	std	Y+53, r24	; 0x35
    2a52:	9e ab       	std	Y+54, r25	; 0x36
    2a54:	af ab       	std	Y+55, r26	; 0x37
    2a56:	b8 af       	std	Y+56, r27	; 0x38
    2a58:	6d a9       	ldd	r22, Y+53	; 0x35
    2a5a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a5c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a5e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	4a ef       	ldi	r20, 0xFA	; 250
    2a66:	54 e4       	ldi	r21, 0x44	; 68
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	89 ab       	std	Y+49, r24	; 0x31
    2a72:	9a ab       	std	Y+50, r25	; 0x32
    2a74:	ab ab       	std	Y+51, r26	; 0x33
    2a76:	bc ab       	std	Y+52, r27	; 0x34
    2a78:	69 a9       	ldd	r22, Y+49	; 0x31
    2a7a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a7e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e8       	ldi	r20, 0x80	; 128
    2a86:	5f e3       	ldi	r21, 0x3F	; 63
    2a88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a8c:	88 23       	and	r24, r24
    2a8e:	2c f4       	brge	.+10     	; 0x2a9a <LCD_4_BitvidsendCommand+0x94>
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	98 ab       	std	Y+48, r25	; 0x30
    2a96:	8f a7       	std	Y+47, r24	; 0x2f
    2a98:	3f c0       	rjmp	.+126    	; 0x2b18 <LCD_4_BitvidsendCommand+0x112>
    2a9a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a9c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a9e:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa0:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	3f ef       	ldi	r19, 0xFF	; 255
    2aa6:	4f e7       	ldi	r20, 0x7F	; 127
    2aa8:	57 e4       	ldi	r21, 0x47	; 71
    2aaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aae:	18 16       	cp	r1, r24
    2ab0:	4c f5       	brge	.+82     	; 0x2b04 <LCD_4_BitvidsendCommand+0xfe>
    2ab2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ab4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ab8:	98 ad       	ldd	r25, Y+56	; 0x38
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e2       	ldi	r20, 0x20	; 32
    2ac0:	51 e4       	ldi	r21, 0x41	; 65
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	98 ab       	std	Y+48, r25	; 0x30
    2ad8:	8f a7       	std	Y+47, r24	; 0x2f
    2ada:	0f c0       	rjmp	.+30     	; 0x2afa <LCD_4_BitvidsendCommand+0xf4>
    2adc:	88 ec       	ldi	r24, 0xC8	; 200
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9e a7       	std	Y+46, r25	; 0x2e
    2ae2:	8d a7       	std	Y+45, r24	; 0x2d
    2ae4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ae6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <LCD_4_BitvidsendCommand+0xe2>
    2aec:	9e a7       	std	Y+46, r25	; 0x2e
    2aee:	8d a7       	std	Y+45, r24	; 0x2d
    2af0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af2:	98 a9       	ldd	r25, Y+48	; 0x30
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	98 ab       	std	Y+48, r25	; 0x30
    2af8:	8f a7       	std	Y+47, r24	; 0x2f
    2afa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2afc:	98 a9       	ldd	r25, Y+48	; 0x30
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	69 f7       	brne	.-38     	; 0x2adc <LCD_4_BitvidsendCommand+0xd6>
    2b02:	14 c0       	rjmp	.+40     	; 0x2b2c <LCD_4_BitvidsendCommand+0x126>
    2b04:	69 a9       	ldd	r22, Y+49	; 0x31
    2b06:	7a a9       	ldd	r23, Y+50	; 0x32
    2b08:	8b a9       	ldd	r24, Y+51	; 0x33
    2b0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	98 ab       	std	Y+48, r25	; 0x30
    2b16:	8f a7       	std	Y+47, r24	; 0x2f
    2b18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1c:	9c a7       	std	Y+44, r25	; 0x2c
    2b1e:	8b a7       	std	Y+43, r24	; 0x2b
    2b20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <LCD_4_BitvidsendCommand+0x11e>
    2b28:	9c a7       	std	Y+44, r25	; 0x2c
    2b2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2b2c:	82 e0       	ldi	r24, 0x02	; 2
    2b2e:	62 e0       	ldi	r22, 0x02	; 2
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	a0 e0       	ldi	r26, 0x00	; 0
    2b3c:	b0 e4       	ldi	r27, 0x40	; 64
    2b3e:	8f a3       	std	Y+39, r24	; 0x27
    2b40:	98 a7       	std	Y+40, r25	; 0x28
    2b42:	a9 a7       	std	Y+41, r26	; 0x29
    2b44:	ba a7       	std	Y+42, r27	; 0x2a
    2b46:	6f a1       	ldd	r22, Y+39	; 0x27
    2b48:	78 a5       	ldd	r23, Y+40	; 0x28
    2b4a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4a ef       	ldi	r20, 0xFA	; 250
    2b54:	54 e4       	ldi	r21, 0x44	; 68
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	8b a3       	std	Y+35, r24	; 0x23
    2b60:	9c a3       	std	Y+36, r25	; 0x24
    2b62:	ad a3       	std	Y+37, r26	; 0x25
    2b64:	be a3       	std	Y+38, r27	; 0x26
    2b66:	6b a1       	ldd	r22, Y+35	; 0x23
    2b68:	7c a1       	ldd	r23, Y+36	; 0x24
    2b6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e8       	ldi	r20, 0x80	; 128
    2b74:	5f e3       	ldi	r21, 0x3F	; 63
    2b76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b7a:	88 23       	and	r24, r24
    2b7c:	2c f4       	brge	.+10     	; 0x2b88 <LCD_4_BitvidsendCommand+0x182>
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	9a a3       	std	Y+34, r25	; 0x22
    2b84:	89 a3       	std	Y+33, r24	; 0x21
    2b86:	3f c0       	rjmp	.+126    	; 0x2c06 <LCD_4_BitvidsendCommand+0x200>
    2b88:	6b a1       	ldd	r22, Y+35	; 0x23
    2b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	3f ef       	ldi	r19, 0xFF	; 255
    2b94:	4f e7       	ldi	r20, 0x7F	; 127
    2b96:	57 e4       	ldi	r21, 0x47	; 71
    2b98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b9c:	18 16       	cp	r1, r24
    2b9e:	4c f5       	brge	.+82     	; 0x2bf2 <LCD_4_BitvidsendCommand+0x1ec>
    2ba0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ba2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ba4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e2       	ldi	r20, 0x20	; 32
    2bae:	51 e4       	ldi	r21, 0x41	; 65
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9a a3       	std	Y+34, r25	; 0x22
    2bc6:	89 a3       	std	Y+33, r24	; 0x21
    2bc8:	0f c0       	rjmp	.+30     	; 0x2be8 <LCD_4_BitvidsendCommand+0x1e2>
    2bca:	88 ec       	ldi	r24, 0xC8	; 200
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	98 a3       	std	Y+32, r25	; 0x20
    2bd0:	8f 8f       	std	Y+31, r24	; 0x1f
    2bd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bd4:	98 a1       	ldd	r25, Y+32	; 0x20
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <LCD_4_BitvidsendCommand+0x1d0>
    2bda:	98 a3       	std	Y+32, r25	; 0x20
    2bdc:	8f 8f       	std	Y+31, r24	; 0x1f
    2bde:	89 a1       	ldd	r24, Y+33	; 0x21
    2be0:	9a a1       	ldd	r25, Y+34	; 0x22
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	9a a3       	std	Y+34, r25	; 0x22
    2be6:	89 a3       	std	Y+33, r24	; 0x21
    2be8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bea:	9a a1       	ldd	r25, Y+34	; 0x22
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	69 f7       	brne	.-38     	; 0x2bca <LCD_4_BitvidsendCommand+0x1c4>
    2bf0:	14 c0       	rjmp	.+40     	; 0x2c1a <LCD_4_BitvidsendCommand+0x214>
    2bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf6:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9a a3       	std	Y+34, r25	; 0x22
    2c04:	89 a3       	std	Y+33, r24	; 0x21
    2c06:	89 a1       	ldd	r24, Y+33	; 0x21
    2c08:	9a a1       	ldd	r25, Y+34	; 0x22
    2c0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c0c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <LCD_4_BitvidsendCommand+0x20c>
    2c16:	9e 8f       	std	Y+30, r25	; 0x1e
    2c18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    2c1a:	82 e0       	ldi	r24, 0x02	; 2
    2c1c:	60 e0       	ldi	r22, 0x00	; 0
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2c24:	82 e0       	ldi	r24, 0x02	; 2
    2c26:	61 e0       	ldi	r22, 0x01	; 1
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8command<<4) & (HALF_LOW_HALF_HIGH)));
    2c2e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	82 95       	swap	r24
    2c36:	92 95       	swap	r25
    2c38:	90 7f       	andi	r25, 0xF0	; 240
    2c3a:	98 27       	eor	r25, r24
    2c3c:	80 7f       	andi	r24, 0xF0	; 240
    2c3e:	98 27       	eor	r25, r24
    2c40:	98 2f       	mov	r25, r24
    2c42:	83 e0       	ldi	r24, 0x03	; 3
    2c44:	69 2f       	mov	r22, r25
    2c46:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2c4a:	82 e0       	ldi	r24, 0x02	; 2
    2c4c:	62 e0       	ldi	r22, 0x02	; 2
    2c4e:	41 e0       	ldi	r20, 0x01	; 1
    2c50:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	a0 e0       	ldi	r26, 0x00	; 0
    2c5a:	b0 e4       	ldi	r27, 0x40	; 64
    2c5c:	89 8f       	std	Y+25, r24	; 0x19
    2c5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c60:	ab 8f       	std	Y+27, r26	; 0x1b
    2c62:	bc 8f       	std	Y+28, r27	; 0x1c
    2c64:	69 8d       	ldd	r22, Y+25	; 0x19
    2c66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	4a ef       	ldi	r20, 0xFA	; 250
    2c72:	54 e4       	ldi	r21, 0x44	; 68
    2c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	8d 8b       	std	Y+21, r24	; 0x15
    2c7e:	9e 8b       	std	Y+22, r25	; 0x16
    2c80:	af 8b       	std	Y+23, r26	; 0x17
    2c82:	b8 8f       	std	Y+24, r27	; 0x18
    2c84:	6d 89       	ldd	r22, Y+21	; 0x15
    2c86:	7e 89       	ldd	r23, Y+22	; 0x16
    2c88:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e8       	ldi	r20, 0x80	; 128
    2c92:	5f e3       	ldi	r21, 0x3F	; 63
    2c94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c98:	88 23       	and	r24, r24
    2c9a:	2c f4       	brge	.+10     	; 0x2ca6 <LCD_4_BitvidsendCommand+0x2a0>
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	9c 8b       	std	Y+20, r25	; 0x14
    2ca2:	8b 8b       	std	Y+19, r24	; 0x13
    2ca4:	3f c0       	rjmp	.+126    	; 0x2d24 <LCD_4_BitvidsendCommand+0x31e>
    2ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    2caa:	8f 89       	ldd	r24, Y+23	; 0x17
    2cac:	98 8d       	ldd	r25, Y+24	; 0x18
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	3f ef       	ldi	r19, 0xFF	; 255
    2cb2:	4f e7       	ldi	r20, 0x7F	; 127
    2cb4:	57 e4       	ldi	r21, 0x47	; 71
    2cb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cba:	18 16       	cp	r1, r24
    2cbc:	4c f5       	brge	.+82     	; 0x2d10 <LCD_4_BitvidsendCommand+0x30a>
    2cbe:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e2       	ldi	r20, 0x20	; 32
    2ccc:	51 e4       	ldi	r21, 0x41	; 65
    2cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9c 8b       	std	Y+20, r25	; 0x14
    2ce4:	8b 8b       	std	Y+19, r24	; 0x13
    2ce6:	0f c0       	rjmp	.+30     	; 0x2d06 <LCD_4_BitvidsendCommand+0x300>
    2ce8:	88 ec       	ldi	r24, 0xC8	; 200
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	9a 8b       	std	Y+18, r25	; 0x12
    2cee:	89 8b       	std	Y+17, r24	; 0x11
    2cf0:	89 89       	ldd	r24, Y+17	; 0x11
    2cf2:	9a 89       	ldd	r25, Y+18	; 0x12
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	f1 f7       	brne	.-4      	; 0x2cf4 <LCD_4_BitvidsendCommand+0x2ee>
    2cf8:	9a 8b       	std	Y+18, r25	; 0x12
    2cfa:	89 8b       	std	Y+17, r24	; 0x11
    2cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	9c 8b       	std	Y+20, r25	; 0x14
    2d04:	8b 8b       	std	Y+19, r24	; 0x13
    2d06:	8b 89       	ldd	r24, Y+19	; 0x13
    2d08:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	69 f7       	brne	.-38     	; 0x2ce8 <LCD_4_BitvidsendCommand+0x2e2>
    2d0e:	14 c0       	rjmp	.+40     	; 0x2d38 <LCD_4_BitvidsendCommand+0x332>
    2d10:	6d 89       	ldd	r22, Y+21	; 0x15
    2d12:	7e 89       	ldd	r23, Y+22	; 0x16
    2d14:	8f 89       	ldd	r24, Y+23	; 0x17
    2d16:	98 8d       	ldd	r25, Y+24	; 0x18
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9c 8b       	std	Y+20, r25	; 0x14
    2d22:	8b 8b       	std	Y+19, r24	; 0x13
    2d24:	8b 89       	ldd	r24, Y+19	; 0x13
    2d26:	9c 89       	ldd	r25, Y+20	; 0x14
    2d28:	98 8b       	std	Y+16, r25	; 0x10
    2d2a:	8f 87       	std	Y+15, r24	; 0x0f
    2d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d2e:	98 89       	ldd	r25, Y+16	; 0x10
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	f1 f7       	brne	.-4      	; 0x2d30 <LCD_4_BitvidsendCommand+0x32a>
    2d34:	98 8b       	std	Y+16, r25	; 0x10
    2d36:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	62 e0       	ldi	r22, 0x02	; 2
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	a0 e0       	ldi	r26, 0x00	; 0
    2d48:	b0 e4       	ldi	r27, 0x40	; 64
    2d4a:	8b 87       	std	Y+11, r24	; 0x0b
    2d4c:	9c 87       	std	Y+12, r25	; 0x0c
    2d4e:	ad 87       	std	Y+13, r26	; 0x0d
    2d50:	be 87       	std	Y+14, r27	; 0x0e
    2d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	4a ef       	ldi	r20, 0xFA	; 250
    2d60:	54 e4       	ldi	r21, 0x44	; 68
    2d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	8f 83       	std	Y+7, r24	; 0x07
    2d6c:	98 87       	std	Y+8, r25	; 0x08
    2d6e:	a9 87       	std	Y+9, r26	; 0x09
    2d70:	ba 87       	std	Y+10, r27	; 0x0a
    2d72:	6f 81       	ldd	r22, Y+7	; 0x07
    2d74:	78 85       	ldd	r23, Y+8	; 0x08
    2d76:	89 85       	ldd	r24, Y+9	; 0x09
    2d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	40 e8       	ldi	r20, 0x80	; 128
    2d80:	5f e3       	ldi	r21, 0x3F	; 63
    2d82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d86:	88 23       	and	r24, r24
    2d88:	2c f4       	brge	.+10     	; 0x2d94 <LCD_4_BitvidsendCommand+0x38e>
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	9e 83       	std	Y+6, r25	; 0x06
    2d90:	8d 83       	std	Y+5, r24	; 0x05
    2d92:	3f c0       	rjmp	.+126    	; 0x2e12 <LCD_4_BitvidsendCommand+0x40c>
    2d94:	6f 81       	ldd	r22, Y+7	; 0x07
    2d96:	78 85       	ldd	r23, Y+8	; 0x08
    2d98:	89 85       	ldd	r24, Y+9	; 0x09
    2d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	3f ef       	ldi	r19, 0xFF	; 255
    2da0:	4f e7       	ldi	r20, 0x7F	; 127
    2da2:	57 e4       	ldi	r21, 0x47	; 71
    2da4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da8:	18 16       	cp	r1, r24
    2daa:	4c f5       	brge	.+82     	; 0x2dfe <LCD_4_BitvidsendCommand+0x3f8>
    2dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e2       	ldi	r20, 0x20	; 32
    2dba:	51 e4       	ldi	r21, 0x41	; 65
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	bc 01       	movw	r22, r24
    2dc6:	cd 01       	movw	r24, r26
    2dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	9e 83       	std	Y+6, r25	; 0x06
    2dd2:	8d 83       	std	Y+5, r24	; 0x05
    2dd4:	0f c0       	rjmp	.+30     	; 0x2df4 <LCD_4_BitvidsendCommand+0x3ee>
    2dd6:	88 ec       	ldi	r24, 0xC8	; 200
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	9c 83       	std	Y+4, r25	; 0x04
    2ddc:	8b 83       	std	Y+3, r24	; 0x03
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	9c 81       	ldd	r25, Y+4	; 0x04
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	f1 f7       	brne	.-4      	; 0x2de2 <LCD_4_BitvidsendCommand+0x3dc>
    2de6:	9c 83       	std	Y+4, r25	; 0x04
    2de8:	8b 83       	std	Y+3, r24	; 0x03
    2dea:	8d 81       	ldd	r24, Y+5	; 0x05
    2dec:	9e 81       	ldd	r25, Y+6	; 0x06
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	9e 83       	std	Y+6, r25	; 0x06
    2df2:	8d 83       	std	Y+5, r24	; 0x05
    2df4:	8d 81       	ldd	r24, Y+5	; 0x05
    2df6:	9e 81       	ldd	r25, Y+6	; 0x06
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	69 f7       	brne	.-38     	; 0x2dd6 <LCD_4_BitvidsendCommand+0x3d0>
    2dfc:	14 c0       	rjmp	.+40     	; 0x2e26 <LCD_4_BitvidsendCommand+0x420>
    2dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2e00:	78 85       	ldd	r23, Y+8	; 0x08
    2e02:	89 85       	ldd	r24, Y+9	; 0x09
    2e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	9e 83       	std	Y+6, r25	; 0x06
    2e10:	8d 83       	std	Y+5, r24	; 0x05
    2e12:	8d 81       	ldd	r24, Y+5	; 0x05
    2e14:	9e 81       	ldd	r25, Y+6	; 0x06
    2e16:	9a 83       	std	Y+2, r25	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	f1 f7       	brne	.-4      	; 0x2e1e <LCD_4_BitvidsendCommand+0x418>
    2e22:	9a 83       	std	Y+2, r25	; 0x02
    2e24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2e26:	e9 96       	adiw	r28, 0x39	; 57
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	de bf       	out	0x3e, r29	; 62
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	cd bf       	out	0x3d, r28	; 61
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	08 95       	ret

00002e38 <LCD_4_BitvidwriteCharacter>:
void LCD_4_BitvidwriteCharacter(u8 Copy_u8character)
{
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
    2e40:	e9 97       	sbiw	r28, 0x39	; 57
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	60 e0       	ldi	r22, 0x00	; 0
    2e52:	41 e0       	ldi	r20, 0x01	; 1
    2e54:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2e58:	82 e0       	ldi	r24, 0x02	; 2
    2e5a:	61 e0       	ldi	r22, 0x01	; 1
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8character) & (HALF_LOW_HALF_HIGH)));
    2e62:	89 ad       	ldd	r24, Y+57	; 0x39
    2e64:	98 2f       	mov	r25, r24
    2e66:	90 7f       	andi	r25, 0xF0	; 240
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	69 2f       	mov	r22, r25
    2e6c:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	62 e0       	ldi	r22, 0x02	; 2
    2e74:	41 e0       	ldi	r20, 0x01	; 1
    2e76:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	a0 e0       	ldi	r26, 0x00	; 0
    2e80:	b0 e4       	ldi	r27, 0x40	; 64
    2e82:	8d ab       	std	Y+53, r24	; 0x35
    2e84:	9e ab       	std	Y+54, r25	; 0x36
    2e86:	af ab       	std	Y+55, r26	; 0x37
    2e88:	b8 af       	std	Y+56, r27	; 0x38
    2e8a:	6d a9       	ldd	r22, Y+53	; 0x35
    2e8c:	7e a9       	ldd	r23, Y+54	; 0x36
    2e8e:	8f a9       	ldd	r24, Y+55	; 0x37
    2e90:	98 ad       	ldd	r25, Y+56	; 0x38
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a ef       	ldi	r20, 0xFA	; 250
    2e98:	54 e4       	ldi	r21, 0x44	; 68
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	89 ab       	std	Y+49, r24	; 0x31
    2ea4:	9a ab       	std	Y+50, r25	; 0x32
    2ea6:	ab ab       	std	Y+51, r26	; 0x33
    2ea8:	bc ab       	std	Y+52, r27	; 0x34
    2eaa:	69 a9       	ldd	r22, Y+49	; 0x31
    2eac:	7a a9       	ldd	r23, Y+50	; 0x32
    2eae:	8b a9       	ldd	r24, Y+51	; 0x33
    2eb0:	9c a9       	ldd	r25, Y+52	; 0x34
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e8       	ldi	r20, 0x80	; 128
    2eb8:	5f e3       	ldi	r21, 0x3F	; 63
    2eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ebe:	88 23       	and	r24, r24
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <LCD_4_BitvidwriteCharacter+0x94>
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	98 ab       	std	Y+48, r25	; 0x30
    2ec8:	8f a7       	std	Y+47, r24	; 0x2f
    2eca:	3f c0       	rjmp	.+126    	; 0x2f4a <LCD_4_BitvidwriteCharacter+0x112>
    2ecc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ece:	7a a9       	ldd	r23, Y+50	; 0x32
    2ed0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ed2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
    2ed8:	4f e7       	ldi	r20, 0x7F	; 127
    2eda:	57 e4       	ldi	r21, 0x47	; 71
    2edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	4c f5       	brge	.+82     	; 0x2f36 <LCD_4_BitvidwriteCharacter+0xfe>
    2ee4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ee6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ee8:	8f a9       	ldd	r24, Y+55	; 0x37
    2eea:	98 ad       	ldd	r25, Y+56	; 0x38
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	98 ab       	std	Y+48, r25	; 0x30
    2f0a:	8f a7       	std	Y+47, r24	; 0x2f
    2f0c:	0f c0       	rjmp	.+30     	; 0x2f2c <LCD_4_BitvidwriteCharacter+0xf4>
    2f0e:	88 ec       	ldi	r24, 0xC8	; 200
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	9e a7       	std	Y+46, r25	; 0x2e
    2f14:	8d a7       	std	Y+45, r24	; 0x2d
    2f16:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f18:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <LCD_4_BitvidwriteCharacter+0xe2>
    2f1e:	9e a7       	std	Y+46, r25	; 0x2e
    2f20:	8d a7       	std	Y+45, r24	; 0x2d
    2f22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f24:	98 a9       	ldd	r25, Y+48	; 0x30
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	98 ab       	std	Y+48, r25	; 0x30
    2f2a:	8f a7       	std	Y+47, r24	; 0x2f
    2f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <LCD_4_BitvidwriteCharacter+0xd6>
    2f34:	14 c0       	rjmp	.+40     	; 0x2f5e <LCD_4_BitvidwriteCharacter+0x126>
    2f36:	69 a9       	ldd	r22, Y+49	; 0x31
    2f38:	7a a9       	ldd	r23, Y+50	; 0x32
    2f3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	98 ab       	std	Y+48, r25	; 0x30
    2f48:	8f a7       	std	Y+47, r24	; 0x2f
    2f4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f4e:	9c a7       	std	Y+44, r25	; 0x2c
    2f50:	8b a7       	std	Y+43, r24	; 0x2b
    2f52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f54:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <LCD_4_BitvidwriteCharacter+0x11e>
    2f5a:	9c a7       	std	Y+44, r25	; 0x2c
    2f5c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2f5e:	82 e0       	ldi	r24, 0x02	; 2
    2f60:	62 e0       	ldi	r22, 0x02	; 2
    2f62:	40 e0       	ldi	r20, 0x00	; 0
    2f64:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	a0 e0       	ldi	r26, 0x00	; 0
    2f6e:	b0 e4       	ldi	r27, 0x40	; 64
    2f70:	8f a3       	std	Y+39, r24	; 0x27
    2f72:	98 a7       	std	Y+40, r25	; 0x28
    2f74:	a9 a7       	std	Y+41, r26	; 0x29
    2f76:	ba a7       	std	Y+42, r27	; 0x2a
    2f78:	6f a1       	ldd	r22, Y+39	; 0x27
    2f7a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f7c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	4a ef       	ldi	r20, 0xFA	; 250
    2f86:	54 e4       	ldi	r21, 0x44	; 68
    2f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	8b a3       	std	Y+35, r24	; 0x23
    2f92:	9c a3       	std	Y+36, r25	; 0x24
    2f94:	ad a3       	std	Y+37, r26	; 0x25
    2f96:	be a3       	std	Y+38, r27	; 0x26
    2f98:	6b a1       	ldd	r22, Y+35	; 0x23
    2f9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e8       	ldi	r20, 0x80	; 128
    2fa6:	5f e3       	ldi	r21, 0x3F	; 63
    2fa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fac:	88 23       	and	r24, r24
    2fae:	2c f4       	brge	.+10     	; 0x2fba <LCD_4_BitvidwriteCharacter+0x182>
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	9a a3       	std	Y+34, r25	; 0x22
    2fb6:	89 a3       	std	Y+33, r24	; 0x21
    2fb8:	3f c0       	rjmp	.+126    	; 0x3038 <LCD_4_BitvidwriteCharacter+0x200>
    2fba:	6b a1       	ldd	r22, Y+35	; 0x23
    2fbc:	7c a1       	ldd	r23, Y+36	; 0x24
    2fbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2fc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	3f ef       	ldi	r19, 0xFF	; 255
    2fc6:	4f e7       	ldi	r20, 0x7F	; 127
    2fc8:	57 e4       	ldi	r21, 0x47	; 71
    2fca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fce:	18 16       	cp	r1, r24
    2fd0:	4c f5       	brge	.+82     	; 0x3024 <LCD_4_BitvidwriteCharacter+0x1ec>
    2fd2:	6f a1       	ldd	r22, Y+39	; 0x27
    2fd4:	78 a5       	ldd	r23, Y+40	; 0x28
    2fd6:	89 a5       	ldd	r24, Y+41	; 0x29
    2fd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e2       	ldi	r20, 0x20	; 32
    2fe0:	51 e4       	ldi	r21, 0x41	; 65
    2fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	bc 01       	movw	r22, r24
    2fec:	cd 01       	movw	r24, r26
    2fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	9a a3       	std	Y+34, r25	; 0x22
    2ff8:	89 a3       	std	Y+33, r24	; 0x21
    2ffa:	0f c0       	rjmp	.+30     	; 0x301a <LCD_4_BitvidwriteCharacter+0x1e2>
    2ffc:	88 ec       	ldi	r24, 0xC8	; 200
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	98 a3       	std	Y+32, r25	; 0x20
    3002:	8f 8f       	std	Y+31, r24	; 0x1f
    3004:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3006:	98 a1       	ldd	r25, Y+32	; 0x20
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	f1 f7       	brne	.-4      	; 0x3008 <LCD_4_BitvidwriteCharacter+0x1d0>
    300c:	98 a3       	std	Y+32, r25	; 0x20
    300e:	8f 8f       	std	Y+31, r24	; 0x1f
    3010:	89 a1       	ldd	r24, Y+33	; 0x21
    3012:	9a a1       	ldd	r25, Y+34	; 0x22
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	9a a3       	std	Y+34, r25	; 0x22
    3018:	89 a3       	std	Y+33, r24	; 0x21
    301a:	89 a1       	ldd	r24, Y+33	; 0x21
    301c:	9a a1       	ldd	r25, Y+34	; 0x22
    301e:	00 97       	sbiw	r24, 0x00	; 0
    3020:	69 f7       	brne	.-38     	; 0x2ffc <LCD_4_BitvidwriteCharacter+0x1c4>
    3022:	14 c0       	rjmp	.+40     	; 0x304c <LCD_4_BitvidwriteCharacter+0x214>
    3024:	6b a1       	ldd	r22, Y+35	; 0x23
    3026:	7c a1       	ldd	r23, Y+36	; 0x24
    3028:	8d a1       	ldd	r24, Y+37	; 0x25
    302a:	9e a1       	ldd	r25, Y+38	; 0x26
    302c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	9a a3       	std	Y+34, r25	; 0x22
    3036:	89 a3       	std	Y+33, r24	; 0x21
    3038:	89 a1       	ldd	r24, Y+33	; 0x21
    303a:	9a a1       	ldd	r25, Y+34	; 0x22
    303c:	9e 8f       	std	Y+30, r25	; 0x1e
    303e:	8d 8f       	std	Y+29, r24	; 0x1d
    3040:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3042:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <LCD_4_BitvidwriteCharacter+0x20c>
    3048:	9e 8f       	std	Y+30, r25	; 0x1e
    304a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    304c:	82 e0       	ldi	r24, 0x02	; 2
    304e:	60 e0       	ldi	r22, 0x00	; 0
    3050:	41 e0       	ldi	r20, 0x01	; 1
    3052:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    3056:	82 e0       	ldi	r24, 0x02	; 2
    3058:	61 e0       	ldi	r22, 0x01	; 1
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8character<<4) & (HALF_LOW_HALF_HIGH)));
    3060:	89 ad       	ldd	r24, Y+57	; 0x39
    3062:	88 2f       	mov	r24, r24
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	82 95       	swap	r24
    3068:	92 95       	swap	r25
    306a:	90 7f       	andi	r25, 0xF0	; 240
    306c:	98 27       	eor	r25, r24
    306e:	80 7f       	andi	r24, 0xF0	; 240
    3070:	98 27       	eor	r25, r24
    3072:	98 2f       	mov	r25, r24
    3074:	83 e0       	ldi	r24, 0x03	; 3
    3076:	69 2f       	mov	r22, r25
    3078:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    307c:	82 e0       	ldi	r24, 0x02	; 2
    307e:	62 e0       	ldi	r22, 0x02	; 2
    3080:	41 e0       	ldi	r20, 0x01	; 1
    3082:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	a0 e0       	ldi	r26, 0x00	; 0
    308c:	b0 e4       	ldi	r27, 0x40	; 64
    308e:	89 8f       	std	Y+25, r24	; 0x19
    3090:	9a 8f       	std	Y+26, r25	; 0x1a
    3092:	ab 8f       	std	Y+27, r26	; 0x1b
    3094:	bc 8f       	std	Y+28, r27	; 0x1c
    3096:	69 8d       	ldd	r22, Y+25	; 0x19
    3098:	7a 8d       	ldd	r23, Y+26	; 0x1a
    309a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    309c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	4a ef       	ldi	r20, 0xFA	; 250
    30a4:	54 e4       	ldi	r21, 0x44	; 68
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	8d 8b       	std	Y+21, r24	; 0x15
    30b0:	9e 8b       	std	Y+22, r25	; 0x16
    30b2:	af 8b       	std	Y+23, r26	; 0x17
    30b4:	b8 8f       	std	Y+24, r27	; 0x18
    30b6:	6d 89       	ldd	r22, Y+21	; 0x15
    30b8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ba:	8f 89       	ldd	r24, Y+23	; 0x17
    30bc:	98 8d       	ldd	r25, Y+24	; 0x18
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e8       	ldi	r20, 0x80	; 128
    30c4:	5f e3       	ldi	r21, 0x3F	; 63
    30c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ca:	88 23       	and	r24, r24
    30cc:	2c f4       	brge	.+10     	; 0x30d8 <LCD_4_BitvidwriteCharacter+0x2a0>
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	9c 8b       	std	Y+20, r25	; 0x14
    30d4:	8b 8b       	std	Y+19, r24	; 0x13
    30d6:	3f c0       	rjmp	.+126    	; 0x3156 <LCD_4_BitvidwriteCharacter+0x31e>
    30d8:	6d 89       	ldd	r22, Y+21	; 0x15
    30da:	7e 89       	ldd	r23, Y+22	; 0x16
    30dc:	8f 89       	ldd	r24, Y+23	; 0x17
    30de:	98 8d       	ldd	r25, Y+24	; 0x18
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	3f ef       	ldi	r19, 0xFF	; 255
    30e4:	4f e7       	ldi	r20, 0x7F	; 127
    30e6:	57 e4       	ldi	r21, 0x47	; 71
    30e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ec:	18 16       	cp	r1, r24
    30ee:	4c f5       	brge	.+82     	; 0x3142 <LCD_4_BitvidwriteCharacter+0x30a>
    30f0:	69 8d       	ldd	r22, Y+25	; 0x19
    30f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	40 e2       	ldi	r20, 0x20	; 32
    30fe:	51 e4       	ldi	r21, 0x41	; 65
    3100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	bc 01       	movw	r22, r24
    310a:	cd 01       	movw	r24, r26
    310c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	9c 8b       	std	Y+20, r25	; 0x14
    3116:	8b 8b       	std	Y+19, r24	; 0x13
    3118:	0f c0       	rjmp	.+30     	; 0x3138 <LCD_4_BitvidwriteCharacter+0x300>
    311a:	88 ec       	ldi	r24, 0xC8	; 200
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	9a 8b       	std	Y+18, r25	; 0x12
    3120:	89 8b       	std	Y+17, r24	; 0x11
    3122:	89 89       	ldd	r24, Y+17	; 0x11
    3124:	9a 89       	ldd	r25, Y+18	; 0x12
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	f1 f7       	brne	.-4      	; 0x3126 <LCD_4_BitvidwriteCharacter+0x2ee>
    312a:	9a 8b       	std	Y+18, r25	; 0x12
    312c:	89 8b       	std	Y+17, r24	; 0x11
    312e:	8b 89       	ldd	r24, Y+19	; 0x13
    3130:	9c 89       	ldd	r25, Y+20	; 0x14
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	9c 8b       	std	Y+20, r25	; 0x14
    3136:	8b 8b       	std	Y+19, r24	; 0x13
    3138:	8b 89       	ldd	r24, Y+19	; 0x13
    313a:	9c 89       	ldd	r25, Y+20	; 0x14
    313c:	00 97       	sbiw	r24, 0x00	; 0
    313e:	69 f7       	brne	.-38     	; 0x311a <LCD_4_BitvidwriteCharacter+0x2e2>
    3140:	14 c0       	rjmp	.+40     	; 0x316a <LCD_4_BitvidwriteCharacter+0x332>
    3142:	6d 89       	ldd	r22, Y+21	; 0x15
    3144:	7e 89       	ldd	r23, Y+22	; 0x16
    3146:	8f 89       	ldd	r24, Y+23	; 0x17
    3148:	98 8d       	ldd	r25, Y+24	; 0x18
    314a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	9c 8b       	std	Y+20, r25	; 0x14
    3154:	8b 8b       	std	Y+19, r24	; 0x13
    3156:	8b 89       	ldd	r24, Y+19	; 0x13
    3158:	9c 89       	ldd	r25, Y+20	; 0x14
    315a:	98 8b       	std	Y+16, r25	; 0x10
    315c:	8f 87       	std	Y+15, r24	; 0x0f
    315e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3160:	98 89       	ldd	r25, Y+16	; 0x10
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <LCD_4_BitvidwriteCharacter+0x32a>
    3166:	98 8b       	std	Y+16, r25	; 0x10
    3168:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    316a:	82 e0       	ldi	r24, 0x02	; 2
    316c:	62 e0       	ldi	r22, 0x02	; 2
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	a0 e0       	ldi	r26, 0x00	; 0
    317a:	b0 e4       	ldi	r27, 0x40	; 64
    317c:	8b 87       	std	Y+11, r24	; 0x0b
    317e:	9c 87       	std	Y+12, r25	; 0x0c
    3180:	ad 87       	std	Y+13, r26	; 0x0d
    3182:	be 87       	std	Y+14, r27	; 0x0e
    3184:	6b 85       	ldd	r22, Y+11	; 0x0b
    3186:	7c 85       	ldd	r23, Y+12	; 0x0c
    3188:	8d 85       	ldd	r24, Y+13	; 0x0d
    318a:	9e 85       	ldd	r25, Y+14	; 0x0e
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	4a ef       	ldi	r20, 0xFA	; 250
    3192:	54 e4       	ldi	r21, 0x44	; 68
    3194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	8f 83       	std	Y+7, r24	; 0x07
    319e:	98 87       	std	Y+8, r25	; 0x08
    31a0:	a9 87       	std	Y+9, r26	; 0x09
    31a2:	ba 87       	std	Y+10, r27	; 0x0a
    31a4:	6f 81       	ldd	r22, Y+7	; 0x07
    31a6:	78 85       	ldd	r23, Y+8	; 0x08
    31a8:	89 85       	ldd	r24, Y+9	; 0x09
    31aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e8       	ldi	r20, 0x80	; 128
    31b2:	5f e3       	ldi	r21, 0x3F	; 63
    31b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b8:	88 23       	and	r24, r24
    31ba:	2c f4       	brge	.+10     	; 0x31c6 <LCD_4_BitvidwriteCharacter+0x38e>
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	9e 83       	std	Y+6, r25	; 0x06
    31c2:	8d 83       	std	Y+5, r24	; 0x05
    31c4:	3f c0       	rjmp	.+126    	; 0x3244 <LCD_4_BitvidwriteCharacter+0x40c>
    31c6:	6f 81       	ldd	r22, Y+7	; 0x07
    31c8:	78 85       	ldd	r23, Y+8	; 0x08
    31ca:	89 85       	ldd	r24, Y+9	; 0x09
    31cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	3f ef       	ldi	r19, 0xFF	; 255
    31d2:	4f e7       	ldi	r20, 0x7F	; 127
    31d4:	57 e4       	ldi	r21, 0x47	; 71
    31d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31da:	18 16       	cp	r1, r24
    31dc:	4c f5       	brge	.+82     	; 0x3230 <LCD_4_BitvidwriteCharacter+0x3f8>
    31de:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e2       	ldi	r20, 0x20	; 32
    31ec:	51 e4       	ldi	r21, 0x41	; 65
    31ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	bc 01       	movw	r22, r24
    31f8:	cd 01       	movw	r24, r26
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	9e 83       	std	Y+6, r25	; 0x06
    3204:	8d 83       	std	Y+5, r24	; 0x05
    3206:	0f c0       	rjmp	.+30     	; 0x3226 <LCD_4_BitvidwriteCharacter+0x3ee>
    3208:	88 ec       	ldi	r24, 0xC8	; 200
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	9c 83       	std	Y+4, r25	; 0x04
    320e:	8b 83       	std	Y+3, r24	; 0x03
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <LCD_4_BitvidwriteCharacter+0x3dc>
    3218:	9c 83       	std	Y+4, r25	; 0x04
    321a:	8b 83       	std	Y+3, r24	; 0x03
    321c:	8d 81       	ldd	r24, Y+5	; 0x05
    321e:	9e 81       	ldd	r25, Y+6	; 0x06
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	9e 83       	std	Y+6, r25	; 0x06
    3224:	8d 83       	std	Y+5, r24	; 0x05
    3226:	8d 81       	ldd	r24, Y+5	; 0x05
    3228:	9e 81       	ldd	r25, Y+6	; 0x06
    322a:	00 97       	sbiw	r24, 0x00	; 0
    322c:	69 f7       	brne	.-38     	; 0x3208 <LCD_4_BitvidwriteCharacter+0x3d0>
    322e:	14 c0       	rjmp	.+40     	; 0x3258 <LCD_4_BitvidwriteCharacter+0x420>
    3230:	6f 81       	ldd	r22, Y+7	; 0x07
    3232:	78 85       	ldd	r23, Y+8	; 0x08
    3234:	89 85       	ldd	r24, Y+9	; 0x09
    3236:	9a 85       	ldd	r25, Y+10	; 0x0a
    3238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	9e 83       	std	Y+6, r25	; 0x06
    3242:	8d 83       	std	Y+5, r24	; 0x05
    3244:	8d 81       	ldd	r24, Y+5	; 0x05
    3246:	9e 81       	ldd	r25, Y+6	; 0x06
    3248:	9a 83       	std	Y+2, r25	; 0x02
    324a:	89 83       	std	Y+1, r24	; 0x01
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	9a 81       	ldd	r25, Y+2	; 0x02
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	f1 f7       	brne	.-4      	; 0x3250 <LCD_4_BitvidwriteCharacter+0x418>
    3254:	9a 83       	std	Y+2, r25	; 0x02
    3256:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3258:	e9 96       	adiw	r28, 0x39	; 57
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	de bf       	out	0x3e, r29	; 62
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	cd bf       	out	0x3d, r28	; 61
    3264:	cf 91       	pop	r28
    3266:	df 91       	pop	r29
    3268:	08 95       	ret

0000326a <LCD_8_BitvidInit>:

void LCD_8_BitvidInit(void)
{
    326a:	df 93       	push	r29
    326c:	cf 93       	push	r28
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62
    3272:	e8 97       	sbiw	r28, 0x38	; 56
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	f8 94       	cli
    3278:	de bf       	out	0x3e, r29	; 62
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPortDirection(LCD_DATA_PORT,FULL_OUTPUT);
    327e:	83 e0       	ldi	r24, 0x03	; 3
    3280:	6f ef       	ldi	r22, 0xFF	; 255
    3282:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_u8setPortDirection>
	DIO_u8setPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    3286:	82 e0       	ldi	r24, 0x02	; 2
    3288:	60 e0       	ldi	r22, 0x00	; 0
    328a:	41 e0       	ldi	r20, 0x01	; 1
    328c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    3290:	82 e0       	ldi	r24, 0x02	; 2
    3292:	61 e0       	ldi	r22, 0x01	; 1
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	62 e0       	ldi	r22, 0x02	; 2
    329e:	41 e0       	ldi	r20, 0x01	; 1
    32a0:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8setPinDirection>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	a0 e2       	ldi	r26, 0x20	; 32
    32aa:	b2 e4       	ldi	r27, 0x42	; 66
    32ac:	8d ab       	std	Y+53, r24	; 0x35
    32ae:	9e ab       	std	Y+54, r25	; 0x36
    32b0:	af ab       	std	Y+55, r26	; 0x37
    32b2:	b8 af       	std	Y+56, r27	; 0x38
    32b4:	6d a9       	ldd	r22, Y+53	; 0x35
    32b6:	7e a9       	ldd	r23, Y+54	; 0x36
    32b8:	8f a9       	ldd	r24, Y+55	; 0x37
    32ba:	98 ad       	ldd	r25, Y+56	; 0x38
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4a ef       	ldi	r20, 0xFA	; 250
    32c2:	54 e4       	ldi	r21, 0x44	; 68
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	89 ab       	std	Y+49, r24	; 0x31
    32ce:	9a ab       	std	Y+50, r25	; 0x32
    32d0:	ab ab       	std	Y+51, r26	; 0x33
    32d2:	bc ab       	std	Y+52, r27	; 0x34
    32d4:	69 a9       	ldd	r22, Y+49	; 0x31
    32d6:	7a a9       	ldd	r23, Y+50	; 0x32
    32d8:	8b a9       	ldd	r24, Y+51	; 0x33
    32da:	9c a9       	ldd	r25, Y+52	; 0x34
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e8       	ldi	r20, 0x80	; 128
    32e2:	5f e3       	ldi	r21, 0x3F	; 63
    32e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e8:	88 23       	and	r24, r24
    32ea:	2c f4       	brge	.+10     	; 0x32f6 <LCD_8_BitvidInit+0x8c>
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	98 ab       	std	Y+48, r25	; 0x30
    32f2:	8f a7       	std	Y+47, r24	; 0x2f
    32f4:	3f c0       	rjmp	.+126    	; 0x3374 <LCD_8_BitvidInit+0x10a>
    32f6:	69 a9       	ldd	r22, Y+49	; 0x31
    32f8:	7a a9       	ldd	r23, Y+50	; 0x32
    32fa:	8b a9       	ldd	r24, Y+51	; 0x33
    32fc:	9c a9       	ldd	r25, Y+52	; 0x34
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	4c f5       	brge	.+82     	; 0x3360 <LCD_8_BitvidInit+0xf6>
    330e:	6d a9       	ldd	r22, Y+53	; 0x35
    3310:	7e a9       	ldd	r23, Y+54	; 0x36
    3312:	8f a9       	ldd	r24, Y+55	; 0x37
    3314:	98 ad       	ldd	r25, Y+56	; 0x38
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e2       	ldi	r20, 0x20	; 32
    331c:	51 e4       	ldi	r21, 0x41	; 65
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	bc 01       	movw	r22, r24
    3328:	cd 01       	movw	r24, r26
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	98 ab       	std	Y+48, r25	; 0x30
    3334:	8f a7       	std	Y+47, r24	; 0x2f
    3336:	0f c0       	rjmp	.+30     	; 0x3356 <LCD_8_BitvidInit+0xec>
    3338:	88 ec       	ldi	r24, 0xC8	; 200
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	9e a7       	std	Y+46, r25	; 0x2e
    333e:	8d a7       	std	Y+45, r24	; 0x2d
    3340:	8d a5       	ldd	r24, Y+45	; 0x2d
    3342:	9e a5       	ldd	r25, Y+46	; 0x2e
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <LCD_8_BitvidInit+0xda>
    3348:	9e a7       	std	Y+46, r25	; 0x2e
    334a:	8d a7       	std	Y+45, r24	; 0x2d
    334c:	8f a5       	ldd	r24, Y+47	; 0x2f
    334e:	98 a9       	ldd	r25, Y+48	; 0x30
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	98 ab       	std	Y+48, r25	; 0x30
    3354:	8f a7       	std	Y+47, r24	; 0x2f
    3356:	8f a5       	ldd	r24, Y+47	; 0x2f
    3358:	98 a9       	ldd	r25, Y+48	; 0x30
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	69 f7       	brne	.-38     	; 0x3338 <LCD_8_BitvidInit+0xce>
    335e:	14 c0       	rjmp	.+40     	; 0x3388 <LCD_8_BitvidInit+0x11e>
    3360:	69 a9       	ldd	r22, Y+49	; 0x31
    3362:	7a a9       	ldd	r23, Y+50	; 0x32
    3364:	8b a9       	ldd	r24, Y+51	; 0x33
    3366:	9c a9       	ldd	r25, Y+52	; 0x34
    3368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	98 ab       	std	Y+48, r25	; 0x30
    3372:	8f a7       	std	Y+47, r24	; 0x2f
    3374:	8f a5       	ldd	r24, Y+47	; 0x2f
    3376:	98 a9       	ldd	r25, Y+48	; 0x30
    3378:	9c a7       	std	Y+44, r25	; 0x2c
    337a:	8b a7       	std	Y+43, r24	; 0x2b
    337c:	8b a5       	ldd	r24, Y+43	; 0x2b
    337e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <LCD_8_BitvidInit+0x116>
    3384:	9c a7       	std	Y+44, r25	; 0x2c
    3386:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_8_BitvidsendCommand(LCD_8_BIT_FUNCTION_SET_CMD);
    3388:	88 e3       	ldi	r24, 0x38	; 56
    338a:	0e 94 2f 1b 	call	0x365e	; 0x365e <LCD_8_BitvidsendCommand>
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	a0 e8       	ldi	r26, 0x80	; 128
    3394:	bf e3       	ldi	r27, 0x3F	; 63
    3396:	8f a3       	std	Y+39, r24	; 0x27
    3398:	98 a7       	std	Y+40, r25	; 0x28
    339a:	a9 a7       	std	Y+41, r26	; 0x29
    339c:	ba a7       	std	Y+42, r27	; 0x2a
    339e:	6f a1       	ldd	r22, Y+39	; 0x27
    33a0:	78 a5       	ldd	r23, Y+40	; 0x28
    33a2:	89 a5       	ldd	r24, Y+41	; 0x29
    33a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	4a ef       	ldi	r20, 0xFA	; 250
    33ac:	54 e4       	ldi	r21, 0x44	; 68
    33ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	8b a3       	std	Y+35, r24	; 0x23
    33b8:	9c a3       	std	Y+36, r25	; 0x24
    33ba:	ad a3       	std	Y+37, r26	; 0x25
    33bc:	be a3       	std	Y+38, r27	; 0x26
    33be:	6b a1       	ldd	r22, Y+35	; 0x23
    33c0:	7c a1       	ldd	r23, Y+36	; 0x24
    33c2:	8d a1       	ldd	r24, Y+37	; 0x25
    33c4:	9e a1       	ldd	r25, Y+38	; 0x26
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e8       	ldi	r20, 0x80	; 128
    33cc:	5f e3       	ldi	r21, 0x3F	; 63
    33ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33d2:	88 23       	and	r24, r24
    33d4:	2c f4       	brge	.+10     	; 0x33e0 <LCD_8_BitvidInit+0x176>
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	9a a3       	std	Y+34, r25	; 0x22
    33dc:	89 a3       	std	Y+33, r24	; 0x21
    33de:	3f c0       	rjmp	.+126    	; 0x345e <LCD_8_BitvidInit+0x1f4>
    33e0:	6b a1       	ldd	r22, Y+35	; 0x23
    33e2:	7c a1       	ldd	r23, Y+36	; 0x24
    33e4:	8d a1       	ldd	r24, Y+37	; 0x25
    33e6:	9e a1       	ldd	r25, Y+38	; 0x26
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	3f ef       	ldi	r19, 0xFF	; 255
    33ec:	4f e7       	ldi	r20, 0x7F	; 127
    33ee:	57 e4       	ldi	r21, 0x47	; 71
    33f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f4:	18 16       	cp	r1, r24
    33f6:	4c f5       	brge	.+82     	; 0x344a <LCD_8_BitvidInit+0x1e0>
    33f8:	6f a1       	ldd	r22, Y+39	; 0x27
    33fa:	78 a5       	ldd	r23, Y+40	; 0x28
    33fc:	89 a5       	ldd	r24, Y+41	; 0x29
    33fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e2       	ldi	r20, 0x20	; 32
    3406:	51 e4       	ldi	r21, 0x41	; 65
    3408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	bc 01       	movw	r22, r24
    3412:	cd 01       	movw	r24, r26
    3414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	9a a3       	std	Y+34, r25	; 0x22
    341e:	89 a3       	std	Y+33, r24	; 0x21
    3420:	0f c0       	rjmp	.+30     	; 0x3440 <LCD_8_BitvidInit+0x1d6>
    3422:	88 ec       	ldi	r24, 0xC8	; 200
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	98 a3       	std	Y+32, r25	; 0x20
    3428:	8f 8f       	std	Y+31, r24	; 0x1f
    342a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    342c:	98 a1       	ldd	r25, Y+32	; 0x20
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	f1 f7       	brne	.-4      	; 0x342e <LCD_8_BitvidInit+0x1c4>
    3432:	98 a3       	std	Y+32, r25	; 0x20
    3434:	8f 8f       	std	Y+31, r24	; 0x1f
    3436:	89 a1       	ldd	r24, Y+33	; 0x21
    3438:	9a a1       	ldd	r25, Y+34	; 0x22
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	9a a3       	std	Y+34, r25	; 0x22
    343e:	89 a3       	std	Y+33, r24	; 0x21
    3440:	89 a1       	ldd	r24, Y+33	; 0x21
    3442:	9a a1       	ldd	r25, Y+34	; 0x22
    3444:	00 97       	sbiw	r24, 0x00	; 0
    3446:	69 f7       	brne	.-38     	; 0x3422 <LCD_8_BitvidInit+0x1b8>
    3448:	14 c0       	rjmp	.+40     	; 0x3472 <LCD_8_BitvidInit+0x208>
    344a:	6b a1       	ldd	r22, Y+35	; 0x23
    344c:	7c a1       	ldd	r23, Y+36	; 0x24
    344e:	8d a1       	ldd	r24, Y+37	; 0x25
    3450:	9e a1       	ldd	r25, Y+38	; 0x26
    3452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	9a a3       	std	Y+34, r25	; 0x22
    345c:	89 a3       	std	Y+33, r24	; 0x21
    345e:	89 a1       	ldd	r24, Y+33	; 0x21
    3460:	9a a1       	ldd	r25, Y+34	; 0x22
    3462:	9e 8f       	std	Y+30, r25	; 0x1e
    3464:	8d 8f       	std	Y+29, r24	; 0x1d
    3466:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3468:	9e 8d       	ldd	r25, Y+30	; 0x1e
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <LCD_8_BitvidInit+0x200>
    346e:	9e 8f       	std	Y+30, r25	; 0x1e
    3470:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_8_BitvidsendCommand(LCD_8_BIT_DISPLAY_ON_CMD);
    3472:	8c e0       	ldi	r24, 0x0C	; 12
    3474:	0e 94 2f 1b 	call	0x365e	; 0x365e <LCD_8_BitvidsendCommand>
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	a0 e8       	ldi	r26, 0x80	; 128
    347e:	bf e3       	ldi	r27, 0x3F	; 63
    3480:	89 8f       	std	Y+25, r24	; 0x19
    3482:	9a 8f       	std	Y+26, r25	; 0x1a
    3484:	ab 8f       	std	Y+27, r26	; 0x1b
    3486:	bc 8f       	std	Y+28, r27	; 0x1c
    3488:	69 8d       	ldd	r22, Y+25	; 0x19
    348a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    348c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    348e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	4a ef       	ldi	r20, 0xFA	; 250
    3496:	54 e4       	ldi	r21, 0x44	; 68
    3498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	8d 8b       	std	Y+21, r24	; 0x15
    34a2:	9e 8b       	std	Y+22, r25	; 0x16
    34a4:	af 8b       	std	Y+23, r26	; 0x17
    34a6:	b8 8f       	std	Y+24, r27	; 0x18
    34a8:	6d 89       	ldd	r22, Y+21	; 0x15
    34aa:	7e 89       	ldd	r23, Y+22	; 0x16
    34ac:	8f 89       	ldd	r24, Y+23	; 0x17
    34ae:	98 8d       	ldd	r25, Y+24	; 0x18
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e8       	ldi	r20, 0x80	; 128
    34b6:	5f e3       	ldi	r21, 0x3F	; 63
    34b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34bc:	88 23       	and	r24, r24
    34be:	2c f4       	brge	.+10     	; 0x34ca <LCD_8_BitvidInit+0x260>
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	9c 8b       	std	Y+20, r25	; 0x14
    34c6:	8b 8b       	std	Y+19, r24	; 0x13
    34c8:	3f c0       	rjmp	.+126    	; 0x3548 <LCD_8_BitvidInit+0x2de>
    34ca:	6d 89       	ldd	r22, Y+21	; 0x15
    34cc:	7e 89       	ldd	r23, Y+22	; 0x16
    34ce:	8f 89       	ldd	r24, Y+23	; 0x17
    34d0:	98 8d       	ldd	r25, Y+24	; 0x18
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	3f ef       	ldi	r19, 0xFF	; 255
    34d6:	4f e7       	ldi	r20, 0x7F	; 127
    34d8:	57 e4       	ldi	r21, 0x47	; 71
    34da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34de:	18 16       	cp	r1, r24
    34e0:	4c f5       	brge	.+82     	; 0x3534 <LCD_8_BitvidInit+0x2ca>
    34e2:	69 8d       	ldd	r22, Y+25	; 0x19
    34e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e2       	ldi	r20, 0x20	; 32
    34f0:	51 e4       	ldi	r21, 0x41	; 65
    34f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	bc 01       	movw	r22, r24
    34fc:	cd 01       	movw	r24, r26
    34fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	9c 8b       	std	Y+20, r25	; 0x14
    3508:	8b 8b       	std	Y+19, r24	; 0x13
    350a:	0f c0       	rjmp	.+30     	; 0x352a <LCD_8_BitvidInit+0x2c0>
    350c:	88 ec       	ldi	r24, 0xC8	; 200
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	9a 8b       	std	Y+18, r25	; 0x12
    3512:	89 8b       	std	Y+17, r24	; 0x11
    3514:	89 89       	ldd	r24, Y+17	; 0x11
    3516:	9a 89       	ldd	r25, Y+18	; 0x12
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	f1 f7       	brne	.-4      	; 0x3518 <LCD_8_BitvidInit+0x2ae>
    351c:	9a 8b       	std	Y+18, r25	; 0x12
    351e:	89 8b       	std	Y+17, r24	; 0x11
    3520:	8b 89       	ldd	r24, Y+19	; 0x13
    3522:	9c 89       	ldd	r25, Y+20	; 0x14
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	9c 8b       	std	Y+20, r25	; 0x14
    3528:	8b 8b       	std	Y+19, r24	; 0x13
    352a:	8b 89       	ldd	r24, Y+19	; 0x13
    352c:	9c 89       	ldd	r25, Y+20	; 0x14
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	69 f7       	brne	.-38     	; 0x350c <LCD_8_BitvidInit+0x2a2>
    3532:	14 c0       	rjmp	.+40     	; 0x355c <LCD_8_BitvidInit+0x2f2>
    3534:	6d 89       	ldd	r22, Y+21	; 0x15
    3536:	7e 89       	ldd	r23, Y+22	; 0x16
    3538:	8f 89       	ldd	r24, Y+23	; 0x17
    353a:	98 8d       	ldd	r25, Y+24	; 0x18
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	9c 8b       	std	Y+20, r25	; 0x14
    3546:	8b 8b       	std	Y+19, r24	; 0x13
    3548:	8b 89       	ldd	r24, Y+19	; 0x13
    354a:	9c 89       	ldd	r25, Y+20	; 0x14
    354c:	98 8b       	std	Y+16, r25	; 0x10
    354e:	8f 87       	std	Y+15, r24	; 0x0f
    3550:	8f 85       	ldd	r24, Y+15	; 0x0f
    3552:	98 89       	ldd	r25, Y+16	; 0x10
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	f1 f7       	brne	.-4      	; 0x3554 <LCD_8_BitvidInit+0x2ea>
    3558:	98 8b       	std	Y+16, r25	; 0x10
    355a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_8_BitvidsendCommand(LCD_8_BIT_DISPLAY_CLEAR_CMD);
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	0e 94 2f 1b 	call	0x365e	; 0x365e <LCD_8_BitvidsendCommand>
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	a0 e0       	ldi	r26, 0x00	; 0
    3568:	b0 e4       	ldi	r27, 0x40	; 64
    356a:	8b 87       	std	Y+11, r24	; 0x0b
    356c:	9c 87       	std	Y+12, r25	; 0x0c
    356e:	ad 87       	std	Y+13, r26	; 0x0d
    3570:	be 87       	std	Y+14, r27	; 0x0e
    3572:	6b 85       	ldd	r22, Y+11	; 0x0b
    3574:	7c 85       	ldd	r23, Y+12	; 0x0c
    3576:	8d 85       	ldd	r24, Y+13	; 0x0d
    3578:	9e 85       	ldd	r25, Y+14	; 0x0e
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	4a ef       	ldi	r20, 0xFA	; 250
    3580:	54 e4       	ldi	r21, 0x44	; 68
    3582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	8f 83       	std	Y+7, r24	; 0x07
    358c:	98 87       	std	Y+8, r25	; 0x08
    358e:	a9 87       	std	Y+9, r26	; 0x09
    3590:	ba 87       	std	Y+10, r27	; 0x0a
    3592:	6f 81       	ldd	r22, Y+7	; 0x07
    3594:	78 85       	ldd	r23, Y+8	; 0x08
    3596:	89 85       	ldd	r24, Y+9	; 0x09
    3598:	9a 85       	ldd	r25, Y+10	; 0x0a
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 e8       	ldi	r20, 0x80	; 128
    35a0:	5f e3       	ldi	r21, 0x3F	; 63
    35a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35a6:	88 23       	and	r24, r24
    35a8:	2c f4       	brge	.+10     	; 0x35b4 <LCD_8_BitvidInit+0x34a>
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	9e 83       	std	Y+6, r25	; 0x06
    35b0:	8d 83       	std	Y+5, r24	; 0x05
    35b2:	3f c0       	rjmp	.+126    	; 0x3632 <LCD_8_BitvidInit+0x3c8>
    35b4:	6f 81       	ldd	r22, Y+7	; 0x07
    35b6:	78 85       	ldd	r23, Y+8	; 0x08
    35b8:	89 85       	ldd	r24, Y+9	; 0x09
    35ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	3f ef       	ldi	r19, 0xFF	; 255
    35c0:	4f e7       	ldi	r20, 0x7F	; 127
    35c2:	57 e4       	ldi	r21, 0x47	; 71
    35c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35c8:	18 16       	cp	r1, r24
    35ca:	4c f5       	brge	.+82     	; 0x361e <LCD_8_BitvidInit+0x3b4>
    35cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	40 e2       	ldi	r20, 0x20	; 32
    35da:	51 e4       	ldi	r21, 0x41	; 65
    35dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	9e 83       	std	Y+6, r25	; 0x06
    35f2:	8d 83       	std	Y+5, r24	; 0x05
    35f4:	0f c0       	rjmp	.+30     	; 0x3614 <LCD_8_BitvidInit+0x3aa>
    35f6:	88 ec       	ldi	r24, 0xC8	; 200
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	9c 83       	std	Y+4, r25	; 0x04
    35fc:	8b 83       	std	Y+3, r24	; 0x03
    35fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3600:	9c 81       	ldd	r25, Y+4	; 0x04
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <LCD_8_BitvidInit+0x398>
    3606:	9c 83       	std	Y+4, r25	; 0x04
    3608:	8b 83       	std	Y+3, r24	; 0x03
    360a:	8d 81       	ldd	r24, Y+5	; 0x05
    360c:	9e 81       	ldd	r25, Y+6	; 0x06
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	9e 83       	std	Y+6, r25	; 0x06
    3612:	8d 83       	std	Y+5, r24	; 0x05
    3614:	8d 81       	ldd	r24, Y+5	; 0x05
    3616:	9e 81       	ldd	r25, Y+6	; 0x06
    3618:	00 97       	sbiw	r24, 0x00	; 0
    361a:	69 f7       	brne	.-38     	; 0x35f6 <LCD_8_BitvidInit+0x38c>
    361c:	14 c0       	rjmp	.+40     	; 0x3646 <LCD_8_BitvidInit+0x3dc>
    361e:	6f 81       	ldd	r22, Y+7	; 0x07
    3620:	78 85       	ldd	r23, Y+8	; 0x08
    3622:	89 85       	ldd	r24, Y+9	; 0x09
    3624:	9a 85       	ldd	r25, Y+10	; 0x0a
    3626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	9e 83       	std	Y+6, r25	; 0x06
    3630:	8d 83       	std	Y+5, r24	; 0x05
    3632:	8d 81       	ldd	r24, Y+5	; 0x05
    3634:	9e 81       	ldd	r25, Y+6	; 0x06
    3636:	9a 83       	std	Y+2, r25	; 0x02
    3638:	89 83       	std	Y+1, r24	; 0x01
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	9a 81       	ldd	r25, Y+2	; 0x02
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	f1 f7       	brne	.-4      	; 0x363e <LCD_8_BitvidInit+0x3d4>
    3642:	9a 83       	std	Y+2, r25	; 0x02
    3644:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_8_BitvidsendCommand(LCD_8_BIT_ENTRY_MODE_SET_CMD);
    3646:	86 e0       	ldi	r24, 0x06	; 6
    3648:	0e 94 2f 1b 	call	0x365e	; 0x365e <LCD_8_BitvidsendCommand>

}
    364c:	e8 96       	adiw	r28, 0x38	; 56
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	cf 91       	pop	r28
    365a:	df 91       	pop	r29
    365c:	08 95       	ret

0000365e <LCD_8_BitvidsendCommand>:
void LCD_8_BitvidsendCommand(u8 Copy_u8command)
{
    365e:	df 93       	push	r29
    3660:	cf 93       	push	r28
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
    3666:	6d 97       	sbiw	r28, 0x1d	; 29
    3668:	0f b6       	in	r0, 0x3f	; 63
    366a:	f8 94       	cli
    366c:	de bf       	out	0x3e, r29	; 62
    366e:	0f be       	out	0x3f, r0	; 63
    3670:	cd bf       	out	0x3d, r28	; 61
    3672:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    3674:	82 e0       	ldi	r24, 0x02	; 2
    3676:	60 e0       	ldi	r22, 0x00	; 0
    3678:	40 e0       	ldi	r20, 0x00	; 0
    367a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    367e:	82 e0       	ldi	r24, 0x02	; 2
    3680:	61 e0       	ldi	r22, 0x01	; 1
    3682:	40 e0       	ldi	r20, 0x00	; 0
    3684:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8command);
    3688:	83 e0       	ldi	r24, 0x03	; 3
    368a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    368c:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    3690:	82 e0       	ldi	r24, 0x02	; 2
    3692:	62 e0       	ldi	r22, 0x02	; 2
    3694:	41 e0       	ldi	r20, 0x01	; 1
    3696:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	a0 e0       	ldi	r26, 0x00	; 0
    36a0:	b0 e4       	ldi	r27, 0x40	; 64
    36a2:	89 8f       	std	Y+25, r24	; 0x19
    36a4:	9a 8f       	std	Y+26, r25	; 0x1a
    36a6:	ab 8f       	std	Y+27, r26	; 0x1b
    36a8:	bc 8f       	std	Y+28, r27	; 0x1c
    36aa:	69 8d       	ldd	r22, Y+25	; 0x19
    36ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	4a ef       	ldi	r20, 0xFA	; 250
    36b8:	54 e4       	ldi	r21, 0x44	; 68
    36ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	8d 8b       	std	Y+21, r24	; 0x15
    36c4:	9e 8b       	std	Y+22, r25	; 0x16
    36c6:	af 8b       	std	Y+23, r26	; 0x17
    36c8:	b8 8f       	std	Y+24, r27	; 0x18
    36ca:	6d 89       	ldd	r22, Y+21	; 0x15
    36cc:	7e 89       	ldd	r23, Y+22	; 0x16
    36ce:	8f 89       	ldd	r24, Y+23	; 0x17
    36d0:	98 8d       	ldd	r25, Y+24	; 0x18
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	40 e8       	ldi	r20, 0x80	; 128
    36d8:	5f e3       	ldi	r21, 0x3F	; 63
    36da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36de:	88 23       	and	r24, r24
    36e0:	2c f4       	brge	.+10     	; 0x36ec <LCD_8_BitvidsendCommand+0x8e>
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	9c 8b       	std	Y+20, r25	; 0x14
    36e8:	8b 8b       	std	Y+19, r24	; 0x13
    36ea:	3f c0       	rjmp	.+126    	; 0x376a <LCD_8_BitvidsendCommand+0x10c>
    36ec:	6d 89       	ldd	r22, Y+21	; 0x15
    36ee:	7e 89       	ldd	r23, Y+22	; 0x16
    36f0:	8f 89       	ldd	r24, Y+23	; 0x17
    36f2:	98 8d       	ldd	r25, Y+24	; 0x18
    36f4:	20 e0       	ldi	r18, 0x00	; 0
    36f6:	3f ef       	ldi	r19, 0xFF	; 255
    36f8:	4f e7       	ldi	r20, 0x7F	; 127
    36fa:	57 e4       	ldi	r21, 0x47	; 71
    36fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3700:	18 16       	cp	r1, r24
    3702:	4c f5       	brge	.+82     	; 0x3756 <LCD_8_BitvidsendCommand+0xf8>
    3704:	69 8d       	ldd	r22, Y+25	; 0x19
    3706:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3708:	8b 8d       	ldd	r24, Y+27	; 0x1b
    370a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	40 e2       	ldi	r20, 0x20	; 32
    3712:	51 e4       	ldi	r21, 0x41	; 65
    3714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	bc 01       	movw	r22, r24
    371e:	cd 01       	movw	r24, r26
    3720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	9c 8b       	std	Y+20, r25	; 0x14
    372a:	8b 8b       	std	Y+19, r24	; 0x13
    372c:	0f c0       	rjmp	.+30     	; 0x374c <LCD_8_BitvidsendCommand+0xee>
    372e:	88 ec       	ldi	r24, 0xC8	; 200
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	9a 8b       	std	Y+18, r25	; 0x12
    3734:	89 8b       	std	Y+17, r24	; 0x11
    3736:	89 89       	ldd	r24, Y+17	; 0x11
    3738:	9a 89       	ldd	r25, Y+18	; 0x12
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	f1 f7       	brne	.-4      	; 0x373a <LCD_8_BitvidsendCommand+0xdc>
    373e:	9a 8b       	std	Y+18, r25	; 0x12
    3740:	89 8b       	std	Y+17, r24	; 0x11
    3742:	8b 89       	ldd	r24, Y+19	; 0x13
    3744:	9c 89       	ldd	r25, Y+20	; 0x14
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	9c 8b       	std	Y+20, r25	; 0x14
    374a:	8b 8b       	std	Y+19, r24	; 0x13
    374c:	8b 89       	ldd	r24, Y+19	; 0x13
    374e:	9c 89       	ldd	r25, Y+20	; 0x14
    3750:	00 97       	sbiw	r24, 0x00	; 0
    3752:	69 f7       	brne	.-38     	; 0x372e <LCD_8_BitvidsendCommand+0xd0>
    3754:	14 c0       	rjmp	.+40     	; 0x377e <LCD_8_BitvidsendCommand+0x120>
    3756:	6d 89       	ldd	r22, Y+21	; 0x15
    3758:	7e 89       	ldd	r23, Y+22	; 0x16
    375a:	8f 89       	ldd	r24, Y+23	; 0x17
    375c:	98 8d       	ldd	r25, Y+24	; 0x18
    375e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	9c 8b       	std	Y+20, r25	; 0x14
    3768:	8b 8b       	std	Y+19, r24	; 0x13
    376a:	8b 89       	ldd	r24, Y+19	; 0x13
    376c:	9c 89       	ldd	r25, Y+20	; 0x14
    376e:	98 8b       	std	Y+16, r25	; 0x10
    3770:	8f 87       	std	Y+15, r24	; 0x0f
    3772:	8f 85       	ldd	r24, Y+15	; 0x0f
    3774:	98 89       	ldd	r25, Y+16	; 0x10
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	f1 f7       	brne	.-4      	; 0x3776 <LCD_8_BitvidsendCommand+0x118>
    377a:	98 8b       	std	Y+16, r25	; 0x10
    377c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    377e:	82 e0       	ldi	r24, 0x02	; 2
    3780:	62 e0       	ldi	r22, 0x02	; 2
    3782:	40 e0       	ldi	r20, 0x00	; 0
    3784:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	a0 e0       	ldi	r26, 0x00	; 0
    378e:	b0 e4       	ldi	r27, 0x40	; 64
    3790:	8b 87       	std	Y+11, r24	; 0x0b
    3792:	9c 87       	std	Y+12, r25	; 0x0c
    3794:	ad 87       	std	Y+13, r26	; 0x0d
    3796:	be 87       	std	Y+14, r27	; 0x0e
    3798:	6b 85       	ldd	r22, Y+11	; 0x0b
    379a:	7c 85       	ldd	r23, Y+12	; 0x0c
    379c:	8d 85       	ldd	r24, Y+13	; 0x0d
    379e:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	4a ef       	ldi	r20, 0xFA	; 250
    37a6:	54 e4       	ldi	r21, 0x44	; 68
    37a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	8f 83       	std	Y+7, r24	; 0x07
    37b2:	98 87       	std	Y+8, r25	; 0x08
    37b4:	a9 87       	std	Y+9, r26	; 0x09
    37b6:	ba 87       	std	Y+10, r27	; 0x0a
    37b8:	6f 81       	ldd	r22, Y+7	; 0x07
    37ba:	78 85       	ldd	r23, Y+8	; 0x08
    37bc:	89 85       	ldd	r24, Y+9	; 0x09
    37be:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	40 e8       	ldi	r20, 0x80	; 128
    37c6:	5f e3       	ldi	r21, 0x3F	; 63
    37c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37cc:	88 23       	and	r24, r24
    37ce:	2c f4       	brge	.+10     	; 0x37da <LCD_8_BitvidsendCommand+0x17c>
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	9e 83       	std	Y+6, r25	; 0x06
    37d6:	8d 83       	std	Y+5, r24	; 0x05
    37d8:	3f c0       	rjmp	.+126    	; 0x3858 <LCD_8_BitvidsendCommand+0x1fa>
    37da:	6f 81       	ldd	r22, Y+7	; 0x07
    37dc:	78 85       	ldd	r23, Y+8	; 0x08
    37de:	89 85       	ldd	r24, Y+9	; 0x09
    37e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	3f ef       	ldi	r19, 0xFF	; 255
    37e6:	4f e7       	ldi	r20, 0x7F	; 127
    37e8:	57 e4       	ldi	r21, 0x47	; 71
    37ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ee:	18 16       	cp	r1, r24
    37f0:	4c f5       	brge	.+82     	; 0x3844 <LCD_8_BitvidsendCommand+0x1e6>
    37f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e2       	ldi	r20, 0x20	; 32
    3800:	51 e4       	ldi	r21, 0x41	; 65
    3802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	bc 01       	movw	r22, r24
    380c:	cd 01       	movw	r24, r26
    380e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	9e 83       	std	Y+6, r25	; 0x06
    3818:	8d 83       	std	Y+5, r24	; 0x05
    381a:	0f c0       	rjmp	.+30     	; 0x383a <LCD_8_BitvidsendCommand+0x1dc>
    381c:	88 ec       	ldi	r24, 0xC8	; 200
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	9c 83       	std	Y+4, r25	; 0x04
    3822:	8b 83       	std	Y+3, r24	; 0x03
    3824:	8b 81       	ldd	r24, Y+3	; 0x03
    3826:	9c 81       	ldd	r25, Y+4	; 0x04
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	f1 f7       	brne	.-4      	; 0x3828 <LCD_8_BitvidsendCommand+0x1ca>
    382c:	9c 83       	std	Y+4, r25	; 0x04
    382e:	8b 83       	std	Y+3, r24	; 0x03
    3830:	8d 81       	ldd	r24, Y+5	; 0x05
    3832:	9e 81       	ldd	r25, Y+6	; 0x06
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	9e 83       	std	Y+6, r25	; 0x06
    3838:	8d 83       	std	Y+5, r24	; 0x05
    383a:	8d 81       	ldd	r24, Y+5	; 0x05
    383c:	9e 81       	ldd	r25, Y+6	; 0x06
    383e:	00 97       	sbiw	r24, 0x00	; 0
    3840:	69 f7       	brne	.-38     	; 0x381c <LCD_8_BitvidsendCommand+0x1be>
    3842:	14 c0       	rjmp	.+40     	; 0x386c <LCD_8_BitvidsendCommand+0x20e>
    3844:	6f 81       	ldd	r22, Y+7	; 0x07
    3846:	78 85       	ldd	r23, Y+8	; 0x08
    3848:	89 85       	ldd	r24, Y+9	; 0x09
    384a:	9a 85       	ldd	r25, Y+10	; 0x0a
    384c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9e 83       	std	Y+6, r25	; 0x06
    3856:	8d 83       	std	Y+5, r24	; 0x05
    3858:	8d 81       	ldd	r24, Y+5	; 0x05
    385a:	9e 81       	ldd	r25, Y+6	; 0x06
    385c:	9a 83       	std	Y+2, r25	; 0x02
    385e:	89 83       	std	Y+1, r24	; 0x01
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	9a 81       	ldd	r25, Y+2	; 0x02
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	f1 f7       	brne	.-4      	; 0x3864 <LCD_8_BitvidsendCommand+0x206>
    3868:	9a 83       	std	Y+2, r25	; 0x02
    386a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    386c:	6d 96       	adiw	r28, 0x1d	; 29
    386e:	0f b6       	in	r0, 0x3f	; 63
    3870:	f8 94       	cli
    3872:	de bf       	out	0x3e, r29	; 62
    3874:	0f be       	out	0x3f, r0	; 63
    3876:	cd bf       	out	0x3d, r28	; 61
    3878:	cf 91       	pop	r28
    387a:	df 91       	pop	r29
    387c:	08 95       	ret

0000387e <LCD_8_BitvidwriteCharacter>:
void LCD_8_BitvidwriteCharacter(u8 Copy_u8character)
{
    387e:	df 93       	push	r29
    3880:	cf 93       	push	r28
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	6d 97       	sbiw	r28, 0x1d	; 29
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	de bf       	out	0x3e, r29	; 62
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    3894:	82 e0       	ldi	r24, 0x02	; 2
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	41 e0       	ldi	r20, 0x01	; 1
    389a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    389e:	82 e0       	ldi	r24, 0x02	; 2
    38a0:	61 e0       	ldi	r22, 0x01	; 1
    38a2:	40 e0       	ldi	r20, 0x00	; 0
    38a4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8character);
    38a8:	83 e0       	ldi	r24, 0x03	; 3
    38aa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    38ac:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    38b0:	82 e0       	ldi	r24, 0x02	; 2
    38b2:	62 e0       	ldi	r22, 0x02	; 2
    38b4:	41 e0       	ldi	r20, 0x01	; 1
    38b6:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	a0 e0       	ldi	r26, 0x00	; 0
    38c0:	b0 e4       	ldi	r27, 0x40	; 64
    38c2:	89 8f       	std	Y+25, r24	; 0x19
    38c4:	9a 8f       	std	Y+26, r25	; 0x1a
    38c6:	ab 8f       	std	Y+27, r26	; 0x1b
    38c8:	bc 8f       	std	Y+28, r27	; 0x1c
    38ca:	69 8d       	ldd	r22, Y+25	; 0x19
    38cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	4a ef       	ldi	r20, 0xFA	; 250
    38d8:	54 e4       	ldi	r21, 0x44	; 68
    38da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	8d 8b       	std	Y+21, r24	; 0x15
    38e4:	9e 8b       	std	Y+22, r25	; 0x16
    38e6:	af 8b       	std	Y+23, r26	; 0x17
    38e8:	b8 8f       	std	Y+24, r27	; 0x18
    38ea:	6d 89       	ldd	r22, Y+21	; 0x15
    38ec:	7e 89       	ldd	r23, Y+22	; 0x16
    38ee:	8f 89       	ldd	r24, Y+23	; 0x17
    38f0:	98 8d       	ldd	r25, Y+24	; 0x18
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	40 e8       	ldi	r20, 0x80	; 128
    38f8:	5f e3       	ldi	r21, 0x3F	; 63
    38fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38fe:	88 23       	and	r24, r24
    3900:	2c f4       	brge	.+10     	; 0x390c <LCD_8_BitvidwriteCharacter+0x8e>
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	9c 8b       	std	Y+20, r25	; 0x14
    3908:	8b 8b       	std	Y+19, r24	; 0x13
    390a:	3f c0       	rjmp	.+126    	; 0x398a <LCD_8_BitvidwriteCharacter+0x10c>
    390c:	6d 89       	ldd	r22, Y+21	; 0x15
    390e:	7e 89       	ldd	r23, Y+22	; 0x16
    3910:	8f 89       	ldd	r24, Y+23	; 0x17
    3912:	98 8d       	ldd	r25, Y+24	; 0x18
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	3f ef       	ldi	r19, 0xFF	; 255
    3918:	4f e7       	ldi	r20, 0x7F	; 127
    391a:	57 e4       	ldi	r21, 0x47	; 71
    391c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3920:	18 16       	cp	r1, r24
    3922:	4c f5       	brge	.+82     	; 0x3976 <LCD_8_BitvidwriteCharacter+0xf8>
    3924:	69 8d       	ldd	r22, Y+25	; 0x19
    3926:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3928:	8b 8d       	ldd	r24, Y+27	; 0x1b
    392a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	40 e2       	ldi	r20, 0x20	; 32
    3932:	51 e4       	ldi	r21, 0x41	; 65
    3934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	bc 01       	movw	r22, r24
    393e:	cd 01       	movw	r24, r26
    3940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	9c 8b       	std	Y+20, r25	; 0x14
    394a:	8b 8b       	std	Y+19, r24	; 0x13
    394c:	0f c0       	rjmp	.+30     	; 0x396c <LCD_8_BitvidwriteCharacter+0xee>
    394e:	88 ec       	ldi	r24, 0xC8	; 200
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	9a 8b       	std	Y+18, r25	; 0x12
    3954:	89 8b       	std	Y+17, r24	; 0x11
    3956:	89 89       	ldd	r24, Y+17	; 0x11
    3958:	9a 89       	ldd	r25, Y+18	; 0x12
    395a:	01 97       	sbiw	r24, 0x01	; 1
    395c:	f1 f7       	brne	.-4      	; 0x395a <LCD_8_BitvidwriteCharacter+0xdc>
    395e:	9a 8b       	std	Y+18, r25	; 0x12
    3960:	89 8b       	std	Y+17, r24	; 0x11
    3962:	8b 89       	ldd	r24, Y+19	; 0x13
    3964:	9c 89       	ldd	r25, Y+20	; 0x14
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	9c 8b       	std	Y+20, r25	; 0x14
    396a:	8b 8b       	std	Y+19, r24	; 0x13
    396c:	8b 89       	ldd	r24, Y+19	; 0x13
    396e:	9c 89       	ldd	r25, Y+20	; 0x14
    3970:	00 97       	sbiw	r24, 0x00	; 0
    3972:	69 f7       	brne	.-38     	; 0x394e <LCD_8_BitvidwriteCharacter+0xd0>
    3974:	14 c0       	rjmp	.+40     	; 0x399e <LCD_8_BitvidwriteCharacter+0x120>
    3976:	6d 89       	ldd	r22, Y+21	; 0x15
    3978:	7e 89       	ldd	r23, Y+22	; 0x16
    397a:	8f 89       	ldd	r24, Y+23	; 0x17
    397c:	98 8d       	ldd	r25, Y+24	; 0x18
    397e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	9c 8b       	std	Y+20, r25	; 0x14
    3988:	8b 8b       	std	Y+19, r24	; 0x13
    398a:	8b 89       	ldd	r24, Y+19	; 0x13
    398c:	9c 89       	ldd	r25, Y+20	; 0x14
    398e:	98 8b       	std	Y+16, r25	; 0x10
    3990:	8f 87       	std	Y+15, r24	; 0x0f
    3992:	8f 85       	ldd	r24, Y+15	; 0x0f
    3994:	98 89       	ldd	r25, Y+16	; 0x10
    3996:	01 97       	sbiw	r24, 0x01	; 1
    3998:	f1 f7       	brne	.-4      	; 0x3996 <LCD_8_BitvidwriteCharacter+0x118>
    399a:	98 8b       	std	Y+16, r25	; 0x10
    399c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    399e:	82 e0       	ldi	r24, 0x02	; 2
    39a0:	62 e0       	ldi	r22, 0x02	; 2
    39a2:	40 e0       	ldi	r20, 0x00	; 0
    39a4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	a0 e0       	ldi	r26, 0x00	; 0
    39ae:	b0 e4       	ldi	r27, 0x40	; 64
    39b0:	8b 87       	std	Y+11, r24	; 0x0b
    39b2:	9c 87       	std	Y+12, r25	; 0x0c
    39b4:	ad 87       	std	Y+13, r26	; 0x0d
    39b6:	be 87       	std	Y+14, r27	; 0x0e
    39b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    39bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    39be:	9e 85       	ldd	r25, Y+14	; 0x0e
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	4a ef       	ldi	r20, 0xFA	; 250
    39c6:	54 e4       	ldi	r21, 0x44	; 68
    39c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	8f 83       	std	Y+7, r24	; 0x07
    39d2:	98 87       	std	Y+8, r25	; 0x08
    39d4:	a9 87       	std	Y+9, r26	; 0x09
    39d6:	ba 87       	std	Y+10, r27	; 0x0a
    39d8:	6f 81       	ldd	r22, Y+7	; 0x07
    39da:	78 85       	ldd	r23, Y+8	; 0x08
    39dc:	89 85       	ldd	r24, Y+9	; 0x09
    39de:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	40 e8       	ldi	r20, 0x80	; 128
    39e6:	5f e3       	ldi	r21, 0x3F	; 63
    39e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ec:	88 23       	and	r24, r24
    39ee:	2c f4       	brge	.+10     	; 0x39fa <LCD_8_BitvidwriteCharacter+0x17c>
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	9e 83       	std	Y+6, r25	; 0x06
    39f6:	8d 83       	std	Y+5, r24	; 0x05
    39f8:	3f c0       	rjmp	.+126    	; 0x3a78 <LCD_8_BitvidwriteCharacter+0x1fa>
    39fa:	6f 81       	ldd	r22, Y+7	; 0x07
    39fc:	78 85       	ldd	r23, Y+8	; 0x08
    39fe:	89 85       	ldd	r24, Y+9	; 0x09
    3a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	3f ef       	ldi	r19, 0xFF	; 255
    3a06:	4f e7       	ldi	r20, 0x7F	; 127
    3a08:	57 e4       	ldi	r21, 0x47	; 71
    3a0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a0e:	18 16       	cp	r1, r24
    3a10:	4c f5       	brge	.+82     	; 0x3a64 <LCD_8_BitvidwriteCharacter+0x1e6>
    3a12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	40 e2       	ldi	r20, 0x20	; 32
    3a20:	51 e4       	ldi	r21, 0x41	; 65
    3a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a26:	dc 01       	movw	r26, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	bc 01       	movw	r22, r24
    3a2c:	cd 01       	movw	r24, r26
    3a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	9e 83       	std	Y+6, r25	; 0x06
    3a38:	8d 83       	std	Y+5, r24	; 0x05
    3a3a:	0f c0       	rjmp	.+30     	; 0x3a5a <LCD_8_BitvidwriteCharacter+0x1dc>
    3a3c:	88 ec       	ldi	r24, 0xC8	; 200
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	9c 83       	std	Y+4, r25	; 0x04
    3a42:	8b 83       	std	Y+3, r24	; 0x03
    3a44:	8b 81       	ldd	r24, Y+3	; 0x03
    3a46:	9c 81       	ldd	r25, Y+4	; 0x04
    3a48:	01 97       	sbiw	r24, 0x01	; 1
    3a4a:	f1 f7       	brne	.-4      	; 0x3a48 <LCD_8_BitvidwriteCharacter+0x1ca>
    3a4c:	9c 83       	std	Y+4, r25	; 0x04
    3a4e:	8b 83       	std	Y+3, r24	; 0x03
    3a50:	8d 81       	ldd	r24, Y+5	; 0x05
    3a52:	9e 81       	ldd	r25, Y+6	; 0x06
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	9e 83       	std	Y+6, r25	; 0x06
    3a58:	8d 83       	std	Y+5, r24	; 0x05
    3a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5e:	00 97       	sbiw	r24, 0x00	; 0
    3a60:	69 f7       	brne	.-38     	; 0x3a3c <LCD_8_BitvidwriteCharacter+0x1be>
    3a62:	14 c0       	rjmp	.+40     	; 0x3a8c <LCD_8_BitvidwriteCharacter+0x20e>
    3a64:	6f 81       	ldd	r22, Y+7	; 0x07
    3a66:	78 85       	ldd	r23, Y+8	; 0x08
    3a68:	89 85       	ldd	r24, Y+9	; 0x09
    3a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	9e 83       	std	Y+6, r25	; 0x06
    3a76:	8d 83       	std	Y+5, r24	; 0x05
    3a78:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7c:	9a 83       	std	Y+2, r25	; 0x02
    3a7e:	89 83       	std	Y+1, r24	; 0x01
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	9a 81       	ldd	r25, Y+2	; 0x02
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	f1 f7       	brne	.-4      	; 0x3a84 <LCD_8_BitvidwriteCharacter+0x206>
    3a88:	9a 83       	std	Y+2, r25	; 0x02
    3a8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3a8c:	6d 96       	adiw	r28, 0x1d	; 29
    3a8e:	0f b6       	in	r0, 0x3f	; 63
    3a90:	f8 94       	cli
    3a92:	de bf       	out	0x3e, r29	; 62
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	cd bf       	out	0x3d, r28	; 61
    3a98:	cf 91       	pop	r28
    3a9a:	df 91       	pop	r29
    3a9c:	08 95       	ret

00003a9e <LCD_8_BitvidreadCharacter>:
void LCD_8_BitvidreadCharacter(u8 Copy_u8character)
{
    3a9e:	df 93       	push	r29
    3aa0:	cf 93       	push	r28
    3aa2:	cd b7       	in	r28, 0x3d	; 61
    3aa4:	de b7       	in	r29, 0x3e	; 62
    3aa6:	6d 97       	sbiw	r28, 0x1d	; 29
    3aa8:	0f b6       	in	r0, 0x3f	; 63
    3aaa:	f8 94       	cli
    3aac:	de bf       	out	0x3e, r29	; 62
    3aae:	0f be       	out	0x3f, r0	; 63
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    3ab4:	82 e0       	ldi	r24, 0x02	; 2
    3ab6:	60 e0       	ldi	r22, 0x00	; 0
    3ab8:	41 e0       	ldi	r20, 0x01	; 1
    3aba:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, HIGH);
    3abe:	82 e0       	ldi	r24, 0x02	; 2
    3ac0:	61 e0       	ldi	r22, 0x01	; 1
    3ac2:	41 e0       	ldi	r20, 0x01	; 1
    3ac4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8character);
    3ac8:	83 e0       	ldi	r24, 0x03	; 3
    3aca:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3acc:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    3ad0:	82 e0       	ldi	r24, 0x02	; 2
    3ad2:	62 e0       	ldi	r22, 0x02	; 2
    3ad4:	41 e0       	ldi	r20, 0x01	; 1
    3ad6:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	a0 e0       	ldi	r26, 0x00	; 0
    3ae0:	b0 e4       	ldi	r27, 0x40	; 64
    3ae2:	89 8f       	std	Y+25, r24	; 0x19
    3ae4:	9a 8f       	std	Y+26, r25	; 0x1a
    3ae6:	ab 8f       	std	Y+27, r26	; 0x1b
    3ae8:	bc 8f       	std	Y+28, r27	; 0x1c
    3aea:	69 8d       	ldd	r22, Y+25	; 0x19
    3aec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3af0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	4a ef       	ldi	r20, 0xFA	; 250
    3af8:	54 e4       	ldi	r21, 0x44	; 68
    3afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3afe:	dc 01       	movw	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	8d 8b       	std	Y+21, r24	; 0x15
    3b04:	9e 8b       	std	Y+22, r25	; 0x16
    3b06:	af 8b       	std	Y+23, r26	; 0x17
    3b08:	b8 8f       	std	Y+24, r27	; 0x18
    3b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b10:	98 8d       	ldd	r25, Y+24	; 0x18
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	40 e8       	ldi	r20, 0x80	; 128
    3b18:	5f e3       	ldi	r21, 0x3F	; 63
    3b1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b1e:	88 23       	and	r24, r24
    3b20:	2c f4       	brge	.+10     	; 0x3b2c <LCD_8_BitvidreadCharacter+0x8e>
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	9c 8b       	std	Y+20, r25	; 0x14
    3b28:	8b 8b       	std	Y+19, r24	; 0x13
    3b2a:	3f c0       	rjmp	.+126    	; 0x3baa <LCD_8_BitvidreadCharacter+0x10c>
    3b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    3b30:	8f 89       	ldd	r24, Y+23	; 0x17
    3b32:	98 8d       	ldd	r25, Y+24	; 0x18
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	3f ef       	ldi	r19, 0xFF	; 255
    3b38:	4f e7       	ldi	r20, 0x7F	; 127
    3b3a:	57 e4       	ldi	r21, 0x47	; 71
    3b3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b40:	18 16       	cp	r1, r24
    3b42:	4c f5       	brge	.+82     	; 0x3b96 <LCD_8_BitvidreadCharacter+0xf8>
    3b44:	69 8d       	ldd	r22, Y+25	; 0x19
    3b46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	40 e2       	ldi	r20, 0x20	; 32
    3b52:	51 e4       	ldi	r21, 0x41	; 65
    3b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b58:	dc 01       	movw	r26, r24
    3b5a:	cb 01       	movw	r24, r22
    3b5c:	bc 01       	movw	r22, r24
    3b5e:	cd 01       	movw	r24, r26
    3b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	9c 8b       	std	Y+20, r25	; 0x14
    3b6a:	8b 8b       	std	Y+19, r24	; 0x13
    3b6c:	0f c0       	rjmp	.+30     	; 0x3b8c <LCD_8_BitvidreadCharacter+0xee>
    3b6e:	88 ec       	ldi	r24, 0xC8	; 200
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	9a 8b       	std	Y+18, r25	; 0x12
    3b74:	89 8b       	std	Y+17, r24	; 0x11
    3b76:	89 89       	ldd	r24, Y+17	; 0x11
    3b78:	9a 89       	ldd	r25, Y+18	; 0x12
    3b7a:	01 97       	sbiw	r24, 0x01	; 1
    3b7c:	f1 f7       	brne	.-4      	; 0x3b7a <LCD_8_BitvidreadCharacter+0xdc>
    3b7e:	9a 8b       	std	Y+18, r25	; 0x12
    3b80:	89 8b       	std	Y+17, r24	; 0x11
    3b82:	8b 89       	ldd	r24, Y+19	; 0x13
    3b84:	9c 89       	ldd	r25, Y+20	; 0x14
    3b86:	01 97       	sbiw	r24, 0x01	; 1
    3b88:	9c 8b       	std	Y+20, r25	; 0x14
    3b8a:	8b 8b       	std	Y+19, r24	; 0x13
    3b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b90:	00 97       	sbiw	r24, 0x00	; 0
    3b92:	69 f7       	brne	.-38     	; 0x3b6e <LCD_8_BitvidreadCharacter+0xd0>
    3b94:	14 c0       	rjmp	.+40     	; 0x3bbe <LCD_8_BitvidreadCharacter+0x120>
    3b96:	6d 89       	ldd	r22, Y+21	; 0x15
    3b98:	7e 89       	ldd	r23, Y+22	; 0x16
    3b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	9c 8b       	std	Y+20, r25	; 0x14
    3ba8:	8b 8b       	std	Y+19, r24	; 0x13
    3baa:	8b 89       	ldd	r24, Y+19	; 0x13
    3bac:	9c 89       	ldd	r25, Y+20	; 0x14
    3bae:	98 8b       	std	Y+16, r25	; 0x10
    3bb0:	8f 87       	std	Y+15, r24	; 0x0f
    3bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bb4:	98 89       	ldd	r25, Y+16	; 0x10
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	f1 f7       	brne	.-4      	; 0x3bb6 <LCD_8_BitvidreadCharacter+0x118>
    3bba:	98 8b       	std	Y+16, r25	; 0x10
    3bbc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    3bbe:	82 e0       	ldi	r24, 0x02	; 2
    3bc0:	62 e0       	ldi	r22, 0x02	; 2
    3bc2:	40 e0       	ldi	r20, 0x00	; 0
    3bc4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_u8setPinValue>
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	a0 e0       	ldi	r26, 0x00	; 0
    3bce:	b0 e4       	ldi	r27, 0x40	; 64
    3bd0:	8b 87       	std	Y+11, r24	; 0x0b
    3bd2:	9c 87       	std	Y+12, r25	; 0x0c
    3bd4:	ad 87       	std	Y+13, r26	; 0x0d
    3bd6:	be 87       	std	Y+14, r27	; 0x0e
    3bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	4a ef       	ldi	r20, 0xFA	; 250
    3be6:	54 e4       	ldi	r21, 0x44	; 68
    3be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	8f 83       	std	Y+7, r24	; 0x07
    3bf2:	98 87       	std	Y+8, r25	; 0x08
    3bf4:	a9 87       	std	Y+9, r26	; 0x09
    3bf6:	ba 87       	std	Y+10, r27	; 0x0a
    3bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bfa:	78 85       	ldd	r23, Y+8	; 0x08
    3bfc:	89 85       	ldd	r24, Y+9	; 0x09
    3bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 e8       	ldi	r20, 0x80	; 128
    3c06:	5f e3       	ldi	r21, 0x3F	; 63
    3c08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c0c:	88 23       	and	r24, r24
    3c0e:	2c f4       	brge	.+10     	; 0x3c1a <LCD_8_BitvidreadCharacter+0x17c>
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	9e 83       	std	Y+6, r25	; 0x06
    3c16:	8d 83       	std	Y+5, r24	; 0x05
    3c18:	3f c0       	rjmp	.+126    	; 0x3c98 <LCD_8_BitvidreadCharacter+0x1fa>
    3c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c1c:	78 85       	ldd	r23, Y+8	; 0x08
    3c1e:	89 85       	ldd	r24, Y+9	; 0x09
    3c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	3f ef       	ldi	r19, 0xFF	; 255
    3c26:	4f e7       	ldi	r20, 0x7F	; 127
    3c28:	57 e4       	ldi	r21, 0x47	; 71
    3c2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c2e:	18 16       	cp	r1, r24
    3c30:	4c f5       	brge	.+82     	; 0x3c84 <LCD_8_BitvidreadCharacter+0x1e6>
    3c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e2       	ldi	r20, 0x20	; 32
    3c40:	51 e4       	ldi	r21, 0x41	; 65
    3c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	bc 01       	movw	r22, r24
    3c4c:	cd 01       	movw	r24, r26
    3c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	9e 83       	std	Y+6, r25	; 0x06
    3c58:	8d 83       	std	Y+5, r24	; 0x05
    3c5a:	0f c0       	rjmp	.+30     	; 0x3c7a <LCD_8_BitvidreadCharacter+0x1dc>
    3c5c:	88 ec       	ldi	r24, 0xC8	; 200
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	9c 83       	std	Y+4, r25	; 0x04
    3c62:	8b 83       	std	Y+3, r24	; 0x03
    3c64:	8b 81       	ldd	r24, Y+3	; 0x03
    3c66:	9c 81       	ldd	r25, Y+4	; 0x04
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	f1 f7       	brne	.-4      	; 0x3c68 <LCD_8_BitvidreadCharacter+0x1ca>
    3c6c:	9c 83       	std	Y+4, r25	; 0x04
    3c6e:	8b 83       	std	Y+3, r24	; 0x03
    3c70:	8d 81       	ldd	r24, Y+5	; 0x05
    3c72:	9e 81       	ldd	r25, Y+6	; 0x06
    3c74:	01 97       	sbiw	r24, 0x01	; 1
    3c76:	9e 83       	std	Y+6, r25	; 0x06
    3c78:	8d 83       	std	Y+5, r24	; 0x05
    3c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7e:	00 97       	sbiw	r24, 0x00	; 0
    3c80:	69 f7       	brne	.-38     	; 0x3c5c <LCD_8_BitvidreadCharacter+0x1be>
    3c82:	14 c0       	rjmp	.+40     	; 0x3cac <LCD_8_BitvidreadCharacter+0x20e>
    3c84:	6f 81       	ldd	r22, Y+7	; 0x07
    3c86:	78 85       	ldd	r23, Y+8	; 0x08
    3c88:	89 85       	ldd	r24, Y+9	; 0x09
    3c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	9e 83       	std	Y+6, r25	; 0x06
    3c96:	8d 83       	std	Y+5, r24	; 0x05
    3c98:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9c:	9a 83       	std	Y+2, r25	; 0x02
    3c9e:	89 83       	std	Y+1, r24	; 0x01
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	f1 f7       	brne	.-4      	; 0x3ca4 <LCD_8_BitvidreadCharacter+0x206>
    3ca8:	9a 83       	std	Y+2, r25	; 0x02
    3caa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3cac:	6d 96       	adiw	r28, 0x1d	; 29
    3cae:	0f b6       	in	r0, 0x3f	; 63
    3cb0:	f8 94       	cli
    3cb2:	de bf       	out	0x3e, r29	; 62
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	cd bf       	out	0x3d, r28	; 61
    3cb8:	cf 91       	pop	r28
    3cba:	df 91       	pop	r29
    3cbc:	08 95       	ret

00003cbe <LCD_8_BitvidwriteString>:
void LCD_8_BitvidwriteString(const char* Copy_p2cString)
{
    3cbe:	df 93       	push	r29
    3cc0:	cf 93       	push	r28
    3cc2:	00 d0       	rcall	.+0      	; 0x3cc4 <LCD_8_BitvidwriteString+0x6>
    3cc4:	0f 92       	push	r0
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
    3cca:	9b 83       	std	Y+3, r25	; 0x03
    3ccc:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_p2cString != NULL)
    3cce:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd2:	00 97       	sbiw	r24, 0x00	; 0
    3cd4:	d9 f0       	breq	.+54     	; 0x3d0c <LCD_8_BitvidwriteString+0x4e>
	{
		u8 Local_u8Counter=0;
    3cd6:	19 82       	std	Y+1, r1	; 0x01
    3cd8:	0e c0       	rjmp	.+28     	; 0x3cf6 <LCD_8_BitvidwriteString+0x38>
		while(Copy_p2cString[Local_u8Counter]!='\0')
		{
			LCD_8_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	28 2f       	mov	r18, r24
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	e2 0f       	add	r30, r18
    3ce8:	f3 1f       	adc	r31, r19
    3cea:	80 81       	ld	r24, Z
    3cec:	0e 94 3f 1c 	call	0x387e	; 0x387e <LCD_8_BitvidwriteCharacter>
			Local_u8Counter++;
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	8f 5f       	subi	r24, 0xFF	; 255
    3cf4:	89 83       	std	Y+1, r24	; 0x01
void LCD_8_BitvidwriteString(const char* Copy_p2cString)
{
	if(Copy_p2cString != NULL)
	{
		u8 Local_u8Counter=0;
		while(Copy_p2cString[Local_u8Counter]!='\0')
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	28 2f       	mov	r18, r24
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    3d00:	fc 01       	movw	r30, r24
    3d02:	e2 0f       	add	r30, r18
    3d04:	f3 1f       	adc	r31, r19
    3d06:	80 81       	ld	r24, Z
    3d08:	88 23       	and	r24, r24
    3d0a:	39 f7       	brne	.-50     	; 0x3cda <LCD_8_BitvidwriteString+0x1c>
		{
			LCD_8_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
			Local_u8Counter++;
		}
	}
}
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	cf 91       	pop	r28
    3d14:	df 91       	pop	r29
    3d16:	08 95       	ret

00003d18 <LCD_8_BitvidGoToXY>:
void LCD_8_BitvidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    3d18:	df 93       	push	r29
    3d1a:	cf 93       	push	r28
    3d1c:	00 d0       	rcall	.+0      	; 0x3d1e <LCD_8_BitvidGoToXY+0x6>
    3d1e:	0f 92       	push	r0
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
    3d24:	8a 83       	std	Y+2, r24	; 0x02
    3d26:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	88 23       	and	r24, r24
    3d2c:	19 f4       	brne	.+6      	; 0x3d34 <LCD_8_BitvidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    3d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d30:	89 83       	std	Y+1, r24	; 0x01
    3d32:	06 c0       	rjmp	.+12     	; 0x3d40 <LCD_8_BitvidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    3d34:	8a 81       	ldd	r24, Y+2	; 0x02
    3d36:	81 30       	cpi	r24, 0x01	; 1
    3d38:	19 f4       	brne	.+6      	; 0x3d40 <LCD_8_BitvidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos + 0X40;
    3d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3c:	80 5c       	subi	r24, 0xC0	; 192
    3d3e:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_8_BitvidsendCommand(Local_u8Address+128);
    3d40:	89 81       	ldd	r24, Y+1	; 0x01
    3d42:	80 58       	subi	r24, 0x80	; 128
    3d44:	0e 94 2f 1b 	call	0x365e	; 0x365e <LCD_8_BitvidsendCommand>
}
    3d48:	0f 90       	pop	r0
    3d4a:	0f 90       	pop	r0
    3d4c:	0f 90       	pop	r0
    3d4e:	cf 91       	pop	r28
    3d50:	df 91       	pop	r29
    3d52:	08 95       	ret

00003d54 <LCD_8_BitvidwriteSpecialCharacter>:
void LCD_8_BitvidwriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    3d54:	df 93       	push	r29
    3d56:	cf 93       	push	r28
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
    3d5c:	27 97       	sbiw	r28, 0x07	; 7
    3d5e:	0f b6       	in	r0, 0x3f	; 63
    3d60:	f8 94       	cli
    3d62:	de bf       	out	0x3e, r29	; 62
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	cd bf       	out	0x3d, r28	; 61
    3d68:	9c 83       	std	Y+4, r25	; 0x04
    3d6a:	8b 83       	std	Y+3, r24	; 0x03
    3d6c:	6d 83       	std	Y+5, r22	; 0x05
    3d6e:	4e 83       	std	Y+6, r20	; 0x06
    3d70:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0 , Local_u8Iterator;
    3d72:	1a 82       	std	Y+2, r1	; 0x02
	/*Calculate CGRam Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    3d74:	8d 81       	ldd	r24, Y+5	; 0x05
    3d76:	88 2f       	mov	r24, r24
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	88 0f       	add	r24, r24
    3d7c:	99 1f       	adc	r25, r25
    3d7e:	88 0f       	add	r24, r24
    3d80:	99 1f       	adc	r25, r25
    3d82:	88 0f       	add	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	8a 83       	std	Y+2, r24	; 0x02
	/*Send CGRam Address Command to LCD, with setting bit 6, clearing bit 7*/
	LCD_8_BitvidsendCommand(Local_u8CGRAMAddress+64);
    3d88:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8a:	80 5c       	subi	r24, 0xC0	; 192
    3d8c:	0e 94 2f 1b 	call	0x365e	; 0x365e <LCD_8_BitvidsendCommand>
	/*Write the Pattern into CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    3d90:	19 82       	std	Y+1, r1	; 0x01
    3d92:	0e c0       	rjmp	.+28     	; 0x3db0 <LCD_8_BitvidwriteSpecialCharacter+0x5c>
	{
		LCD_8_BitvidwriteCharacter(Copy_pu8Pattern[Local_u8Iterator]);
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	28 2f       	mov	r18, r24
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d9e:	fc 01       	movw	r30, r24
    3da0:	e2 0f       	add	r30, r18
    3da2:	f3 1f       	adc	r31, r19
    3da4:	80 81       	ld	r24, Z
    3da6:	0e 94 3f 1c 	call	0x387e	; 0x387e <LCD_8_BitvidwriteCharacter>
	/*Calculate CGRam Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
	/*Send CGRam Address Command to LCD, with setting bit 6, clearing bit 7*/
	LCD_8_BitvidsendCommand(Local_u8CGRAMAddress+64);
	/*Write the Pattern into CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	8f 5f       	subi	r24, 0xFF	; 255
    3dae:	89 83       	std	Y+1, r24	; 0x01
    3db0:	89 81       	ldd	r24, Y+1	; 0x01
    3db2:	88 30       	cpi	r24, 0x08	; 8
    3db4:	78 f3       	brcs	.-34     	; 0x3d94 <LCD_8_BitvidwriteSpecialCharacter+0x40>
	{
		LCD_8_BitvidwriteCharacter(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*Go Back to DDRam to Display the Pattern*/
	LCD_8_BitvidGoToXY(Copy_u8XPos,Copy_u8YPos);
    3db6:	8e 81       	ldd	r24, Y+6	; 0x06
    3db8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dba:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <LCD_8_BitvidGoToXY>
	/*Display the Pattern Written in CGRam*/
	LCD_8_BitvidwriteCharacter(Copy_u8PatternNumber);
    3dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc0:	0e 94 3f 1c 	call	0x387e	; 0x387e <LCD_8_BitvidwriteCharacter>
}
    3dc4:	27 96       	adiw	r28, 0x07	; 7
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	f8 94       	cli
    3dca:	de bf       	out	0x3e, r29	; 62
    3dcc:	0f be       	out	0x3f, r0	; 63
    3dce:	cd bf       	out	0x3d, r28	; 61
    3dd0:	cf 91       	pop	r28
    3dd2:	df 91       	pop	r29
    3dd4:	08 95       	ret

00003dd6 <LCD_8_BitvidwriteInt>:
void LCD_8_BitvidwriteInt(u32 copy_u8number)
{
    3dd6:	0f 93       	push	r16
    3dd8:	1f 93       	push	r17
    3dda:	df 93       	push	r29
    3ddc:	cf 93       	push	r28
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
    3de2:	61 97       	sbiw	r28, 0x11	; 17
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	6e 87       	std	Y+14, r22	; 0x0e
    3df0:	7f 87       	std	Y+15, r23	; 0x0f
    3df2:	88 8b       	std	Y+16, r24	; 0x10
    3df4:	99 8b       	std	Y+17, r25	; 0x11
	u32 temp = copy_u8number;
    3df6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3df8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3dfa:	a8 89       	ldd	r26, Y+16	; 0x10
    3dfc:	b9 89       	ldd	r27, Y+17	; 0x11
    3dfe:	8b 83       	std	Y+3, r24	; 0x03
    3e00:	9c 83       	std	Y+4, r25	; 0x04
    3e02:	ad 83       	std	Y+5, r26	; 0x05
    3e04:	be 83       	std	Y+6, r27	; 0x06
	u8 digit[7];
	u8 lenght = 0;
    3e06:	1a 82       	std	Y+2, r1	; 0x02
	s8 i;
	if(temp==0)
    3e08:	8b 81       	ldd	r24, Y+3	; 0x03
    3e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e0c:	ad 81       	ldd	r26, Y+5	; 0x05
    3e0e:	be 81       	ldd	r27, Y+6	; 0x06
    3e10:	00 97       	sbiw	r24, 0x00	; 0
    3e12:	a1 05       	cpc	r26, r1
    3e14:	b1 05       	cpc	r27, r1
    3e16:	89 f5       	brne	.+98     	; 0x3e7a <LCD_8_BitvidwriteInt+0xa4>
	{
		LCD_8_BitvidwriteCharacter('0');
    3e18:	80 e3       	ldi	r24, 0x30	; 48
    3e1a:	0e 94 3f 1c 	call	0x387e	; 0x387e <LCD_8_BitvidwriteCharacter>
    3e1e:	4d c0       	rjmp	.+154    	; 0x3eba <LCD_8_BitvidwriteInt+0xe4>
	}
	else
	{
		while(temp!=0)
		{
			digit[lenght]=temp%10;
    3e20:	8a 81       	ldd	r24, Y+2	; 0x02
    3e22:	08 2f       	mov	r16, r24
    3e24:	10 e0       	ldi	r17, 0x00	; 0
    3e26:	8b 81       	ldd	r24, Y+3	; 0x03
    3e28:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2a:	ad 81       	ldd	r26, Y+5	; 0x05
    3e2c:	be 81       	ldd	r27, Y+6	; 0x06
    3e2e:	2a e0       	ldi	r18, 0x0A	; 10
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	40 e0       	ldi	r20, 0x00	; 0
    3e34:	50 e0       	ldi	r21, 0x00	; 0
    3e36:	bc 01       	movw	r22, r24
    3e38:	cd 01       	movw	r24, r26
    3e3a:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__udivmodsi4>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	28 2f       	mov	r18, r24
    3e44:	ce 01       	movw	r24, r28
    3e46:	07 96       	adiw	r24, 0x07	; 7
    3e48:	fc 01       	movw	r30, r24
    3e4a:	e0 0f       	add	r30, r16
    3e4c:	f1 1f       	adc	r31, r17
    3e4e:	20 83       	st	Z, r18
			temp/=10;
    3e50:	8b 81       	ldd	r24, Y+3	; 0x03
    3e52:	9c 81       	ldd	r25, Y+4	; 0x04
    3e54:	ad 81       	ldd	r26, Y+5	; 0x05
    3e56:	be 81       	ldd	r27, Y+6	; 0x06
    3e58:	2a e0       	ldi	r18, 0x0A	; 10
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	40 e0       	ldi	r20, 0x00	; 0
    3e5e:	50 e0       	ldi	r21, 0x00	; 0
    3e60:	bc 01       	movw	r22, r24
    3e62:	cd 01       	movw	r24, r26
    3e64:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__udivmodsi4>
    3e68:	da 01       	movw	r26, r20
    3e6a:	c9 01       	movw	r24, r18
    3e6c:	8b 83       	std	Y+3, r24	; 0x03
    3e6e:	9c 83       	std	Y+4, r25	; 0x04
    3e70:	ad 83       	std	Y+5, r26	; 0x05
    3e72:	be 83       	std	Y+6, r27	; 0x06
			lenght++;
    3e74:	8a 81       	ldd	r24, Y+2	; 0x02
    3e76:	8f 5f       	subi	r24, 0xFF	; 255
    3e78:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_8_BitvidwriteCharacter('0');
	}
	else
	{
		while(temp!=0)
    3e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7e:	ad 81       	ldd	r26, Y+5	; 0x05
    3e80:	be 81       	ldd	r27, Y+6	; 0x06
    3e82:	00 97       	sbiw	r24, 0x00	; 0
    3e84:	a1 05       	cpc	r26, r1
    3e86:	b1 05       	cpc	r27, r1
    3e88:	59 f6       	brne	.-106    	; 0x3e20 <LCD_8_BitvidwriteInt+0x4a>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    3e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8c:	81 50       	subi	r24, 0x01	; 1
    3e8e:	89 83       	std	Y+1, r24	; 0x01
    3e90:	11 c0       	rjmp	.+34     	; 0x3eb4 <LCD_8_BitvidwriteInt+0xde>
		{
			LCD_8_BitvidwriteCharacter(digit[i]+'0');
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
    3e94:	28 2f       	mov	r18, r24
    3e96:	33 27       	eor	r19, r19
    3e98:	27 fd       	sbrc	r18, 7
    3e9a:	30 95       	com	r19
    3e9c:	ce 01       	movw	r24, r28
    3e9e:	07 96       	adiw	r24, 0x07	; 7
    3ea0:	fc 01       	movw	r30, r24
    3ea2:	e2 0f       	add	r30, r18
    3ea4:	f3 1f       	adc	r31, r19
    3ea6:	80 81       	ld	r24, Z
    3ea8:	80 5d       	subi	r24, 0xD0	; 208
    3eaa:	0e 94 3f 1c 	call	0x387e	; 0x387e <LCD_8_BitvidwriteCharacter>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    3eae:	89 81       	ldd	r24, Y+1	; 0x01
    3eb0:	81 50       	subi	r24, 0x01	; 1
    3eb2:	89 83       	std	Y+1, r24	; 0x01
    3eb4:	89 81       	ldd	r24, Y+1	; 0x01
    3eb6:	88 23       	and	r24, r24
    3eb8:	64 f7       	brge	.-40     	; 0x3e92 <LCD_8_BitvidwriteInt+0xbc>
		{
			LCD_8_BitvidwriteCharacter(digit[i]+'0');
		}
	}
}
    3eba:	61 96       	adiw	r28, 0x11	; 17
    3ebc:	0f b6       	in	r0, 0x3f	; 63
    3ebe:	f8 94       	cli
    3ec0:	de bf       	out	0x3e, r29	; 62
    3ec2:	0f be       	out	0x3f, r0	; 63
    3ec4:	cd bf       	out	0x3d, r28	; 61
    3ec6:	cf 91       	pop	r28
    3ec8:	df 91       	pop	r29
    3eca:	1f 91       	pop	r17
    3ecc:	0f 91       	pop	r16
    3ece:	08 95       	ret

00003ed0 <map>:



// The Mapping Function
u32 map(u32 Value, u32 in_min, u32 in_max, u32 out_min, u32 out_max)
{
    3ed0:	af 92       	push	r10
    3ed2:	bf 92       	push	r11
    3ed4:	cf 92       	push	r12
    3ed6:	df 92       	push	r13
    3ed8:	ef 92       	push	r14
    3eda:	ff 92       	push	r15
    3edc:	0f 93       	push	r16
    3ede:	1f 93       	push	r17
    3ee0:	df 93       	push	r29
    3ee2:	cf 93       	push	r28
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
    3ee8:	60 97       	sbiw	r28, 0x10	; 16
    3eea:	0f b6       	in	r0, 0x3f	; 63
    3eec:	f8 94       	cli
    3eee:	de bf       	out	0x3e, r29	; 62
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	cd bf       	out	0x3d, r28	; 61
    3ef4:	69 83       	std	Y+1, r22	; 0x01
    3ef6:	7a 83       	std	Y+2, r23	; 0x02
    3ef8:	8b 83       	std	Y+3, r24	; 0x03
    3efa:	9c 83       	std	Y+4, r25	; 0x04
    3efc:	2d 83       	std	Y+5, r18	; 0x05
    3efe:	3e 83       	std	Y+6, r19	; 0x06
    3f00:	4f 83       	std	Y+7, r20	; 0x07
    3f02:	58 87       	std	Y+8, r21	; 0x08
    3f04:	e9 86       	std	Y+9, r14	; 0x09
    3f06:	fa 86       	std	Y+10, r15	; 0x0a
    3f08:	0b 87       	std	Y+11, r16	; 0x0b
    3f0a:	1c 87       	std	Y+12, r17	; 0x0c
    3f0c:	ad 86       	std	Y+13, r10	; 0x0d
    3f0e:	be 86       	std	Y+14, r11	; 0x0e
    3f10:	cf 86       	std	Y+15, r12	; 0x0f
    3f12:	d8 8a       	std	Y+16, r13	; 0x10
	return (Value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3f14:	29 81       	ldd	r18, Y+1	; 0x01
    3f16:	3a 81       	ldd	r19, Y+2	; 0x02
    3f18:	4b 81       	ldd	r20, Y+3	; 0x03
    3f1a:	5c 81       	ldd	r21, Y+4	; 0x04
    3f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f20:	af 81       	ldd	r26, Y+7	; 0x07
    3f22:	b8 85       	ldd	r27, Y+8	; 0x08
    3f24:	79 01       	movw	r14, r18
    3f26:	8a 01       	movw	r16, r20
    3f28:	e8 1a       	sub	r14, r24
    3f2a:	f9 0a       	sbc	r15, r25
    3f2c:	0a 0b       	sbc	r16, r26
    3f2e:	1b 0b       	sbc	r17, r27
    3f30:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3f32:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3f34:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3f36:	58 a1       	ldd	r21, Y+32	; 0x20
    3f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f3c:	af 85       	ldd	r26, Y+15	; 0x0f
    3f3e:	b8 89       	ldd	r27, Y+16	; 0x10
    3f40:	28 1b       	sub	r18, r24
    3f42:	39 0b       	sbc	r19, r25
    3f44:	4a 0b       	sbc	r20, r26
    3f46:	5b 0b       	sbc	r21, r27
    3f48:	c8 01       	movw	r24, r16
    3f4a:	b7 01       	movw	r22, r14
    3f4c:	0e 94 c0 21 	call	0x4380	; 0x4380 <__mulsi3>
    3f50:	7b 01       	movw	r14, r22
    3f52:	8c 01       	movw	r16, r24
    3f54:	29 85       	ldd	r18, Y+9	; 0x09
    3f56:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f58:	4b 85       	ldd	r20, Y+11	; 0x0b
    3f5a:	5c 85       	ldd	r21, Y+12	; 0x0c
    3f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f60:	af 81       	ldd	r26, Y+7	; 0x07
    3f62:	b8 85       	ldd	r27, Y+8	; 0x08
    3f64:	28 1b       	sub	r18, r24
    3f66:	39 0b       	sbc	r19, r25
    3f68:	4a 0b       	sbc	r20, r26
    3f6a:	5b 0b       	sbc	r21, r27
    3f6c:	c8 01       	movw	r24, r16
    3f6e:	b7 01       	movw	r22, r14
    3f70:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__udivmodsi4>
    3f74:	da 01       	movw	r26, r20
    3f76:	c9 01       	movw	r24, r18
    3f78:	9c 01       	movw	r18, r24
    3f7a:	ad 01       	movw	r20, r26
    3f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f80:	af 85       	ldd	r26, Y+15	; 0x0f
    3f82:	b8 89       	ldd	r27, Y+16	; 0x10
    3f84:	82 0f       	add	r24, r18
    3f86:	93 1f       	adc	r25, r19
    3f88:	a4 1f       	adc	r26, r20
    3f8a:	b5 1f       	adc	r27, r21
}
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	cd 01       	movw	r24, r26
    3f90:	60 96       	adiw	r28, 0x10	; 16
    3f92:	0f b6       	in	r0, 0x3f	; 63
    3f94:	f8 94       	cli
    3f96:	de bf       	out	0x3e, r29	; 62
    3f98:	0f be       	out	0x3f, r0	; 63
    3f9a:	cd bf       	out	0x3d, r28	; 61
    3f9c:	cf 91       	pop	r28
    3f9e:	df 91       	pop	r29
    3fa0:	1f 91       	pop	r17
    3fa2:	0f 91       	pop	r16
    3fa4:	ff 90       	pop	r15
    3fa6:	ef 90       	pop	r14
    3fa8:	df 90       	pop	r13
    3faa:	cf 90       	pop	r12
    3fac:	bf 90       	pop	r11
    3fae:	af 90       	pop	r10
    3fb0:	08 95       	ret

00003fb2 <main>:

void main(void)
{
    3fb2:	af 92       	push	r10
    3fb4:	bf 92       	push	r11
    3fb6:	cf 92       	push	r12
    3fb8:	df 92       	push	r13
    3fba:	ef 92       	push	r14
    3fbc:	ff 92       	push	r15
    3fbe:	0f 93       	push	r16
    3fc0:	1f 93       	push	r17
    3fc2:	df 93       	push	r29
    3fc4:	cf 93       	push	r28
    3fc6:	cd b7       	in	r28, 0x3d	; 61
    3fc8:	de b7       	in	r29, 0x3e	; 62
    3fca:	6c 97       	sbiw	r28, 0x1c	; 28
    3fcc:	0f b6       	in	r0, 0x3f	; 63
    3fce:	f8 94       	cli
    3fd0:	de bf       	out	0x3e, r29	; 62
    3fd2:	0f be       	out	0x3f, r0	; 63
    3fd4:	cd bf       	out	0x3d, r28	; 61
	s16 Digital_Val_X, Digital_Val_Y;
	PWM_timers_config MOTOR1_PWM;
	PWM_timers_config MOTOR2_PWM;
	// Set TIMER 0 in Fast PWM Mode
	MOTOR1_PWM.timer = TIMER_0;
    3fd6:	1e 86       	std	Y+14, r1	; 0x0e
	MOTOR1_PWM.PWM_Mode = FAST_PWM;
    3fd8:	82 e0       	ldi	r24, 0x02	; 2
    3fda:	8d 87       	std	Y+13, r24	; 0x0d

	// Starting TIMER 0 with prescaler 8
	MOTOR1_PWM.T0_T1_used_freq = TIMER_0_1_PRE_SCALER_e_8;
    3fdc:	82 e0       	ldi	r24, 0x02	; 2
    3fde:	8b 87       	std	Y+11, r24	; 0x0b
	MOTOR1_PWM.set_duty_cycle = 0;
    3fe0:	18 86       	std	Y+8, r1	; 0x08
    3fe2:	1f 82       	std	Y+7, r1	; 0x07

	// Set TIMER 2 in Fast PWM Mode
	MOTOR2_PWM.timer = TIMER_2;
    3fe4:	82 e0       	ldi	r24, 0x02	; 2
    3fe6:	8a 8f       	std	Y+26, r24	; 0x1a
	MOTOR2_PWM.PWM_Mode = FAST_PWM;
    3fe8:	82 e0       	ldi	r24, 0x02	; 2
    3fea:	89 8f       	std	Y+25, r24	; 0x19

	// Starting TIMER 2 with prescaler 8
	MOTOR2_PWM.T2_used_freq = TIMER_2_PRE_SCALER_e_8;
    3fec:	82 e0       	ldi	r24, 0x02	; 2
    3fee:	88 8f       	std	Y+24, r24	; 0x18
	MOTOR2_PWM.set_duty_cycle = 0;
    3ff0:	1c 8a       	std	Y+20, r1	; 0x14
    3ff2:	1b 8a       	std	Y+19, r1	; 0x13


	// Initilizing PWM Function
	PWM_timers_init(&MOTOR1_PWM);
    3ff4:	ce 01       	movw	r24, r28
    3ff6:	05 96       	adiw	r24, 0x05	; 5
    3ff8:	0e 94 b7 0b 	call	0x176e	; 0x176e <PWM_timers_init>
	PWM_timers_init(&MOTOR2_PWM);
    3ffc:	ce 01       	movw	r24, r28
    3ffe:	41 96       	adiw	r24, 0x11	; 17
    4000:	0e 94 b7 0b 	call	0x176e	; 0x176e <PWM_timers_init>

	// Initializing ADC with VREF = VCC and a division factor 8
	ADC_Init();
    4004:	0e 94 26 12 	call	0x244c	; 0x244c <ADC_Init>
	Motor_voidInit();
    4008:	0e 94 94 12 	call	0x2528	; 0x2528 <Motor_voidInit>

	while(1)
	{
		Digital_Val_X = ADC_u16Channelread(Channel_0);
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <ADC_u16Channelread>
    4012:	9c 83       	std	Y+4, r25	; 0x04
    4014:	8b 83       	std	Y+3, r24	; 0x03
		Digital_Val_Y = ADC_u16Channelread(Channel_1);
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	0e 94 5e 12 	call	0x24bc	; 0x24bc <ADC_u16Channelread>
    401c:	9a 83       	std	Y+2, r25	; 0x02
    401e:	89 83       	std	Y+1, r24	; 0x01

		if((Digital_Val_X>=-60 && Digital_Val_X<490) && (Digital_Val_Y>491 && Digital_Val_Y<529))
    4020:	8b 81       	ldd	r24, Y+3	; 0x03
    4022:	9c 81       	ldd	r25, Y+4	; 0x04
    4024:	2f ef       	ldi	r18, 0xFF	; 255
    4026:	84 3c       	cpi	r24, 0xC4	; 196
    4028:	92 07       	cpc	r25, r18
    402a:	0c f4       	brge	.+2      	; 0x402e <main+0x7c>
    402c:	52 c0       	rjmp	.+164    	; 0x40d2 <main+0x120>
    402e:	8b 81       	ldd	r24, Y+3	; 0x03
    4030:	9c 81       	ldd	r25, Y+4	; 0x04
    4032:	21 e0       	ldi	r18, 0x01	; 1
    4034:	8a 3e       	cpi	r24, 0xEA	; 234
    4036:	92 07       	cpc	r25, r18
    4038:	0c f0       	brlt	.+2      	; 0x403c <main+0x8a>
    403a:	4b c0       	rjmp	.+150    	; 0x40d2 <main+0x120>
    403c:	89 81       	ldd	r24, Y+1	; 0x01
    403e:	9a 81       	ldd	r25, Y+2	; 0x02
    4040:	21 e0       	ldi	r18, 0x01	; 1
    4042:	8c 3e       	cpi	r24, 0xEC	; 236
    4044:	92 07       	cpc	r25, r18
    4046:	0c f4       	brge	.+2      	; 0x404a <main+0x98>
    4048:	44 c0       	rjmp	.+136    	; 0x40d2 <main+0x120>
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	9a 81       	ldd	r25, Y+2	; 0x02
    404e:	22 e0       	ldi	r18, 0x02	; 2
    4050:	81 31       	cpi	r24, 0x11	; 17
    4052:	92 07       	cpc	r25, r18
    4054:	f4 f5       	brge	.+124    	; 0x40d2 <main+0x120>
		{
			Digital_Val_X = map(Digital_Val_X,-60,490,180,0);
    4056:	8b 81       	ldd	r24, Y+3	; 0x03
    4058:	9c 81       	ldd	r25, Y+4	; 0x04
    405a:	aa 27       	eor	r26, r26
    405c:	97 fd       	sbrc	r25, 7
    405e:	a0 95       	com	r26
    4060:	ba 2f       	mov	r27, r26
    4062:	00 d0       	rcall	.+0      	; 0x4064 <main+0xb2>
    4064:	00 d0       	rcall	.+0      	; 0x4066 <main+0xb4>
    4066:	ed b7       	in	r30, 0x3d	; 61
    4068:	fe b7       	in	r31, 0x3e	; 62
    406a:	31 96       	adiw	r30, 0x01	; 1
    406c:	10 82       	st	Z, r1
    406e:	11 82       	std	Z+1, r1	; 0x01
    4070:	12 82       	std	Z+2, r1	; 0x02
    4072:	13 82       	std	Z+3, r1	; 0x03
    4074:	bc 01       	movw	r22, r24
    4076:	cd 01       	movw	r24, r26
    4078:	24 ec       	ldi	r18, 0xC4	; 196
    407a:	3f ef       	ldi	r19, 0xFF	; 255
    407c:	4f ef       	ldi	r20, 0xFF	; 255
    407e:	5f ef       	ldi	r21, 0xFF	; 255
    4080:	0f 2e       	mov	r0, r31
    4082:	fa ee       	ldi	r31, 0xEA	; 234
    4084:	ef 2e       	mov	r14, r31
    4086:	f1 e0       	ldi	r31, 0x01	; 1
    4088:	ff 2e       	mov	r15, r31
    408a:	f0 e0       	ldi	r31, 0x00	; 0
    408c:	0f 2f       	mov	r16, r31
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	1f 2f       	mov	r17, r31
    4092:	f0 2d       	mov	r31, r0
    4094:	0f 2e       	mov	r0, r31
    4096:	f4 eb       	ldi	r31, 0xB4	; 180
    4098:	af 2e       	mov	r10, r31
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	bf 2e       	mov	r11, r31
    409e:	f0 e0       	ldi	r31, 0x00	; 0
    40a0:	cf 2e       	mov	r12, r31
    40a2:	f0 e0       	ldi	r31, 0x00	; 0
    40a4:	df 2e       	mov	r13, r31
    40a6:	f0 2d       	mov	r31, r0
    40a8:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <map>
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	9c 83       	std	Y+4, r25	; 0x04
    40ba:	8b 83       	std	Y+3, r24	; 0x03
			OCR0_REG = Digital_Val_X;
    40bc:	ec e5       	ldi	r30, 0x5C	; 92
    40be:	f0 e0       	ldi	r31, 0x00	; 0
    40c0:	8b 81       	ldd	r24, Y+3	; 0x03
    40c2:	80 83       	st	Z, r24
			OCR2_REG = Digital_Val_X;
    40c4:	e3 e4       	ldi	r30, 0x43	; 67
    40c6:	f0 e0       	ldi	r31, 0x00	; 0
    40c8:	8b 81       	ldd	r24, Y+3	; 0x03
    40ca:	80 83       	st	Z, r24
			Motor_voidBackward();
    40cc:	0e 94 b6 12 	call	0x256c	; 0x256c <Motor_voidBackward>
    40d0:	9d cf       	rjmp	.-198    	; 0x400c <main+0x5a>
		}
		else if((Digital_Val_X>530 && Digital_Val_X<1023) && (Digital_Val_Y>491 && Digital_Val_Y<529))
    40d2:	8b 81       	ldd	r24, Y+3	; 0x03
    40d4:	9c 81       	ldd	r25, Y+4	; 0x04
    40d6:	22 e0       	ldi	r18, 0x02	; 2
    40d8:	83 31       	cpi	r24, 0x13	; 19
    40da:	92 07       	cpc	r25, r18
    40dc:	0c f4       	brge	.+2      	; 0x40e0 <main+0x12e>
    40de:	50 c0       	rjmp	.+160    	; 0x4180 <main+0x1ce>
    40e0:	8b 81       	ldd	r24, Y+3	; 0x03
    40e2:	9c 81       	ldd	r25, Y+4	; 0x04
    40e4:	23 e0       	ldi	r18, 0x03	; 3
    40e6:	8f 3f       	cpi	r24, 0xFF	; 255
    40e8:	92 07       	cpc	r25, r18
    40ea:	0c f0       	brlt	.+2      	; 0x40ee <main+0x13c>
    40ec:	49 c0       	rjmp	.+146    	; 0x4180 <main+0x1ce>
    40ee:	89 81       	ldd	r24, Y+1	; 0x01
    40f0:	9a 81       	ldd	r25, Y+2	; 0x02
    40f2:	21 e0       	ldi	r18, 0x01	; 1
    40f4:	8c 3e       	cpi	r24, 0xEC	; 236
    40f6:	92 07       	cpc	r25, r18
    40f8:	0c f4       	brge	.+2      	; 0x40fc <main+0x14a>
    40fa:	42 c0       	rjmp	.+132    	; 0x4180 <main+0x1ce>
    40fc:	89 81       	ldd	r24, Y+1	; 0x01
    40fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4100:	22 e0       	ldi	r18, 0x02	; 2
    4102:	81 31       	cpi	r24, 0x11	; 17
    4104:	92 07       	cpc	r25, r18
    4106:	e4 f5       	brge	.+120    	; 0x4180 <main+0x1ce>
		{
			Digital_Val_X = map(Digital_Val_X,530,1023,0,180);
    4108:	8b 81       	ldd	r24, Y+3	; 0x03
    410a:	9c 81       	ldd	r25, Y+4	; 0x04
    410c:	9c 01       	movw	r18, r24
    410e:	44 27       	eor	r20, r20
    4110:	37 fd       	sbrc	r19, 7
    4112:	40 95       	com	r20
    4114:	54 2f       	mov	r21, r20
    4116:	00 d0       	rcall	.+0      	; 0x4118 <main+0x166>
    4118:	00 d0       	rcall	.+0      	; 0x411a <main+0x168>
    411a:	ed b7       	in	r30, 0x3d	; 61
    411c:	fe b7       	in	r31, 0x3e	; 62
    411e:	31 96       	adiw	r30, 0x01	; 1
    4120:	84 eb       	ldi	r24, 0xB4	; 180
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	a0 e0       	ldi	r26, 0x00	; 0
    4126:	b0 e0       	ldi	r27, 0x00	; 0
    4128:	80 83       	st	Z, r24
    412a:	91 83       	std	Z+1, r25	; 0x01
    412c:	a2 83       	std	Z+2, r26	; 0x02
    412e:	b3 83       	std	Z+3, r27	; 0x03
    4130:	ca 01       	movw	r24, r20
    4132:	b9 01       	movw	r22, r18
    4134:	22 e1       	ldi	r18, 0x12	; 18
    4136:	32 e0       	ldi	r19, 0x02	; 2
    4138:	40 e0       	ldi	r20, 0x00	; 0
    413a:	50 e0       	ldi	r21, 0x00	; 0
    413c:	0f 2e       	mov	r0, r31
    413e:	ff ef       	ldi	r31, 0xFF	; 255
    4140:	ef 2e       	mov	r14, r31
    4142:	f3 e0       	ldi	r31, 0x03	; 3
    4144:	ff 2e       	mov	r15, r31
    4146:	f0 e0       	ldi	r31, 0x00	; 0
    4148:	0f 2f       	mov	r16, r31
    414a:	f0 e0       	ldi	r31, 0x00	; 0
    414c:	1f 2f       	mov	r17, r31
    414e:	f0 2d       	mov	r31, r0
    4150:	aa 24       	eor	r10, r10
    4152:	bb 24       	eor	r11, r11
    4154:	65 01       	movw	r12, r10
    4156:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <map>
    415a:	0f 90       	pop	r0
    415c:	0f 90       	pop	r0
    415e:	0f 90       	pop	r0
    4160:	0f 90       	pop	r0
    4162:	dc 01       	movw	r26, r24
    4164:	cb 01       	movw	r24, r22
    4166:	9c 83       	std	Y+4, r25	; 0x04
    4168:	8b 83       	std	Y+3, r24	; 0x03
			OCR0_REG = Digital_Val_X;
    416a:	ec e5       	ldi	r30, 0x5C	; 92
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	8b 81       	ldd	r24, Y+3	; 0x03
    4170:	80 83       	st	Z, r24
			OCR2_REG = Digital_Val_X;
    4172:	e3 e4       	ldi	r30, 0x43	; 67
    4174:	f0 e0       	ldi	r31, 0x00	; 0
    4176:	8b 81       	ldd	r24, Y+3	; 0x03
    4178:	80 83       	st	Z, r24
			Motor_voidFoward();
    417a:	0e 94 a5 12 	call	0x254a	; 0x254a <Motor_voidFoward>
    417e:	46 cf       	rjmp	.-372    	; 0x400c <main+0x5a>
		}
		else if((Digital_Val_X>491 && Digital_Val_X<529) && (Digital_Val_Y>491 && Digital_Val_Y<529))
    4180:	8b 81       	ldd	r24, Y+3	; 0x03
    4182:	9c 81       	ldd	r25, Y+4	; 0x04
    4184:	21 e0       	ldi	r18, 0x01	; 1
    4186:	8c 3e       	cpi	r24, 0xEC	; 236
    4188:	92 07       	cpc	r25, r18
    418a:	0c f4       	brge	.+2      	; 0x418e <main+0x1dc>
    418c:	4a c0       	rjmp	.+148    	; 0x4222 <main+0x270>
    418e:	8b 81       	ldd	r24, Y+3	; 0x03
    4190:	9c 81       	ldd	r25, Y+4	; 0x04
    4192:	22 e0       	ldi	r18, 0x02	; 2
    4194:	81 31       	cpi	r24, 0x11	; 17
    4196:	92 07       	cpc	r25, r18
    4198:	0c f0       	brlt	.+2      	; 0x419c <main+0x1ea>
    419a:	43 c0       	rjmp	.+134    	; 0x4222 <main+0x270>
    419c:	89 81       	ldd	r24, Y+1	; 0x01
    419e:	9a 81       	ldd	r25, Y+2	; 0x02
    41a0:	21 e0       	ldi	r18, 0x01	; 1
    41a2:	8c 3e       	cpi	r24, 0xEC	; 236
    41a4:	92 07       	cpc	r25, r18
    41a6:	ec f1       	brlt	.+122    	; 0x4222 <main+0x270>
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	9a 81       	ldd	r25, Y+2	; 0x02
    41ac:	22 e0       	ldi	r18, 0x02	; 2
    41ae:	81 31       	cpi	r24, 0x11	; 17
    41b0:	92 07       	cpc	r25, r18
    41b2:	bc f5       	brge	.+110    	; 0x4222 <main+0x270>
		{
			Digital_Val_X= map(Digital_Val_X,491,529,0,0);
    41b4:	8b 81       	ldd	r24, Y+3	; 0x03
    41b6:	9c 81       	ldd	r25, Y+4	; 0x04
    41b8:	aa 27       	eor	r26, r26
    41ba:	97 fd       	sbrc	r25, 7
    41bc:	a0 95       	com	r26
    41be:	ba 2f       	mov	r27, r26
    41c0:	00 d0       	rcall	.+0      	; 0x41c2 <main+0x210>
    41c2:	00 d0       	rcall	.+0      	; 0x41c4 <main+0x212>
    41c4:	ed b7       	in	r30, 0x3d	; 61
    41c6:	fe b7       	in	r31, 0x3e	; 62
    41c8:	31 96       	adiw	r30, 0x01	; 1
    41ca:	10 82       	st	Z, r1
    41cc:	11 82       	std	Z+1, r1	; 0x01
    41ce:	12 82       	std	Z+2, r1	; 0x02
    41d0:	13 82       	std	Z+3, r1	; 0x03
    41d2:	bc 01       	movw	r22, r24
    41d4:	cd 01       	movw	r24, r26
    41d6:	2b ee       	ldi	r18, 0xEB	; 235
    41d8:	31 e0       	ldi	r19, 0x01	; 1
    41da:	40 e0       	ldi	r20, 0x00	; 0
    41dc:	50 e0       	ldi	r21, 0x00	; 0
    41de:	0f 2e       	mov	r0, r31
    41e0:	f1 e1       	ldi	r31, 0x11	; 17
    41e2:	ef 2e       	mov	r14, r31
    41e4:	f2 e0       	ldi	r31, 0x02	; 2
    41e6:	ff 2e       	mov	r15, r31
    41e8:	f0 e0       	ldi	r31, 0x00	; 0
    41ea:	0f 2f       	mov	r16, r31
    41ec:	f0 e0       	ldi	r31, 0x00	; 0
    41ee:	1f 2f       	mov	r17, r31
    41f0:	f0 2d       	mov	r31, r0
    41f2:	aa 24       	eor	r10, r10
    41f4:	bb 24       	eor	r11, r11
    41f6:	65 01       	movw	r12, r10
    41f8:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <map>
    41fc:	0f 90       	pop	r0
    41fe:	0f 90       	pop	r0
    4200:	0f 90       	pop	r0
    4202:	0f 90       	pop	r0
    4204:	dc 01       	movw	r26, r24
    4206:	cb 01       	movw	r24, r22
    4208:	9c 83       	std	Y+4, r25	; 0x04
    420a:	8b 83       	std	Y+3, r24	; 0x03
			OCR0_REG = Digital_Val_X;
    420c:	ec e5       	ldi	r30, 0x5C	; 92
    420e:	f0 e0       	ldi	r31, 0x00	; 0
    4210:	8b 81       	ldd	r24, Y+3	; 0x03
    4212:	80 83       	st	Z, r24
			OCR2_REG = Digital_Val_X;
    4214:	e3 e4       	ldi	r30, 0x43	; 67
    4216:	f0 e0       	ldi	r31, 0x00	; 0
    4218:	8b 81       	ldd	r24, Y+3	; 0x03
    421a:	80 83       	st	Z, r24
			Motor_voidStop();
    421c:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <Motor_voidStop>
    4220:	f5 ce       	rjmp	.-534    	; 0x400c <main+0x5a>
		}


		else if((Digital_Val_Y>=0 && Digital_Val_Y<490) && (Digital_Val_X>491 && Digital_Val_X<529))
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	9a 81       	ldd	r25, Y+2	; 0x02
    4226:	99 23       	and	r25, r25
    4228:	0c f4       	brge	.+2      	; 0x422c <main+0x27a>
    422a:	52 c0       	rjmp	.+164    	; 0x42d0 <main+0x31e>
    422c:	89 81       	ldd	r24, Y+1	; 0x01
    422e:	9a 81       	ldd	r25, Y+2	; 0x02
    4230:	21 e0       	ldi	r18, 0x01	; 1
    4232:	8a 3e       	cpi	r24, 0xEA	; 234
    4234:	92 07       	cpc	r25, r18
    4236:	0c f0       	brlt	.+2      	; 0x423a <main+0x288>
    4238:	4b c0       	rjmp	.+150    	; 0x42d0 <main+0x31e>
    423a:	8b 81       	ldd	r24, Y+3	; 0x03
    423c:	9c 81       	ldd	r25, Y+4	; 0x04
    423e:	21 e0       	ldi	r18, 0x01	; 1
    4240:	8c 3e       	cpi	r24, 0xEC	; 236
    4242:	92 07       	cpc	r25, r18
    4244:	0c f4       	brge	.+2      	; 0x4248 <main+0x296>
    4246:	44 c0       	rjmp	.+136    	; 0x42d0 <main+0x31e>
    4248:	8b 81       	ldd	r24, Y+3	; 0x03
    424a:	9c 81       	ldd	r25, Y+4	; 0x04
    424c:	22 e0       	ldi	r18, 0x02	; 2
    424e:	81 31       	cpi	r24, 0x11	; 17
    4250:	92 07       	cpc	r25, r18
    4252:	f4 f5       	brge	.+124    	; 0x42d0 <main+0x31e>
		{
			Digital_Val_Y = map(Digital_Val_Y,-60,490,180,0);
    4254:	89 81       	ldd	r24, Y+1	; 0x01
    4256:	9a 81       	ldd	r25, Y+2	; 0x02
    4258:	aa 27       	eor	r26, r26
    425a:	97 fd       	sbrc	r25, 7
    425c:	a0 95       	com	r26
    425e:	ba 2f       	mov	r27, r26
    4260:	00 d0       	rcall	.+0      	; 0x4262 <main+0x2b0>
    4262:	00 d0       	rcall	.+0      	; 0x4264 <main+0x2b2>
    4264:	ed b7       	in	r30, 0x3d	; 61
    4266:	fe b7       	in	r31, 0x3e	; 62
    4268:	31 96       	adiw	r30, 0x01	; 1
    426a:	10 82       	st	Z, r1
    426c:	11 82       	std	Z+1, r1	; 0x01
    426e:	12 82       	std	Z+2, r1	; 0x02
    4270:	13 82       	std	Z+3, r1	; 0x03
    4272:	bc 01       	movw	r22, r24
    4274:	cd 01       	movw	r24, r26
    4276:	24 ec       	ldi	r18, 0xC4	; 196
    4278:	3f ef       	ldi	r19, 0xFF	; 255
    427a:	4f ef       	ldi	r20, 0xFF	; 255
    427c:	5f ef       	ldi	r21, 0xFF	; 255
    427e:	0f 2e       	mov	r0, r31
    4280:	fa ee       	ldi	r31, 0xEA	; 234
    4282:	ef 2e       	mov	r14, r31
    4284:	f1 e0       	ldi	r31, 0x01	; 1
    4286:	ff 2e       	mov	r15, r31
    4288:	f0 e0       	ldi	r31, 0x00	; 0
    428a:	0f 2f       	mov	r16, r31
    428c:	f0 e0       	ldi	r31, 0x00	; 0
    428e:	1f 2f       	mov	r17, r31
    4290:	f0 2d       	mov	r31, r0
    4292:	0f 2e       	mov	r0, r31
    4294:	f4 eb       	ldi	r31, 0xB4	; 180
    4296:	af 2e       	mov	r10, r31
    4298:	f0 e0       	ldi	r31, 0x00	; 0
    429a:	bf 2e       	mov	r11, r31
    429c:	f0 e0       	ldi	r31, 0x00	; 0
    429e:	cf 2e       	mov	r12, r31
    42a0:	f0 e0       	ldi	r31, 0x00	; 0
    42a2:	df 2e       	mov	r13, r31
    42a4:	f0 2d       	mov	r31, r0
    42a6:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <map>
    42aa:	0f 90       	pop	r0
    42ac:	0f 90       	pop	r0
    42ae:	0f 90       	pop	r0
    42b0:	0f 90       	pop	r0
    42b2:	dc 01       	movw	r26, r24
    42b4:	cb 01       	movw	r24, r22
    42b6:	9a 83       	std	Y+2, r25	; 0x02
    42b8:	89 83       	std	Y+1, r24	; 0x01
			OCR0_REG = Digital_Val_Y;
    42ba:	ec e5       	ldi	r30, 0x5C	; 92
    42bc:	f0 e0       	ldi	r31, 0x00	; 0
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	80 83       	st	Z, r24
			OCR2_REG = Digital_Val_Y;
    42c2:	e3 e4       	ldi	r30, 0x43	; 67
    42c4:	f0 e0       	ldi	r31, 0x00	; 0
    42c6:	89 81       	ldd	r24, Y+1	; 0x01
    42c8:	80 83       	st	Z, r24
			Motor_voidRigthDir();
    42ca:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Motor_voidRigthDir>
    42ce:	9e ce       	rjmp	.-708    	; 0x400c <main+0x5a>
		}
		else if((Digital_Val_Y>530 && Digital_Val_Y<1023) && (Digital_Val_X>491 && Digital_Val_X<529))
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	9a 81       	ldd	r25, Y+2	; 0x02
    42d4:	22 e0       	ldi	r18, 0x02	; 2
    42d6:	83 31       	cpi	r24, 0x13	; 19
    42d8:	92 07       	cpc	r25, r18
    42da:	0c f4       	brge	.+2      	; 0x42de <main+0x32c>
    42dc:	97 ce       	rjmp	.-722    	; 0x400c <main+0x5a>
    42de:	89 81       	ldd	r24, Y+1	; 0x01
    42e0:	9a 81       	ldd	r25, Y+2	; 0x02
    42e2:	23 e0       	ldi	r18, 0x03	; 3
    42e4:	8f 3f       	cpi	r24, 0xFF	; 255
    42e6:	92 07       	cpc	r25, r18
    42e8:	0c f0       	brlt	.+2      	; 0x42ec <main+0x33a>
    42ea:	90 ce       	rjmp	.-736    	; 0x400c <main+0x5a>
    42ec:	8b 81       	ldd	r24, Y+3	; 0x03
    42ee:	9c 81       	ldd	r25, Y+4	; 0x04
    42f0:	21 e0       	ldi	r18, 0x01	; 1
    42f2:	8c 3e       	cpi	r24, 0xEC	; 236
    42f4:	92 07       	cpc	r25, r18
    42f6:	0c f4       	brge	.+2      	; 0x42fa <main+0x348>
    42f8:	89 ce       	rjmp	.-750    	; 0x400c <main+0x5a>
    42fa:	8b 81       	ldd	r24, Y+3	; 0x03
    42fc:	9c 81       	ldd	r25, Y+4	; 0x04
    42fe:	22 e0       	ldi	r18, 0x02	; 2
    4300:	81 31       	cpi	r24, 0x11	; 17
    4302:	92 07       	cpc	r25, r18
    4304:	0c f0       	brlt	.+2      	; 0x4308 <main+0x356>
    4306:	82 ce       	rjmp	.-764    	; 0x400c <main+0x5a>
		{
			Digital_Val_Y = map(Digital_Val_Y,530,1023,0,180);
    4308:	89 81       	ldd	r24, Y+1	; 0x01
    430a:	9a 81       	ldd	r25, Y+2	; 0x02
    430c:	9c 01       	movw	r18, r24
    430e:	44 27       	eor	r20, r20
    4310:	37 fd       	sbrc	r19, 7
    4312:	40 95       	com	r20
    4314:	54 2f       	mov	r21, r20
    4316:	00 d0       	rcall	.+0      	; 0x4318 <main+0x366>
    4318:	00 d0       	rcall	.+0      	; 0x431a <main+0x368>
    431a:	ed b7       	in	r30, 0x3d	; 61
    431c:	fe b7       	in	r31, 0x3e	; 62
    431e:	31 96       	adiw	r30, 0x01	; 1
    4320:	84 eb       	ldi	r24, 0xB4	; 180
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	a0 e0       	ldi	r26, 0x00	; 0
    4326:	b0 e0       	ldi	r27, 0x00	; 0
    4328:	80 83       	st	Z, r24
    432a:	91 83       	std	Z+1, r25	; 0x01
    432c:	a2 83       	std	Z+2, r26	; 0x02
    432e:	b3 83       	std	Z+3, r27	; 0x03
    4330:	ca 01       	movw	r24, r20
    4332:	b9 01       	movw	r22, r18
    4334:	22 e1       	ldi	r18, 0x12	; 18
    4336:	32 e0       	ldi	r19, 0x02	; 2
    4338:	40 e0       	ldi	r20, 0x00	; 0
    433a:	50 e0       	ldi	r21, 0x00	; 0
    433c:	0f 2e       	mov	r0, r31
    433e:	ff ef       	ldi	r31, 0xFF	; 255
    4340:	ef 2e       	mov	r14, r31
    4342:	f3 e0       	ldi	r31, 0x03	; 3
    4344:	ff 2e       	mov	r15, r31
    4346:	f0 e0       	ldi	r31, 0x00	; 0
    4348:	0f 2f       	mov	r16, r31
    434a:	f0 e0       	ldi	r31, 0x00	; 0
    434c:	1f 2f       	mov	r17, r31
    434e:	f0 2d       	mov	r31, r0
    4350:	aa 24       	eor	r10, r10
    4352:	bb 24       	eor	r11, r11
    4354:	65 01       	movw	r12, r10
    4356:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <map>
    435a:	0f 90       	pop	r0
    435c:	0f 90       	pop	r0
    435e:	0f 90       	pop	r0
    4360:	0f 90       	pop	r0
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	9a 83       	std	Y+2, r25	; 0x02
    4368:	89 83       	std	Y+1, r24	; 0x01
			OCR0_REG = Digital_Val_Y;
    436a:	ec e5       	ldi	r30, 0x5C	; 92
    436c:	f0 e0       	ldi	r31, 0x00	; 0
    436e:	89 81       	ldd	r24, Y+1	; 0x01
    4370:	80 83       	st	Z, r24
			OCR2_REG = Digital_Val_Y;
    4372:	e3 e4       	ldi	r30, 0x43	; 67
    4374:	f0 e0       	ldi	r31, 0x00	; 0
    4376:	89 81       	ldd	r24, Y+1	; 0x01
    4378:	80 83       	st	Z, r24
			Motor_voidLeftDir();
    437a:	0e 94 c7 12 	call	0x258e	; 0x258e <Motor_voidLeftDir>
    437e:	46 ce       	rjmp	.-884    	; 0x400c <main+0x5a>

00004380 <__mulsi3>:
    4380:	62 9f       	mul	r22, r18
    4382:	d0 01       	movw	r26, r0
    4384:	73 9f       	mul	r23, r19
    4386:	f0 01       	movw	r30, r0
    4388:	82 9f       	mul	r24, r18
    438a:	e0 0d       	add	r30, r0
    438c:	f1 1d       	adc	r31, r1
    438e:	64 9f       	mul	r22, r20
    4390:	e0 0d       	add	r30, r0
    4392:	f1 1d       	adc	r31, r1
    4394:	92 9f       	mul	r25, r18
    4396:	f0 0d       	add	r31, r0
    4398:	83 9f       	mul	r24, r19
    439a:	f0 0d       	add	r31, r0
    439c:	74 9f       	mul	r23, r20
    439e:	f0 0d       	add	r31, r0
    43a0:	65 9f       	mul	r22, r21
    43a2:	f0 0d       	add	r31, r0
    43a4:	99 27       	eor	r25, r25
    43a6:	72 9f       	mul	r23, r18
    43a8:	b0 0d       	add	r27, r0
    43aa:	e1 1d       	adc	r30, r1
    43ac:	f9 1f       	adc	r31, r25
    43ae:	63 9f       	mul	r22, r19
    43b0:	b0 0d       	add	r27, r0
    43b2:	e1 1d       	adc	r30, r1
    43b4:	f9 1f       	adc	r31, r25
    43b6:	bd 01       	movw	r22, r26
    43b8:	cf 01       	movw	r24, r30
    43ba:	11 24       	eor	r1, r1
    43bc:	08 95       	ret

000043be <__udivmodhi4>:
    43be:	aa 1b       	sub	r26, r26
    43c0:	bb 1b       	sub	r27, r27
    43c2:	51 e1       	ldi	r21, 0x11	; 17
    43c4:	07 c0       	rjmp	.+14     	; 0x43d4 <__udivmodhi4_ep>

000043c6 <__udivmodhi4_loop>:
    43c6:	aa 1f       	adc	r26, r26
    43c8:	bb 1f       	adc	r27, r27
    43ca:	a6 17       	cp	r26, r22
    43cc:	b7 07       	cpc	r27, r23
    43ce:	10 f0       	brcs	.+4      	; 0x43d4 <__udivmodhi4_ep>
    43d0:	a6 1b       	sub	r26, r22
    43d2:	b7 0b       	sbc	r27, r23

000043d4 <__udivmodhi4_ep>:
    43d4:	88 1f       	adc	r24, r24
    43d6:	99 1f       	adc	r25, r25
    43d8:	5a 95       	dec	r21
    43da:	a9 f7       	brne	.-22     	; 0x43c6 <__udivmodhi4_loop>
    43dc:	80 95       	com	r24
    43de:	90 95       	com	r25
    43e0:	bc 01       	movw	r22, r24
    43e2:	cd 01       	movw	r24, r26
    43e4:	08 95       	ret

000043e6 <__udivmodsi4>:
    43e6:	a1 e2       	ldi	r26, 0x21	; 33
    43e8:	1a 2e       	mov	r1, r26
    43ea:	aa 1b       	sub	r26, r26
    43ec:	bb 1b       	sub	r27, r27
    43ee:	fd 01       	movw	r30, r26
    43f0:	0d c0       	rjmp	.+26     	; 0x440c <__udivmodsi4_ep>

000043f2 <__udivmodsi4_loop>:
    43f2:	aa 1f       	adc	r26, r26
    43f4:	bb 1f       	adc	r27, r27
    43f6:	ee 1f       	adc	r30, r30
    43f8:	ff 1f       	adc	r31, r31
    43fa:	a2 17       	cp	r26, r18
    43fc:	b3 07       	cpc	r27, r19
    43fe:	e4 07       	cpc	r30, r20
    4400:	f5 07       	cpc	r31, r21
    4402:	20 f0       	brcs	.+8      	; 0x440c <__udivmodsi4_ep>
    4404:	a2 1b       	sub	r26, r18
    4406:	b3 0b       	sbc	r27, r19
    4408:	e4 0b       	sbc	r30, r20
    440a:	f5 0b       	sbc	r31, r21

0000440c <__udivmodsi4_ep>:
    440c:	66 1f       	adc	r22, r22
    440e:	77 1f       	adc	r23, r23
    4410:	88 1f       	adc	r24, r24
    4412:	99 1f       	adc	r25, r25
    4414:	1a 94       	dec	r1
    4416:	69 f7       	brne	.-38     	; 0x43f2 <__udivmodsi4_loop>
    4418:	60 95       	com	r22
    441a:	70 95       	com	r23
    441c:	80 95       	com	r24
    441e:	90 95       	com	r25
    4420:	9b 01       	movw	r18, r22
    4422:	ac 01       	movw	r20, r24
    4424:	bd 01       	movw	r22, r26
    4426:	cf 01       	movw	r24, r30
    4428:	08 95       	ret

0000442a <__prologue_saves__>:
    442a:	2f 92       	push	r2
    442c:	3f 92       	push	r3
    442e:	4f 92       	push	r4
    4430:	5f 92       	push	r5
    4432:	6f 92       	push	r6
    4434:	7f 92       	push	r7
    4436:	8f 92       	push	r8
    4438:	9f 92       	push	r9
    443a:	af 92       	push	r10
    443c:	bf 92       	push	r11
    443e:	cf 92       	push	r12
    4440:	df 92       	push	r13
    4442:	ef 92       	push	r14
    4444:	ff 92       	push	r15
    4446:	0f 93       	push	r16
    4448:	1f 93       	push	r17
    444a:	cf 93       	push	r28
    444c:	df 93       	push	r29
    444e:	cd b7       	in	r28, 0x3d	; 61
    4450:	de b7       	in	r29, 0x3e	; 62
    4452:	ca 1b       	sub	r28, r26
    4454:	db 0b       	sbc	r29, r27
    4456:	0f b6       	in	r0, 0x3f	; 63
    4458:	f8 94       	cli
    445a:	de bf       	out	0x3e, r29	; 62
    445c:	0f be       	out	0x3f, r0	; 63
    445e:	cd bf       	out	0x3d, r28	; 61
    4460:	09 94       	ijmp

00004462 <__epilogue_restores__>:
    4462:	2a 88       	ldd	r2, Y+18	; 0x12
    4464:	39 88       	ldd	r3, Y+17	; 0x11
    4466:	48 88       	ldd	r4, Y+16	; 0x10
    4468:	5f 84       	ldd	r5, Y+15	; 0x0f
    446a:	6e 84       	ldd	r6, Y+14	; 0x0e
    446c:	7d 84       	ldd	r7, Y+13	; 0x0d
    446e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4470:	9b 84       	ldd	r9, Y+11	; 0x0b
    4472:	aa 84       	ldd	r10, Y+10	; 0x0a
    4474:	b9 84       	ldd	r11, Y+9	; 0x09
    4476:	c8 84       	ldd	r12, Y+8	; 0x08
    4478:	df 80       	ldd	r13, Y+7	; 0x07
    447a:	ee 80       	ldd	r14, Y+6	; 0x06
    447c:	fd 80       	ldd	r15, Y+5	; 0x05
    447e:	0c 81       	ldd	r16, Y+4	; 0x04
    4480:	1b 81       	ldd	r17, Y+3	; 0x03
    4482:	aa 81       	ldd	r26, Y+2	; 0x02
    4484:	b9 81       	ldd	r27, Y+1	; 0x01
    4486:	ce 0f       	add	r28, r30
    4488:	d1 1d       	adc	r29, r1
    448a:	0f b6       	in	r0, 0x3f	; 63
    448c:	f8 94       	cli
    448e:	de bf       	out	0x3e, r29	; 62
    4490:	0f be       	out	0x3f, r0	; 63
    4492:	cd bf       	out	0x3d, r28	; 61
    4494:	ed 01       	movw	r28, r26
    4496:	08 95       	ret

00004498 <_exit>:
    4498:	f8 94       	cli

0000449a <__stop_program>:
    449a:	ff cf       	rjmp	.-2      	; 0x449a <__stop_program>
